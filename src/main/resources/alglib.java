/**************************************************************************
ALGLIB 4.02.0 (source code generated 2024-05-31)
Copyright (c) Sergey Bochkanov (ALGLIB project).

>>> SOURCE LICENSE >>>
This software is a non-commercial edition of  ALGLIB  package,  which  is
licensed under ALGLIB Personal and Academic Use License Agreement (PAULA).

See paula-v1.0.pdf file in the archive  root  for  full  text  of  license
agreement.
>>> END OF LICENSE >>>

*************************************************************************/

package alglib;
public class alglib
{
    private static final String libname_win64 = "alglib402_64free.dll";
    private static final String libname_lin64 = "alglib402_64free.so";
    private static final String jniname_win64 = "alglib402_jni_64free.dll";
    private static final String jniname_lin64 = "alglib402_jni_64free.so";
        //
    // X status codes
    //
    private final static int X_OK               = 0;
    private final static int X_MALLOC_ERROR     = 1;
    private final static int X_ASSERTION_FAILED = 5;
    private final static int X_INPUT_FAILURE    = 999001;
    
    //
    // X-interface primitive data types
    //
    private final static int DT_BOOL = 1;
    private final static int DT_INT = 2;
    private final static int DT_REAL = 3;
    private final static int DT_COMPLEX = 4;
    
    //
    // Sizes of primitive types
    //
    private final static int SIZE_BOOL = 1;
    private final static int SIZE_INT  = 4;
    private final static int SIZE_REAL = 8;
    private final static int SIZE_COMPLEX = 16;

    //
    // Who owns the memory
    //
    private final static int OWN_CALLER = 1;
    private final static int OWN_AE = 2;

    //
    // Action with x-vector/matrix
    //
    private final static int X_SET     = 1; // data are copied into x-vector/matrix; previous contents of x-structure is freed
    private final static int X_CREATE  = 2; // x-vector/matrix is created, its previous contents is ignored
    private final static int X_REWRITE = 3; // data are copied into x-structure; size of Python structure must be equal to the x-structure size

    //
    // communication codes for X-core
    //
    private final static int _ALGLIB_SET_GLOBAL_THREADING       = 1001;
    private final static int _ALGLIB_SET_NWORKERS               = 1002;
    
    private final static int _ALGLIB_GET_ALLOC_COUNTER          =    0;
    private final static int _ALGLIB_GET_CUMULATIVE_ALLOC_SIZE  =    1;
    private final static int _ALGLIB_GET_CUMULATIVE_ALLOC_COUNT =    2;
    
    private final static int _ALGLIB_GET_GLOBAL_THREADING       = 1001;
    private final static int _ALGLIB_GET_NWORKERS               = 1002;
    
    //
    // Debug function to test communication
    //
    public static native int _get_dbg_val();
    
    //
    // Infrastructure to load JNI wrapper
    //
    private static volatile boolean _LibaryLoaded = false;
    private static Object core_lock = new Object();
    public static native int _jni_load_xcore(String libname);
    public static void activatealglibcore()
    {
        if( _LibaryLoaded )
            return;
        
        //
        // Double-checked locking
        //
        synchronized(core_lock)
        {
            if( _LibaryLoaded )
                return;
            
            //
            // Determine CPU architecture
            //
            String cpu_arch = System.getProperty("os.arch").toLowerCase();
            boolean is_intel32 = cpu_arch.matches("^(x8632|x86|i[3-6]86|ia32|x32)$");
            boolean is_intel64 = cpu_arch.matches("^(x8664|amd64|ia32e|em64t|x64)$");
            boolean is_arm64v8 = cpu_arch.equals("aarch_64");
            boolean is_riscv   = cpu_arch.matches("^(riscv|riscv32)$");
            boolean is_riscv64 = cpu_arch.equals("riscv64");
            if( !is_intel32 && !is_intel64 && !is_arm64v8 && !is_riscv && !is_riscv64 )
            {
                System.err.println("ALGLIB: CPU arch is '"+cpu_arch+"', unable to recognize it");
                System.exit(1);
            }
            
            //
            // Determine OS
            //
            String os_name = System.getProperty("os.name").toLowerCase();
            boolean is_windows = os_name.startsWith("windows");
            boolean is_linux   = os_name.startsWith("linux");
            if( !is_windows && !is_linux )
            {
                System.err.println("ALGLIB: OS name is '"+os_name+"', unable to recognize it as Windows or Linux");
                System.exit(1);
            }
            
            
            //
            // Determine bitness of the system, only 64-bit systems are supported
            //
            String data_model = System.getProperty("sun.arch.data.model");
            if( !data_model.equals("64") )
            {
                System.err.println("ALGLIB: 64-bit OS is required");
                System.exit(1);
            }
            
            //
            // Determine path to current class
            //
            String class_dir = ".";
            try
            {   
                //
                // After the line of code below we have:
                // * when executing ALGLIB from alglib.jar: class_url.getPath()=="file:/path/to/alglib.jar!alglib/alglib.class"
                //
                java.net.URL class_url = alglib.class.getResource(alglib.class.getSimpleName() + ".class");
                if( !class_url.getProtocol().equals("jar") && !class_url.getProtocol().equals("file") )
                {
                    System.err.println("ALGLIB: unrecognized protocol '"+class_url.getProtocol()+"' detected during class loader analysis");
                    System.exit(1);
                }
                
                //
                // After the line of code below we have class_dir=="/path/to"
                //
                if( class_url.getProtocol().equals("jar") )
                {
                    class_dir = new java.net.URL(class_url.getPath()).getPath();
                    class_dir = new java.io.File(class_dir).getParent();
                    class_dir = new java.io.File(class_dir).getParent();
                    class_dir = new java.io.File(class_dir).getParent();
                }
                else
                {
                    class_dir = new java.io.File(class_dir).getParent();
                }
            }
            catch(java.net.MalformedURLException ex)
            {
                System.err.println("ALGLIB: unable to determine path to JAR file, malformed URL generated during class loader analysis");
                System.exit(1);
            }
            
            //
            // Load JNI wrapper
            //
            boolean loaded = false;
            String libname = "";
            if( is_windows && is_intel64 )
            {
                System.load(class_dir+java.io.File.separator+jniname_win64);
                libname = libname_win64;
                loaded = true;
            }
            if( is_linux && is_intel64 )
            {
                System.load(class_dir+java.io.File.separator+jniname_lin64);
                libname = libname_lin64;
                loaded = true;
            }
            if( !loaded )
            {
                System.err.println("ALGLIB: unexpected combination of CPU and OS type");
                System.exit(1);
            }
            
            //
            // Send request to JNI wrapper to load X-core
            //
            String xcore_path = class_dir+java.io.File.separator+libname;
            java.io.File xcore_file = new java.io.File(xcore_path);
            if( !xcore_file.exists() || xcore_file.isDirectory() )
            {
                System.err.println("ALGLIB: native core file "+libname+" does not exist in the same directory as JNI wrapper");
                System.exit(1);
            }
            if( _jni_load_xcore(xcore_path)!=0 )
            {
                System.err.println("ALGLIB: JNI wrapper failed to load native core, unknown error in the wrapper");
                System.exit(1);
            }
            
            //
            // Done with initialization, write to volatile _LibaryLoaded, ensuring correct total ordering
            //
            _LibaryLoaded = true;
        }
    }
    
    /********************************************************************
    Exception handling/forwarding
    Successfully returns for error_code==X_OK.
    ********************************************************************/
    private static void handle_exception(int error_code, String msg, String func_name) throws alglib.exception
    {
        if( error_code==X_OK )
            return;
        if( error_code==X_ASSERTION_FAILED )
            throw new exception(msg);
        if( error_code==X_INPUT_FAILURE )
            throw new exception(msg+"(error in alglib."+func_name+")");
        if( error_code==X_MALLOC_ERROR )
            throw new exception("ALGLIB: malloc() error during '"+func_name+"' call");
        throw new exception("ALGLIB: unknown error during '"+func_name+"' call");
    }
    
    /********************************************************************
    ALGLIB xparams
    ********************************************************************/
    public static class xparams
    {
        private long val;
        protected xparams(long x) { val = x; }
        protected long get_val()  { return val; }
    }
    private static final long FLG_THREADING_SERIAL        = 0x1;
    private static final long FLG_THREADING_PARALLEL      = 0x2;
    public static final xparams serial   = new xparams(FLG_THREADING_SERIAL);
    public static final xparams parallel = new xparams(FLG_THREADING_PARALLEL);

    /********************************************************************
    Allocation counter: returns current value of the  allocation  counter
    (if it was activated)
    ********************************************************************/
    private static native long _jni_alloc_counter();
    public static long alloc_counter()
    {
        activatealglibcore();
        return _jni_alloc_counter();
    }
    
    /********************************************************************
    Activization of the allocation counter
    ********************************************************************/
    private static native void _jni_alloc_counter_activate();
    public static void alloc_counter_activate()
    {
        activatealglibcore();
        _jni_alloc_counter_activate();
    }
    
    /************************************************************************
    This function sets number of CPU cores which should  be  used  by  worker
    threads. In case user specified non-positive number of cores to use, this
    number will be converted according to following rules:
    *  0 => ae_cores_count()
    * -1 => max(ae_cores_count()-1,1)
    * -2 => max(ae_cores_count()-2,1)
    and so on.

    In case user specified positive number of  cores,  greater  than 1,  then
    ALGLIB will launch no more than ncores threads (or less, when nworkers is
    larger than actual number of cores).
    ************************************************************************/
    public static void setnworkers(int nworkers)
    {
        activatealglibcore();
        _jni_setnworkers(nworkers);
    }
    
    /************************************************************************
    This function returns number of CPU cores which will be used by ALGLIB.
    ************************************************************************/
    public static int getnworkers()
    {
        activatealglibcore();
        return (int)_jni_get_dbg_value(_ALGLIB_GET_NWORKERS);
    }
    
    /************************************************************************
    This function sets global threading settings.
    ************************************************************************/
    public static void setglobalthreading(xparams p)
    {
        activatealglibcore();
        _jni_set_dbg_flag(_ALGLIB_SET_GLOBAL_THREADING, p!=null ? p.get_val() : (long)0);
    }
    
    /************************************************************************
    This function frees internally allocated buffers, used ONLY  for  testing
    for memory leaks.
    ************************************************************************/
    public static void _free_disposed_items()
    {
        activatealglibcore();
        _jni_free_disposed_items();
    }
    
    /************************************************************************
    This function sets debug flag. Strictly for internal use.
    ************************************************************************/
    public static void _set_dbg_flag(long flag_id, long val)
    {
        activatealglibcore();
        _jni_set_dbg_flag(flag_id, val);
    }
    
    /************************************************************************
    This function returns debug value. Strictly for internal use.
    ************************************************************************/
    public static long _get_dbg_value(long val_id)
    {
        activatealglibcore();
        return _jni_get_dbg_value(val_id);
    }
    
    /********************************************************************
    This function activates trace output, with trace log being  saved  to
    file (appended to the end).

    Tracing allows us to study behavior of ALGLIB solvers  and  to  debug
    their failures:
    * tracing is  limited  by one/several ALGLIB parts specified by means
      of trace tags, like "SLP" (for SLP solver) or "OPTGUARD"  (OptGuard
      integrity checker).
    * some ALGLIB solvers support hierarchies of trace tags which activate
      different kinds of tracing. Say, "SLP" defines some basic  tracing,
      but "SLP.PROBING" defines more detailed and costly tracing.
    * generally, "TRACETAG.SUBTAG"   also  implicitly  activates  logging
      which is activated by "TRACETAG"
    * you may define multiple trace tags by separating them with  commas,
      like "SLP,OPTGUARD,SLP.PROBING"
    * trace tags are case-insensitive
    * spaces/tabs are NOT allowed in the tags string

    Trace log is saved to file "filename", which is opened in the  append
    mode. If no file with such name  can  be  opened,  tracing  won't  be
    performed (but no exception will be generated).
    ********************************************************************/
    public static void trace_file(String tags, String filename) throws alglib.exception
    {
        if( tags==null )
            throw new alglib.exception("ALGLIB: trace_file() was called with null tags");
        if( filename==null )
            throw new alglib.exception("ALGLIB: trace_file() was called with null filename");
        activatealglibcore();
        _jni_trace_file(tags, filename);
    }
    
    
    /********************************************************************
    This function disables tracing.
    ********************************************************************/
    public static void trace_disable()
    {
        activatealglibcore();
        _jni_trace_disable();
    }
    
    /********************************************************************
    Function interfaces for optimizers/fitters/solvers.
    
    Interfaces for unparameterized (general) functions:
    * ndimensional_func         calculates f(arg), stores result to func
    * ndimensional_grad         calculates func = f(arg), 
                                grad[i] = df(arg)/d(arg[i])
    * ndimensional_hess         calculates func = f(arg),
                                grad[i] = df(arg)/d(arg[i]),
                                hess[i,j] = d2f(arg)/(d(arg[i])*d(arg[j]))
    
    Interfaces for systems of functions:
    * ndimensional_fvec         calculates vector function f(arg),
                                stores result to fi
    * ndimensional_jac          calculates f[i] = fi(arg)
                                jac[i,j] = df[i](arg)/d(arg[j])
                                
    Interfaces for parameterized  functions,  i.e.  for  functions  which 
    depend on two vectors: P and Q.  Gradient  and Hessian are calculated 
    with respect to P only.
    * ndimensional_pfunc        calculates f(p,q),
                                stores result to func
    * ndimensional_pgrad        calculates func = f(p,q),
                                grad[i] = df(p,q)/d(p[i])
    * ndimensional_phess        calculates func = f(p,q),
                                grad[i] = df(p,q)/d(p[i]),
                                hess[i,j] = d2f(p,q)/(d(p[i])*d(p[j]))

    Callbacks for progress reports:
    * ndimensional_rep          reports current position of optimization algo    
    
    Callbacks for ODE solvers:
    * ndimensional_ode_rp       calculates dy/dx for given y[] and x
    
    Callbacks for integrators:
    * integrator1_func          calculates f(x) for given x
                                (additional parameters xminusa and bminusx
                                contain x-a and b-x)
    ********************************************************************/
    public interface ndimensional_func  { public double calc(double[] arg, Object obj) throws alglib.exception; }
    public interface ndimensional_grad  { public double calc(double[] arg, double[] grad, Object obj) throws alglib.exception; }
    public interface ndimensional_hess  { public double calc(double[] arg, double[] grad, double[][] hess, Object obj) throws alglib.exception; }
    
    public interface ndimensional_fvec  { public void calc(double[] arg, double[] fi, Object obj) throws alglib.exception; }
    public interface ndimensional_jac   { public void calc(double[] arg, double[] fi, double[][] jac, Object obj) throws alglib.exception; }
    public interface ndimensional_sjac  { public void calc(double[] arg, double[] fi, sparsematrix sjac, Object obj) throws alglib.exception; }
    
    public interface ndimensional_pfunc { public double calc(double[] p, double[] q, Object obj) throws alglib.exception; }
    public interface ndimensional_pgrad { public double calc(double[] p, double[] q, double[] grad, Object obj) throws alglib.exception; }
    public interface ndimensional_phess { public double calc(double[] p, double[] q, double[] grad, double[][] hess, Object obj) throws alglib.exception; }
    
    public interface ndimensional_pfvec { public void calc(double[] arg, double[] par, double[] fi, Object obj) throws alglib.exception; }
    public interface ndimensional_pjac  { public void calc(double[] arg, double[] par, double[] fi, double[][] jac, Object obj) throws alglib.exception; }
    public interface ndimensional_psjac { public void calc(double[] arg, double[] par, double[] fi, sparsematrix sjac, Object obj) throws alglib.exception; }
    
    public interface ndimensional_rep   { public void report(double[] arg, double func, Object obj) throws alglib.exception; }

    public interface ndimensional_ode_rp{ public void calc(double[] y, double x, double[] dy, Object obj) throws alglib.exception; }

    public interface integrator1_func   { public double calc(double x, double xminusa, double bminusx, Object obj) throws alglib.exception; }

    /********************************************************************
    Class defining a complex number with double precision.
    ********************************************************************/
    public static class complex
    {
        public double x;
        public double y;

        public complex()
        {
            x = 0;
            y = 0;
        }

        public complex(double _x)
        {
            x = _x;
            y = 0;
        }
        public complex(double _x, double _y)
        {
            x = _x;
            y = _y;
        }
        public complex(complex z)
        {
            x = z.x;
            y = z.y;
        }
    }
    
    /********************************************************************
    ALGLIB object, parent class for all user-visible objects  managed  by
    ALGLIB.
    
    Methods:
        deallocate()        clears native memory being hold by the object
                            and sets internal reference to null.
                        
        make_copy()         creates deep copy of the object.
    ********************************************************************/
    public abstract static class alglibobject implements java.lang.AutoCloseable
    {
        public void deallocate() {}
        public abstract alglibobject make_copy();
        public void close()
        { deallocate(); }
    }
    
    /********************************************************************
    ALGLIB exception
    ********************************************************************/
    public static class exception extends java.lang.Exception
    {
        public exception(String message)
        {
            super(message);
        }
    }
    
    /********************************************************************
    Service functions used by X-tests
    ********************************************************************/
    public static class ap
    {
        public static int cols(boolean[][] x)           { return x.length==0 ? 0 : x[x.length-1].length; }
        public static int cols(int[][] x)               { return x.length==0 ? 0 : x[x.length-1].length; }
        public static int cols(double[][] x)            { return x.length==0 ? 0 : x[x.length-1].length; }
        public static int cols(alglib.complex[][] x)    { return x.length==0 ? 0 : x[x.length-1].length; }
        //
        public static int rows(boolean[][] x)           { return x.length; }
        public static int rows(int[][] x)               { return x.length; }
        public static int rows(double[][] x)            { return x.length; }
        public static int rows(alglib.complex[][] x)    { return x.length; }
    }
    
    /********************************************************************
    Copy helpers
    ********************************************************************/
    static protected boolean[] make_copy(boolean[] src)
    { return src!=null ? java.util.Arrays.copyOf(src, src.length) : null; }
    static protected int[] make_copy(int[] src)
    { return src!=null ? java.util.Arrays.copyOf(src, src.length) : null; }
    static protected double[] make_copy(double[] src)
    { return src!=null ? java.util.Arrays.copyOf(src, src.length) : null; }
    static protected complex[] make_copy(complex[] src)
    {
        if( src==null )
            return null;
        complex[] r = new complex[src.length];
        for(int i=0; i<src.length; i++)
            r[i] = new complex(src[i]);
        return r;
    }
    static protected boolean[][] make_copy(boolean[][] src)
    {
        if( src==null )
            return null;
        boolean[][] r = new boolean[src.length][];
        for(int i=0; i<src.length; i++)
            r[i] = make_copy(src[i]);
        return r;
    }
    static protected int[][] make_copy(int[][] src)
    {
        if( src==null )
            return null;
        int[][] r = new int[src.length][];
        for(int i=0; i<src.length; i++)
            r[i] = make_copy(src[i]);
        return r;
    }
    static protected double[][] make_copy(double[][] src)
    {
        if( src==null )
            return null;
        double[][] r = new double[src.length][];
        for(int i=0; i<src.length; i++)
            r[i] = make_copy(src[i]);
        return r;
    }
    static protected complex[][] make_copy(complex[][] src)
    {
        if( src==null )
            return null;
        complex[][] r = new complex[src.length][];
        for(int i=0; i<src.length; i++)
            r[i] = make_copy(src[i]);
        return r;
    }
    
    
    /********************************************************************
    Mutable and reallocateable wrappers
    ********************************************************************/
    protected static class mut_int        { public int val;           public mut_int() { val = 0; }           public mut_int(int v) { val = v; } }
    protected static class mut_long       { public long val;          public mut_long() { val = 0; }          public mut_long(long v) { val = v; } }
    protected static class mut_double     { public double val;        public mut_double() { val = 0; }        public mut_double(double v) { val = v; } }
    protected static class mut_complex    { public complex val;       public mut_complex() { val = new complex(); }   public mut_complex(complex v) { val = new complex(v); } }
    protected static class mut_boolean    { public boolean val;       public mut_boolean() { val = false; }   public mut_boolean(boolean v) { val = v; } }
    protected static class mut_string     { public String val;        public mut_string() { val = null; }     public mut_string(String v) { val = v; } }
    protected static class mut_object     { public Object val;        public mut_object() { val = null; }     public mut_object(Object v) { val = v; } }
    protected static class rlc_int1d      { public int[] val;         public rlc_int1d() { val = null; }      public rlc_int1d(int[] v) { val = v; } }
    protected static class rlc_long1d     { public long[] val;        public rlc_long1d() { val = null; }     public rlc_long1d(long[] v) { val = v; } }
    protected static class rlc_double1d   { public double[] val;      public rlc_double1d() { val = null; }   public rlc_double1d(double[] v) { val = v; } }
    protected static class rlc_complex1d  { public complex[] val;     public rlc_complex1d() { val = null; }  public rlc_complex1d(complex[] v) { val = v; } }
    protected static class rlc_boolean1d  { public boolean[] val;     public rlc_boolean1d() { val = null; }  public rlc_boolean1d(boolean[] v) { val = v; } }
    protected static class rlc_int2d      { public int[][] val;       public rlc_int2d() { val = null; }      public rlc_int2d(int[][] v) { val = v; } }
    protected static class rlc_long2d     { public long[][] val;      public rlc_long2d() { val = null; }     public rlc_long2d(long[][] v) { val = v; } }
    protected static class rlc_double2d   { public double[][] val;    public rlc_double2d() { val = null; }   public rlc_double2d(double[][] v) { val = v; } }
    protected static class rlc_complex2d  { public complex[][] val;   public rlc_complex2d() { val = null; }  public rlc_complex2d(complex[][] v) { val = v; } }
    protected static class rlc_boolean2d  { public boolean[][] val;   public rlc_boolean2d() { val = null; }  public rlc_boolean2d(boolean[][] v) { val = v; } }
    
    /********************************************************************
    Miscellaneous X-core operations
    ********************************************************************/
    protected static native void _jni_free_disposed_items();
    protected static native void _jni_trace_file(String tags, String filename);
    protected static native void _jni_trace_disable();
    protected static native void _jni_setnworkers(long nworkers);
    protected static native void _jni_set_dbg_flag(long flag_id, long val);
    protected static native long _jni_get_dbg_value(long val_id);
    
    /********************************************************************
    Operations with x-vectors and matrices pointed by long-typed pointers
    ********************************************************************/
    protected static native void _jni_x_vector_to_double_array(long x, rlc_double1d arr);
    protected static native void _jni_x_matrix_to_double_array(long x, rlc_double2d arr);
    protected static native void _jni_x_vector_from_array(long x, Object arr, int datatype, int x_operation, mut_int e_flag, mut_string e_msg);
    protected static native void _jni_x_matrix_from_array(long x, Object arr, int datatype, int x_operation, mut_int e_flag, mut_string e_msg);
    protected static native void _jni_x_vector_clear_and_free(long x);
    protected static native void _jni_x_matrix_clear_and_free(long x);
    
    /********************************************************************
    Class encapsulating RCOMM-V2 request information
    ********************************************************************/
    protected interface _rcommv2_request_fetchfunc  { public void fetch(_rcommv2_request request, long xobj); }
    protected static class _rcommv2_request
    {
        public Object obj;
        public String subpackage;
        public int request;
        public int size;
        public int funcs;
        public int vars;
        public int dim;
        public int formulasize;
        public double reportf;
        public double[] reportx;
        public double[] querydata;
        public double[] replyfi;
        public double[] replydj;
        public sparsematrix replysj;
        public long ptr_replyfi;
        public long ptr_replydj;
        public long ptr_replysj;
        
        protected _rcommv2_request(Object param, String sname)
        {
            obj = param;
            subpackage = sname;
        }
        
        protected void fetch(_rcommv2_request_fetchfunc ff, long xobj)
        {
            ff.fetch(this, xobj);
            if( request==1 && (replysj==null || replysj.get_ptr()!=ptr_replysj) )
            {
                if( replysj!=null )
                    replysj.deallocate();
                replysj = new sparsematrix(ptr_replysj,false);
            }
        }
        
        protected void send_reply() throws alglib.exception
        {
            if( request==1 )
            {
                int rf_size = size*funcs;
                _jni_rcv2_send_reply(replyfi, ptr_replyfi, rf_size, replydj, ptr_replydj, 0);
                return;
            }
            if( request==2 || request==3 || request==4 || request==5 )
            {
                int rf_size = size*funcs;
                int rd_size = (request==2 || request==3 || request==5) ? size*funcs*vars : 0;
                _jni_rcv2_send_reply(replyfi, ptr_replyfi, rf_size, replydj, ptr_replydj, rd_size);
                return;
            }
            throw new exception("_rcommv2_request.send_reply(): unexpected request type");
        }
    }
    
    protected static native void _jni_rcv2_send_reply(double[] replyfi, long ptr_replyfi, long replyfi_size, double[] replydj, long ptr_replydj, long replydj_size);

    /********************************************************************
    RCOMM-V2 buffers
    ********************************************************************/
    protected static class _rcommv2_buffers
    {
        public double[] tmpX;
        public double[] tmpC;
        public double[] tmpF;
        public double[] tmpG;
        public double[][] tmpJ;
        public sparsematrix tmpS;
        
        protected _rcommv2_buffers()
        {
            tmpX = new double[]{};
            tmpC = new double[]{};
            tmpF = new double[]{};
            tmpG = new double[]{};
            tmpJ = new double[][]{{}};
        }
        
        protected void resize(_rcommv2_request request) throws alglib.exception
        {
            if( tmpX.length<request.vars )
                tmpX = new double[request.vars];
            if( request.dim>0 && tmpC.length<request.dim )
                tmpC = new double[request.dim];
            if( tmpF.length<request.funcs )
                tmpF = new double[request.funcs];
            if( tmpG.length<request.vars )
                tmpG = new double[request.vars];
            if( request.request==1 && tmpS==null )
                tmpS = sparsecreatecrsempty(request.vars);
            if( request.request==2 && (ap.rows(tmpJ)<request.funcs || ap.cols(tmpJ)<request.vars) )
                tmpJ = new double[request.funcs][request.vars];
        }
        
        protected void deallocate()
        {
            if( tmpS!=null )
            {
                tmpS.deallocate();
                tmpS = null;
            }
        }
    }
    
    /********************************************************************
    RCOMM-V2 handlers
    ********************************************************************/
    protected static void _process_v2request_1(
                            _rcommv2_request request,
                            int query_idx,
                            ndimensional_sjac sjac,
                            ndimensional_psjac psjac,
                            _rcommv2_buffers buffers) throws alglib.exception
    {   
        //
        // Query and reply offsets
        //
        int query_data_offs = query_idx*(request.vars+request.dim);
        int reply_fi_offs   = query_idx*request.funcs;
        if( sparsegetnrows(request.replysj)!=query_idx*request.funcs )
            throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; improperly ordered request");
        
        //
        // Copy inputs to buffers
        //
        for(int i=0; i<request.vars; i++)
            buffers.tmpX[i] = request.querydata[query_data_offs+i];
        if( request.dim>0 )
            for(int i=0; i<request.dim; i++)
                buffers.tmpC[i] = request.querydata[query_data_offs+request.vars+i];
        sparsecreatecrsemptybuf(request.vars, buffers.tmpS);
        
        //
        // Callback
        //
        if( sjac!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            sjac.calc(buffers.tmpX, buffers.tmpF, buffers.tmpS, request.obj);
            for(int ridx=0; ridx<request.funcs; ridx++)
                request.replyfi[reply_fi_offs+ridx] = buffers.tmpF[ridx];
            sparseappendmatrix(request.replysj, buffers.tmpS);
            return;
        }
        if( psjac!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            psjac.calc(buffers.tmpX, buffers.tmpC, buffers.tmpF, buffers.tmpS, request.obj);
            for(int ridx=0; ridx<request.funcs; ridx++)
                request.replyfi[reply_fi_offs+ridx] = buffers.tmpF[ridx];
            sparseappendmatrix(request.replysj, buffers.tmpS);
            return;
        }
        throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; no callback for optimizer request");
    }

    protected static void _process_v2request_2(
                            _rcommv2_request request,
                            int query_idx,
                            ndimensional_grad grad,
                            ndimensional_pgrad pgrad,
                            ndimensional_jac jac,
                            ndimensional_pjac pjac,
                            _rcommv2_buffers buffers) throws alglib.exception
    {   
        //
        // Query and reply offsets
        //
        int query_data_offs = query_idx*(request.vars+request.dim);
        int reply_fi_offs   = query_idx*request.funcs;
        int reply_dj_offs   = query_idx*request.funcs*request.vars;
        
        //
        // Copy inputs to buffers
        //
        for(int i=0; i<request.vars; i++)
            buffers.tmpX[i] = request.querydata[query_data_offs+i];
        if( request.dim>0 )
            for(int i=0; i<request.dim; i++)
                buffers.tmpC[i] = request.querydata[query_data_offs+request.vars+i];
        
        //
        // Callback
        //
        if( grad!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0 && request.funcs==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            request.replyfi[reply_fi_offs] = grad.calc(buffers.tmpX, buffers.tmpG, request.obj);
            for(int i=0; i<request.vars; i++)
                request.replydj[reply_dj_offs+i] = buffers.tmpG[i];
            return;
        }
        if( pgrad!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0 && request.funcs==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            request.replyfi[reply_fi_offs] = pgrad.calc(buffers.tmpX, buffers.tmpC, buffers.tmpG, request.obj);
            for(int i=0; i<request.vars; i++)
                request.replydj[reply_dj_offs+i] = buffers.tmpG[i];
            return;
        }
        if( jac!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            jac.calc(buffers.tmpX, buffers.tmpF, buffers.tmpJ, request.obj);
            for(int ridx=0; ridx<request.funcs; ridx++)
            {
                int doffs = reply_dj_offs+ridx*request.vars;
                request.replyfi[reply_fi_offs+ridx] = buffers.tmpF[ridx];
                for(int i=0; i<request.vars; i++)
                    request.replydj[doffs+i] = buffers.tmpJ[ridx][i];
            }
            return;
        }
        if( pjac!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            pjac.calc(buffers.tmpX, buffers.tmpC, buffers.tmpF, buffers.tmpJ, request.obj);
            for(int ridx=0; ridx<request.funcs; ridx++)
            {
                int doffs = reply_dj_offs+ridx*request.vars;
                request.replyfi[reply_fi_offs+ridx] = buffers.tmpF[ridx];
                for(int i=0; i<request.vars; i++)
                    request.replydj[doffs+i] = buffers.tmpJ[ridx][i];
            }
            return;
        }
        throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; no callback for optimizer request");
    }

    protected static void _process_v2request_3phase0(
                            _rcommv2_request request,
                            int job_idx,
                            ndimensional_func func,
                            ndimensional_pfunc pfunc,
                            ndimensional_fvec fvec,
                            ndimensional_pfvec pfvec,
                            _rcommv2_buffers buffers) throws alglib.exception
    {
        //
        // Phase 0: compute target at the origin and compute parts of the numerical differentiation formula that do NOT depend
        // on the value at origin.
        //
        // This job can be completely parallelized without synchronization.
        //
        if( job_idx<request.size*request.vars )
        {
            //
            // Compute parts of the numerical differentiation formula that do NOT depend
            // on the value at origin.
            //
            int query_idx = job_idx/request.vars;
            int var_idx   = job_idx%request.vars;
            int n = request.vars;
            int m = request.funcs;
            int fs = request.formulasize;
            int query_data_offs   = query_idx*(n+request.dim+n*request.formulasize*2);
            int formula_data_offs = query_data_offs+n+request.dim+var_idx*fs*2;
            int reply_dj_offs     = query_idx*n*m;
            
            //
            // Copy inputs to buffers
            //
            for(int i=0; i<request.vars; i++)
                buffers.tmpX[i] = request.querydata[query_data_offs+i];
            if( request.dim>0 )
                for(int i=0; i<request.dim; i++)
                    buffers.tmpC[i] = request.querydata[query_data_offs+request.vars+i];
            
            //
            // compute gradient using numerical differentiation formula provided by the optimizer
            //
            double xprev = buffers.tmpX[var_idx];
            for(int t=0; t<m; t++)
                request.replydj[reply_dj_offs+t*n+var_idx] = 0;
            for(int idx=0; idx<fs; idx++)
            {
                double xx=request.querydata[formula_data_offs+idx*2+0], coeff=request.querydata[formula_data_offs+idx*2+1];
                if( coeff==0 )
                    continue;
                if( xx==request.querydata[query_data_offs+var_idx] ) // skip terms that depend on the target value at origin - it is still computed
                    continue;
                buffers.tmpX[var_idx] = xx;
                if( func!=null )
                {
                    //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                    buffers.tmpF[0] = func.calc(buffers.tmpX, request.obj);
                }
                else if( pfunc!=null )
                {
                    //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                    buffers.tmpF[0] = pfunc.calc(buffers.tmpX, buffers.tmpC, request.obj);
                }
                else if( fvec!=null )
                {
                    //!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                    fvec.calc(buffers.tmpX, buffers.tmpF, request.obj);
                }
                else if( pfvec!=null )
                {
                    //!!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                    pfvec.calc(buffers.tmpX, buffers.tmpC, buffers.tmpF, request.obj);
                }
                else
                    throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; no callback for optimizer request");
                buffers.tmpX[var_idx] = xprev;
                for(int t=0; t<m; t++)
                    request.replydj[reply_dj_offs+t*n+var_idx] += coeff*buffers.tmpF[t];
            }
        }
        else
        {
            //
            // Compute target value at the origin
            //
            int query_idx = job_idx-request.size*request.vars;
            int query_data_offs = query_idx*(request.vars+request.dim+request.vars*request.formulasize*2);
            int reply_fi_offs   = query_idx*request.funcs;
            int m = request.funcs;
            
            //
            // Copy inputs to buffers
            //
            for(int i=0; i<request.vars; i++)
                buffers.tmpX[i] = request.querydata[query_data_offs+i];
            if( request.dim>0 )
                for(int i=0; i<request.dim; i++)
                    buffers.tmpC[i] = request.querydata[query_data_offs+request.vars+i];
            
            //
            // Callback
            //
            if( func!=null )
            {
                //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                buffers.tmpF[0] = func.calc(buffers.tmpX, request.obj);
            }
            else if( pfunc!=null )
            {
                //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                buffers.tmpF[0] = pfunc.calc(buffers.tmpX, buffers.tmpC, request.obj);
            }
            else if( fvec!=null )
            {
                //!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                fvec.calc(buffers.tmpX, buffers.tmpF, request.obj);
            }
            else if( pfvec!=null )
            {
                //!!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                pfvec.calc(buffers.tmpX, buffers.tmpC, buffers.tmpF, request.obj);
            }
            else
                throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; no callback for optimizer request");
            for(int t=0; t<m; t++)
                request.replyfi[reply_fi_offs+t] = buffers.tmpF[t];
        }
    }
    
    protected static void _process_v2request_4(
                            _rcommv2_request request,
                            int query_idx,
                            ndimensional_func func,
                            ndimensional_pfunc pfunc,
                            ndimensional_fvec fvec,
                            ndimensional_pfvec pfvec,
                            _rcommv2_buffers buffers) throws alglib.exception
    {   
        //
        // Query and reply offsets
        //
        int query_data_offs = query_idx*(request.vars+request.dim);
        int reply_fi_offs   = query_idx*request.funcs;
        
        //
        // Copy inputs to buffers
        //
        for(int i=0; i<request.vars; i++)
            buffers.tmpX[i] = request.querydata[query_data_offs+i];
        if( request.dim>0 )
            for(int i=0; i<request.dim; i++)
                buffers.tmpC[i] = request.querydata[query_data_offs+request.vars+i];
        
        //
        // Callback
        //
        if( func!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0 && request.funcs==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            request.replyfi[reply_fi_offs] = func.calc(buffers.tmpX, request.obj);
            return;
        }
        if( pfunc!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0 && request.funcs==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            request.replyfi[reply_fi_offs] = pfunc.calc(buffers.tmpX, buffers.tmpC, request.obj);
            return;
        }
        if( fvec!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            fvec.calc(buffers.tmpX, buffers.tmpF, request.obj);
            for(int ridx=0; ridx<request.funcs; ridx++)
                request.replyfi[reply_fi_offs+ridx] = buffers.tmpF[ridx];
            return;
        }
        if( pfvec!=null )
        {
            //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
            pfvec.calc(buffers.tmpX, buffers.tmpC, buffers.tmpF, request.obj);
            for(int ridx=0; ridx<request.funcs; ridx++)
                request.replyfi[reply_fi_offs+ridx] = buffers.tmpF[ridx];
            return;
        }
        throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; no callback for optimizer request");
    }

    protected static void _process_v2request_3phase1(_rcommv2_request request) throws alglib.exception
    {
        //
        // Phase 1: compute parts of the numerical differentiation formula that DO depend on the value at origin.
        //
        // This phase does not need parallelism because all what we need is to add request.size*request.vars precomputed values.
        //
        for(int query_idx=0; query_idx<request.size; query_idx++)
            for(int var_idx=0; var_idx<request.vars; var_idx++)
            {
                //
                // Compute parts of the numerical differentiation formula that do NOT depend
                // on the value at origin.
                //
                int n = request.vars;
                int m = request.funcs;
                int fs = request.formulasize;
                int query_data_offs   = query_idx*(n+request.dim+n*request.formulasize*2);
                int formula_data_offs = query_data_offs+n+request.dim+var_idx*fs*2;
                int reply_fi_offs     = query_idx*m;
                int reply_dj_offs     = query_idx*n*m;
                for(int idx=0; idx<fs; idx++)
                {
                    double xx=request.querydata[formula_data_offs+idx*2+0], coeff=request.querydata[formula_data_offs+idx*2+1];
                    if( coeff==0 || xx!=request.querydata[query_data_offs+var_idx] )
                        continue;
                    for(int t=0; t<m; t++)
                        request.replydj[reply_dj_offs+t*n+var_idx] += coeff*request.replyfi[reply_fi_offs+t];
                }
            }
    }
    
    protected static void _process_v2request_5phase0(
                            _rcommv2_request request,
                            int job_idx,
                            ndimensional_func func,
                            ndimensional_pfunc pfunc,
                            ndimensional_fvec fvec,
                            ndimensional_pfvec pfvec,
                            _rcommv2_buffers buffers) throws alglib.exception
    {
        //
        // Phase 0: compute target at the origin and compute parts of the numerical differentiation formula that do NOT depend
        // on the value at origin.
        //
        // This job can be completely parallelized without synchronization.
        //
        if( job_idx<request.size*request.vars )
        {
            //
            // Compute parts of the numerical differentiation formula that do NOT depend
            // on the value at origin.
            //
            int query_idx = job_idx/request.vars;
            int var_idx   = job_idx%request.vars;
            int n = request.vars;
            int m = request.funcs;
            int fs = request.formulasize;
            int query_data_offs   = query_idx*(n+request.dim+n*request.formulasize*3);
            int formula_data_offs = query_data_offs+n+request.dim+var_idx*fs*3;
            int reply_dj_offs     = query_idx*n*m;
            
            //
            // Copy inputs to buffers
            //
            for(int i=0; i<request.vars; i++)
                buffers.tmpX[i] = request.querydata[query_data_offs+i];
            if( request.dim>0 )
                for(int i=0; i<request.dim; i++)
                    buffers.tmpC[i] = request.querydata[query_data_offs+request.vars+i];
            
            //
            // compute gradient using numerical differentiation formula provided by the optimizer
            //
            double xprev = buffers.tmpX[var_idx];
            for(int t=0; t<m; t++)
                request.replydj[reply_dj_offs+t*n+var_idx] = 0;
            for(int idx=0; idx<fs; idx++)
            {
                double xa=request.querydata[formula_data_offs+idx*3+0];
                double xb=request.querydata[formula_data_offs+idx*3+1];
                double w =request.querydata[formula_data_offs+idx*3+2];
                boolean wait_for_value_at_origin = false;
                if( w==0 )
                    continue;
                if( xa!=request.querydata[query_data_offs+var_idx] )
                {
                    buffers.tmpX[var_idx] = xa;
                    if( func!=null )
                    {
                        //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                        buffers.tmpF[0] = func.calc(buffers.tmpX, request.obj);
                    }
                    else if( pfunc!=null )
                    {
                        //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                        buffers.tmpF[0] = pfunc.calc(buffers.tmpX, buffers.tmpC, request.obj);
                    }
                    else if( fvec!=null )
                    {
                        //!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                        fvec.calc(buffers.tmpX, buffers.tmpF, request.obj);
                    }
                    else if( pfvec!=null )
                    {
                        //!!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                        pfvec.calc(buffers.tmpX, buffers.tmpC, buffers.tmpF, request.obj);
                    }
                    else
                        throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; no callback for optimizer request");
                    buffers.tmpX[var_idx] = xprev;
                    for(int t=0; t<m; t++)
                        request.replydj[reply_dj_offs+t*n+var_idx] += buffers.tmpF[t];
                }
                else
                    wait_for_value_at_origin = true;
                if( xb!=request.querydata[query_data_offs+var_idx] )
                {
                    buffers.tmpX[var_idx] = xb;
                    if( func!=null )
                    {
                        //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                        buffers.tmpF[0] = func.calc(buffers.tmpX, request.obj);
                    }
                    else if( pfunc!=null )
                    {
                        //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                        buffers.tmpF[0] = pfunc.calc(buffers.tmpX, buffers.tmpC, request.obj);
                    }
                    else if( fvec!=null )
                    {
                        //!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                        fvec.calc(buffers.tmpX, buffers.tmpF, request.obj);
                    }
                    else if( pfvec!=null )
                    {
                        //!!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                        pfvec.calc(buffers.tmpX, buffers.tmpC, buffers.tmpF, request.obj);
                    }
                    else
                        throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; no callback for optimizer request");
                    buffers.tmpX[var_idx] = xprev;
                    for(int t=0; t<m; t++)
                        request.replydj[reply_dj_offs+t*n+var_idx] -= buffers.tmpF[t];
                }
                else
                    wait_for_value_at_origin = true;
                if( wait_for_value_at_origin )
                {
                    if( idx!=fs-1 )
                        throw new exception("ALGLIB: integrity check 6200 failed");
                    break;
                }
                for(int t=0; t<m; t++)
                    request.replydj[reply_dj_offs+t*n+var_idx] *= w;
            }
        }
        else
        {
            //
            // Compute target value at the origin
            //
            int query_idx = job_idx-request.size*request.vars;
            int query_data_offs = query_idx*(request.vars+request.dim+request.vars*request.formulasize*3);
            int reply_fi_offs   = query_idx*request.funcs;
            int m = request.funcs;
            
            //
            // Copy inputs to buffers
            //
            for(int i=0; i<request.vars; i++)
                buffers.tmpX[i] = request.querydata[query_data_offs+i];
            if( request.dim>0 )
                for(int i=0; i<request.dim; i++)
                    buffers.tmpC[i] = request.querydata[query_data_offs+request.vars+i];
            
            //
            // Callback
            //
            if( func!=null )
            {
                //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                buffers.tmpF[0] = func.calc(buffers.tmpX, request.obj);
            }
            else if( pfunc!=null )
            {
                //!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0 && m==1, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                buffers.tmpF[0] = pfunc.calc(buffers.tmpX, buffers.tmpC, request.obj);
            }
            else if( fvec!=null )
            {
                //!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim==0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                fvec.calc(buffers.tmpX, buffers.tmpF, request.obj);
            }
            else if( pfvec!=null )
            {
                //!!!!!!!_ALGLIB_ASSERT_THROW_OR_BREAK(request.dim>0, std::string("ALGLIB: integrity check in '")+request.subpackage+"' subpackage failed; incompatible callback for optimizer request");
                pfvec.calc(buffers.tmpX, buffers.tmpC, buffers.tmpF, request.obj);
            }
            else
                throw new exception("ALGLIB: integrity check in '"+request.subpackage+"' subpackage failed; no callback for optimizer request");
            for(int t=0; t<m; t++)
                request.replyfi[reply_fi_offs+t] = buffers.tmpF[t];
        }
    }

    protected static void _process_v2request_5phase1(_rcommv2_request request) throws alglib.exception
    {
        //
        // Phase 1: compute parts of the numerical differentiation formula that DO depend on the value at origin.
        //
        // This phase does not need parallelism because all what we need is to add request.size*request.vars precomputed values.
        //
        for(int query_idx=0; query_idx<request.size; query_idx++)
            for(int var_idx=0; var_idx<request.vars; var_idx++)
            {
                //
                // Compute parts of the numerical differentiation formula that do NOT depend
                // on the value at origin.
                //
                int n = request.vars;
                int m = request.funcs;
                int fs = request.formulasize;
                int query_data_offs   = query_idx*(n+request.dim+n*request.formulasize*3);
                int formula_data_offs = query_data_offs+n+request.dim+var_idx*fs*3;
                int reply_fi_offs     = query_idx*m;
                int reply_dj_offs     = query_idx*n*m;
                for(int idx=0; idx<fs; idx++)
                {
                    double xa=request.querydata[formula_data_offs+idx*3+0];
                    double xb=request.querydata[formula_data_offs+idx*3+1];
                    double w =request.querydata[formula_data_offs+idx*3+2];
                    boolean refers_value_at_origin = false;
                    if( w==0 )
                        continue;
                    if( xa==request.querydata[query_data_offs+var_idx] )
                    {
                        for(int t=0; t<m; t++)
                            request.replydj[reply_dj_offs+t*n+var_idx] += request.replyfi[reply_fi_offs+t];
                        refers_value_at_origin = true;
                    }
                    if( xb==request.querydata[query_data_offs+var_idx] )
                    {
                        for(int t=0; t<m; t++)
                            request.replydj[reply_dj_offs+t*n+var_idx] -= request.replyfi[reply_fi_offs+t];
                        refers_value_at_origin = true;
                    }
                    if( !refers_value_at_origin )
                        continue;
                    if( idx!=fs-1 )
                        throw new exception("ALGLIB: integrity check 6206 failed");
                    for(int t=0; t<m; t++)
                        request.replydj[reply_dj_offs+t*n+var_idx] *= w;
                }
            }
    }


    
    
    //
    // Subpackage xdebug
    //
    

        public static class xdebugrecord1 extends alglibobject
        {
            public int i;
            public complex c;
            public double[] a;
            public alglibobject make_copy()
            {
                xdebugrecord1 dst = new xdebugrecord1();
                dst.i = i;
                dst.c = new complex(c);
                dst.a = alglib.make_copy(a);
                return dst;
            }
        }

    public static xdebugrecord1 xdebuginitrecord1(alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rec1 = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebuginitrecord1(error_msg, lcl_rec1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebuginitrecord1");
        return (xdebugrecord1)lcl_rec1.val;
    }
    public static xdebugrecord1 xdebuginitrecord1() throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rec1 = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebuginitrecord1(error_msg, lcl_rec1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebuginitrecord1");
        return (xdebugrecord1)lcl_rec1.val;
    }
    private static native int _jni_xdebuginitrecord1(mut_string error_msg, mut_object rec1, long _xparams);

    public static void xdebugupdaterecord1(xdebugrecord1 rec1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugupdaterecord1(error_msg, rec1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugupdaterecord1");
    }
    public static void xdebugupdaterecord1(xdebugrecord1 rec1) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugupdaterecord1(error_msg, rec1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugupdaterecord1");
    }
    private static native int _jni_xdebugupdaterecord1(mut_string error_msg, Object rec1, long _xparams);

    public static int xdebugb1count(boolean[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb1count(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb1count");
        return lcl_result.val;
    }
    public static int xdebugb1count(boolean[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb1count(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb1count");
        return lcl_result.val;
    }
    private static native int _jni_xdebugb1count(mut_string error_msg, mut_int result, boolean[] a, long _xparams);

    public static void xdebugb1not(boolean[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb1not(error_msg, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb1not");
    }
    public static void xdebugb1not(boolean[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb1not(error_msg, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb1not");
    }
    private static native int _jni_xdebugb1not(mut_string error_msg, boolean[] a, long _xparams);

    public static boolean[] xdebugb1appendcopy(boolean[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_boolean1d lcl_a = new rlc_boolean1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb1appendcopy(error_msg, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb1appendcopy");
        return lcl_a.val;
    }
    public static boolean[] xdebugb1appendcopy(boolean[] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_boolean1d lcl_a = new rlc_boolean1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb1appendcopy(error_msg, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb1appendcopy");
        return lcl_a.val;
    }
    private static native int _jni_xdebugb1appendcopy(mut_string error_msg, rlc_boolean1d a, long _xparams);

    public static boolean[] xdebugb1outeven(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_boolean1d lcl_a = new rlc_boolean1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb1outeven(error_msg, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb1outeven");
        return lcl_a.val;
    }
    public static boolean[] xdebugb1outeven(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_boolean1d lcl_a = new rlc_boolean1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb1outeven(error_msg, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb1outeven");
        return lcl_a.val;
    }
    private static native int _jni_xdebugb1outeven(mut_string error_msg, int n, rlc_boolean1d a, long _xparams);

    public static int xdebugi1sum(int[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi1sum(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi1sum");
        return lcl_result.val;
    }
    public static int xdebugi1sum(int[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi1sum(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi1sum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugi1sum(mut_string error_msg, mut_int result, int[] a, long _xparams);

    public static void xdebugi1neg(int[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi1neg(error_msg, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi1neg");
    }
    public static void xdebugi1neg(int[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi1neg(error_msg, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi1neg");
    }
    private static native int _jni_xdebugi1neg(mut_string error_msg, int[] a, long _xparams);

    public static int[] xdebugi1appendcopy(int[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_a = new rlc_int1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi1appendcopy(error_msg, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi1appendcopy");
        return lcl_a.val;
    }
    public static int[] xdebugi1appendcopy(int[] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_a = new rlc_int1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi1appendcopy(error_msg, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi1appendcopy");
        return lcl_a.val;
    }
    private static native int _jni_xdebugi1appendcopy(mut_string error_msg, rlc_int1d a, long _xparams);

    public static int[] xdebugi1outeven(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_a = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi1outeven(error_msg, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi1outeven");
        return lcl_a.val;
    }
    public static int[] xdebugi1outeven(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_a = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi1outeven(error_msg, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi1outeven");
        return lcl_a.val;
    }
    private static native int _jni_xdebugi1outeven(mut_string error_msg, int n, rlc_int1d a, long _xparams);

    public static double xdebugr1sum(double[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1sum(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1sum");
        return lcl_result.val;
    }
    public static double xdebugr1sum(double[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1sum(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1sum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugr1sum(mut_string error_msg, mut_double result, double[] a, long _xparams);

    public static double xdebugr1internalcopyandsum(double[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1internalcopyandsum(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1internalcopyandsum");
        return lcl_result.val;
    }
    public static double xdebugr1internalcopyandsum(double[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1internalcopyandsum(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1internalcopyandsum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugr1internalcopyandsum(mut_string error_msg, mut_double result, double[] a, long _xparams);

    public static void xdebugr1neg(double[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1neg(error_msg, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1neg");
    }
    public static void xdebugr1neg(double[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1neg(error_msg, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1neg");
    }
    private static native int _jni_xdebugr1neg(mut_string error_msg, double[] a, long _xparams);

    public static double[] xdebugr1appendcopy(double[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1appendcopy(error_msg, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1appendcopy");
        return lcl_a.val;
    }
    public static double[] xdebugr1appendcopy(double[] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1appendcopy(error_msg, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1appendcopy");
        return lcl_a.val;
    }
    private static native int _jni_xdebugr1appendcopy(mut_string error_msg, rlc_double1d a, long _xparams);

    public static double[] xdebugr1outeven(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1outeven(error_msg, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1outeven");
        return lcl_a.val;
    }
    public static double[] xdebugr1outeven(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr1outeven(error_msg, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr1outeven");
        return lcl_a.val;
    }
    private static native int _jni_xdebugr1outeven(mut_string error_msg, int n, rlc_double1d a, long _xparams);

    public static complex xdebugc1sum(complex[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_complex lcl_result = new mut_complex();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc1sum(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc1sum");
        return lcl_result.val;
    }
    public static complex xdebugc1sum(complex[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_complex lcl_result = new mut_complex();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc1sum(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc1sum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugc1sum(mut_string error_msg, mut_complex result, complex[] a, long _xparams);

    public static void xdebugc1neg(complex[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc1neg(error_msg, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc1neg");
    }
    public static void xdebugc1neg(complex[] a) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc1neg(error_msg, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc1neg");
    }
    private static native int _jni_xdebugc1neg(mut_string error_msg, complex[] a, long _xparams);

    public static complex[] xdebugc1appendcopy(complex[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_a = new rlc_complex1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc1appendcopy(error_msg, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc1appendcopy");
        return lcl_a.val;
    }
    public static complex[] xdebugc1appendcopy(complex[] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_a = new rlc_complex1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc1appendcopy(error_msg, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc1appendcopy");
        return lcl_a.val;
    }
    private static native int _jni_xdebugc1appendcopy(mut_string error_msg, rlc_complex1d a, long _xparams);

    public static complex[] xdebugc1outeven(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_a = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc1outeven(error_msg, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc1outeven");
        return lcl_a.val;
    }
    public static complex[] xdebugc1outeven(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_a = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc1outeven(error_msg, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc1outeven");
        return lcl_a.val;
    }
    private static native int _jni_xdebugc1outeven(mut_string error_msg, int n, rlc_complex1d a, long _xparams);

    public static int xdebugb2count(boolean[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb2count(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb2count");
        return lcl_result.val;
    }
    public static int xdebugb2count(boolean[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb2count(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb2count");
        return lcl_result.val;
    }
    private static native int _jni_xdebugb2count(mut_string error_msg, mut_int result, boolean[][] a, long _xparams);

    public static void xdebugb2not(boolean[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb2not(error_msg, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb2not");
    }
    public static void xdebugb2not(boolean[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb2not(error_msg, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb2not");
    }
    private static native int _jni_xdebugb2not(mut_string error_msg, boolean[][] a, long _xparams);

    public static boolean[][] xdebugb2transpose(boolean[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_boolean2d lcl_a = new rlc_boolean2d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb2transpose(error_msg, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb2transpose");
        return lcl_a.val;
    }
    public static boolean[][] xdebugb2transpose(boolean[][] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_boolean2d lcl_a = new rlc_boolean2d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb2transpose(error_msg, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb2transpose");
        return lcl_a.val;
    }
    private static native int _jni_xdebugb2transpose(mut_string error_msg, rlc_boolean2d a, long _xparams);

    public static boolean[][] xdebugb2outsin(int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_boolean2d lcl_a = new rlc_boolean2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb2outsin(error_msg, m, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb2outsin");
        return lcl_a.val;
    }
    public static boolean[][] xdebugb2outsin(int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_boolean2d lcl_a = new rlc_boolean2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugb2outsin(error_msg, m, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugb2outsin");
        return lcl_a.val;
    }
    private static native int _jni_xdebugb2outsin(mut_string error_msg, int m, int n, rlc_boolean2d a, long _xparams);

    public static int xdebugi2sum(int[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi2sum(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi2sum");
        return lcl_result.val;
    }
    public static int xdebugi2sum(int[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi2sum(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi2sum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugi2sum(mut_string error_msg, mut_int result, int[][] a, long _xparams);

    public static void xdebugi2neg(int[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi2neg(error_msg, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi2neg");
    }
    public static void xdebugi2neg(int[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi2neg(error_msg, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi2neg");
    }
    private static native int _jni_xdebugi2neg(mut_string error_msg, int[][] a, long _xparams);

    public static int[][] xdebugi2transpose(int[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int2d lcl_a = new rlc_int2d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi2transpose(error_msg, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi2transpose");
        return lcl_a.val;
    }
    public static int[][] xdebugi2transpose(int[][] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_int2d lcl_a = new rlc_int2d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi2transpose(error_msg, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi2transpose");
        return lcl_a.val;
    }
    private static native int _jni_xdebugi2transpose(mut_string error_msg, rlc_int2d a, long _xparams);

    public static int[][] xdebugi2outsin(int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int2d lcl_a = new rlc_int2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi2outsin(error_msg, m, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi2outsin");
        return lcl_a.val;
    }
    public static int[][] xdebugi2outsin(int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_int2d lcl_a = new rlc_int2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugi2outsin(error_msg, m, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugi2outsin");
        return lcl_a.val;
    }
    private static native int _jni_xdebugi2outsin(mut_string error_msg, int m, int n, rlc_int2d a, long _xparams);

    public static double xdebugr2sum(double[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2sum(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2sum");
        return lcl_result.val;
    }
    public static double xdebugr2sum(double[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2sum(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2sum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugr2sum(mut_string error_msg, mut_double result, double[][] a, long _xparams);

    public static double xdebugr2internalcopyandsum(double[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2internalcopyandsum(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2internalcopyandsum");
        return lcl_result.val;
    }
    public static double xdebugr2internalcopyandsum(double[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2internalcopyandsum(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2internalcopyandsum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugr2internalcopyandsum(mut_string error_msg, mut_double result, double[][] a, long _xparams);

    public static void xdebugr2neg(double[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2neg(error_msg, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2neg");
    }
    public static void xdebugr2neg(double[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2neg(error_msg, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2neg");
    }
    private static native int _jni_xdebugr2neg(mut_string error_msg, double[][] a, long _xparams);

    public static double[][] xdebugr2transpose(double[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2transpose(error_msg, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2transpose");
        return lcl_a.val;
    }
    public static double[][] xdebugr2transpose(double[][] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2transpose(error_msg, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2transpose");
        return lcl_a.val;
    }
    private static native int _jni_xdebugr2transpose(mut_string error_msg, rlc_double2d a, long _xparams);

    public static double[][] xdebugr2outsin(int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2outsin(error_msg, m, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2outsin");
        return lcl_a.val;
    }
    public static double[][] xdebugr2outsin(int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugr2outsin(error_msg, m, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugr2outsin");
        return lcl_a.val;
    }
    private static native int _jni_xdebugr2outsin(mut_string error_msg, int m, int n, rlc_double2d a, long _xparams);

    public static complex xdebugc2sum(complex[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_complex lcl_result = new mut_complex();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc2sum(error_msg, lcl_result, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc2sum");
        return lcl_result.val;
    }
    public static complex xdebugc2sum(complex[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_complex lcl_result = new mut_complex();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc2sum(error_msg, lcl_result, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc2sum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugc2sum(mut_string error_msg, mut_complex result, complex[][] a, long _xparams);

    public static void xdebugc2neg(complex[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc2neg(error_msg, a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc2neg");
    }
    public static void xdebugc2neg(complex[][] a) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc2neg(error_msg, a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc2neg");
    }
    private static native int _jni_xdebugc2neg(mut_string error_msg, complex[][] a, long _xparams);

    public static complex[][] xdebugc2transpose(complex[][] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc2transpose(error_msg, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc2transpose");
        return lcl_a.val;
    }
    public static complex[][] xdebugc2transpose(complex[][] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc2transpose(error_msg, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc2transpose");
        return lcl_a.val;
    }
    private static native int _jni_xdebugc2transpose(mut_string error_msg, rlc_complex2d a, long _xparams);

    public static complex[][] xdebugc2outsincos(int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc2outsincos(error_msg, m, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc2outsincos");
        return lcl_a.val;
    }
    public static complex[][] xdebugc2outsincos(int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugc2outsincos(error_msg, m, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugc2outsincos");
        return lcl_a.val;
    }
    private static native int _jni_xdebugc2outsincos(mut_string error_msg, int m, int n, rlc_complex2d a, long _xparams);

    public static double xdebugmaskedbiasedproductsum(int m, int n, double[][] a, double[][] b, boolean[][] c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugmaskedbiasedproductsum(error_msg, lcl_result, m, n, a, b, c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugmaskedbiasedproductsum");
        return lcl_result.val;
    }
    public static double xdebugmaskedbiasedproductsum(int m, int n, double[][] a, double[][] b, boolean[][] c) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdebugmaskedbiasedproductsum(error_msg, lcl_result, m, n, a, b, c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdebugmaskedbiasedproductsum");
        return lcl_result.val;
    }
    private static native int _jni_xdebugmaskedbiasedproductsum(mut_string error_msg, mut_double result, int m, int n, double[][] a, double[][] b, boolean[][] c, long _xparams);

    
    
    //
    // Subpackage hqrnd
    //
    

    public static class hqrndstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected hqrndstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected hqrndstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected hqrndstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new hqrndstate(0);
            return new hqrndstate(_jni_x_obj_copy_hqrndstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_hqrndstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_hqrndstate(long x);
    private static native void _jni_x_obj_free_hqrndstate(long x);

    public static hqrndstate hqrndrandomize(alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndrandomize(error_msg, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndrandomize");
        return new hqrndstate(lcl_state.val);
    }
    public static hqrndstate hqrndrandomize() throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndrandomize(error_msg, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndrandomize");
        return new hqrndstate(lcl_state.val);
    }
    private static native int _jni_hqrndrandomize(mut_string error_msg, mut_long state, long _xparams);

    public static hqrndstate hqrndseed(int s1, int s2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndseed(error_msg, s1, s2, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndseed");
        return new hqrndstate(lcl_state.val);
    }
    public static hqrndstate hqrndseed(int s1, int s2) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndseed(error_msg, s1, s2, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndseed");
        return new hqrndstate(lcl_state.val);
    }
    private static native int _jni_hqrndseed(mut_string error_msg, int s1, int s2, mut_long state, long _xparams);

    public static double hqrnduniformr(hqrndstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnduniformr() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnduniformr() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrnduniformr(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrnduniformr");
        return lcl_result.val;
    }
    public static double hqrnduniformr(hqrndstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnduniformr() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnduniformr() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrnduniformr(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrnduniformr");
        return lcl_result.val;
    }
    private static native int _jni_hqrnduniformr(mut_string error_msg, mut_double result, long state, long _xparams);

    public static int hqrnduniformi(hqrndstate state, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnduniformi() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnduniformi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrnduniformi(error_msg, lcl_result, state.get_ptr(), n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrnduniformi");
        return lcl_result.val;
    }
    public static int hqrnduniformi(hqrndstate state, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnduniformi() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnduniformi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrnduniformi(error_msg, lcl_result, state.get_ptr(), n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrnduniformi");
        return lcl_result.val;
    }
    private static native int _jni_hqrnduniformi(mut_string error_msg, mut_int result, long state, int n, long _xparams);

    public static double hqrndnormal(hqrndstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormal() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormal() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndnormal(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndnormal");
        return lcl_result.val;
    }
    public static double hqrndnormal(hqrndstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormal() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormal() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndnormal(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndnormal");
        return lcl_result.val;
    }
    private static native int _jni_hqrndnormal(mut_string error_msg, mut_double result, long state, long _xparams);

    public static double[] hqrndnormalv(hqrndstate state, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormalv() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormalv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndnormalv(error_msg, state.get_ptr(), n, lcl_x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndnormalv");
        return lcl_x.val;
    }
    public static double[] hqrndnormalv(hqrndstate state, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormalv() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormalv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndnormalv(error_msg, state.get_ptr(), n, lcl_x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndnormalv");
        return lcl_x.val;
    }
    private static native int _jni_hqrndnormalv(mut_string error_msg, long state, int n, rlc_double1d x, long _xparams);

    public static double[][] hqrndnormalm(hqrndstate state, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormalm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormalm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndnormalm(error_msg, state.get_ptr(), m, n, lcl_x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndnormalm");
        return lcl_x.val;
    }
    public static double[][] hqrndnormalm(hqrndstate state, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormalm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormalm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndnormalm(error_msg, state.get_ptr(), m, n, lcl_x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndnormalm");
        return lcl_x.val;
    }
    private static native int _jni_hqrndnormalm(mut_string error_msg, long state, int m, int n, rlc_double2d x, long _xparams);

    public static class hqrndunit2_results
    {
        public double x;
        public double y;
    }
    public static hqrndunit2_results hqrndunit2(hqrndstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndunit2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndunit2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndunit2(error_msg, state.get_ptr(), lcl_x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndunit2");
        hqrndunit2_results ret_tuple = new hqrndunit2_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        return ret_tuple;
    }
    public static hqrndunit2_results hqrndunit2(hqrndstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndunit2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndunit2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndunit2(error_msg, state.get_ptr(), lcl_x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndunit2");
        hqrndunit2_results ret_tuple = new hqrndunit2_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        return ret_tuple;
    }
    private static native int _jni_hqrndunit2(mut_string error_msg, long state, mut_double x, mut_double y, long _xparams);

    public static class hqrndnormal2_results
    {
        public double x1;
        public double x2;
    }
    public static hqrndnormal2_results hqrndnormal2(hqrndstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x1 = new mut_double();
        mut_double lcl_x2 = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormal2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormal2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndnormal2(error_msg, state.get_ptr(), lcl_x1, lcl_x2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndnormal2");
        hqrndnormal2_results ret_tuple = new hqrndnormal2_results();
        ret_tuple.x1 = lcl_x1.val;
        ret_tuple.x2 = lcl_x2.val;
        return ret_tuple;
    }
    public static hqrndnormal2_results hqrndnormal2(hqrndstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x1 = new mut_double();
        mut_double lcl_x2 = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormal2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndnormal2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndnormal2(error_msg, state.get_ptr(), lcl_x1, lcl_x2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndnormal2");
        hqrndnormal2_results ret_tuple = new hqrndnormal2_results();
        ret_tuple.x1 = lcl_x1.val;
        ret_tuple.x2 = lcl_x2.val;
        return ret_tuple;
    }
    private static native int _jni_hqrndnormal2(mut_string error_msg, long state, mut_double x1, mut_double x2, long _xparams);

    public static double hqrndexponential(hqrndstate state, double lambdav, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndexponential() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndexponential() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndexponential(error_msg, lcl_result, state.get_ptr(), lambdav, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndexponential");
        return lcl_result.val;
    }
    public static double hqrndexponential(hqrndstate state, double lambdav) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndexponential() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndexponential() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndexponential(error_msg, lcl_result, state.get_ptr(), lambdav, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndexponential");
        return lcl_result.val;
    }
    private static native int _jni_hqrndexponential(mut_string error_msg, mut_double result, long state, double lambdav, long _xparams);

    public static double hqrnddiscrete(hqrndstate state, double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnddiscrete() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnddiscrete() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrnddiscrete(error_msg, lcl_result, state.get_ptr(), x, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrnddiscrete");
        return lcl_result.val;
    }
    public static double hqrnddiscrete(hqrndstate state, double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnddiscrete() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrnddiscrete() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrnddiscrete(error_msg, lcl_result, state.get_ptr(), x, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrnddiscrete");
        return lcl_result.val;
    }
    private static native int _jni_hqrnddiscrete(mut_string error_msg, mut_double result, long state, double[] x, int n, long _xparams);

    public static double hqrndcontinuous(hqrndstate state, double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndcontinuous() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndcontinuous() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndcontinuous(error_msg, lcl_result, state.get_ptr(), x, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndcontinuous");
        return lcl_result.val;
    }
    public static double hqrndcontinuous(hqrndstate state, double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndcontinuous() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of hqrndcontinuous() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hqrndcontinuous(error_msg, lcl_result, state.get_ptr(), x, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hqrndcontinuous");
        return lcl_result.val;
    }
    private static native int _jni_hqrndcontinuous(mut_string error_msg, mut_double result, long state, double[] x, int n, long _xparams);

    
    
    //
    // Subpackage ablas
    //
    
    public static void cmatrixtranspose(int m, int n, complex[][] a, int ia, int ja, complex[][] b, int ib, int jb, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixtranspose(error_msg, m, n, a, ia, ja, b, ib, jb, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixtranspose");
    }
    public static void cmatrixtranspose(int m, int n, complex[][] a, int ia, int ja, complex[][] b, int ib, int jb) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixtranspose(error_msg, m, n, a, ia, ja, b, ib, jb, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixtranspose");
    }
    private static native int _jni_cmatrixtranspose(mut_string error_msg, int m, int n, complex[][] a, int ia, int ja, complex[][] b, int ib, int jb, long _xparams);

    public static void rmatrixtranspose(int m, int n, double[][] a, int ia, int ja, double[][] b, int ib, int jb, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtranspose(error_msg, m, n, a, ia, ja, b, ib, jb, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtranspose");
    }
    public static void rmatrixtranspose(int m, int n, double[][] a, int ia, int ja, double[][] b, int ib, int jb) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtranspose(error_msg, m, n, a, ia, ja, b, ib, jb, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtranspose");
    }
    private static native int _jni_rmatrixtranspose(mut_string error_msg, int m, int n, double[][] a, int ia, int ja, double[][] b, int ib, int jb, long _xparams);

    public static void rmatrixenforcesymmetricity(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixenforcesymmetricity(error_msg, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixenforcesymmetricity");
    }
    public static void rmatrixenforcesymmetricity(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixenforcesymmetricity(error_msg, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixenforcesymmetricity");
    }
    private static native int _jni_rmatrixenforcesymmetricity(mut_string error_msg, double[][] a, int n, boolean isupper, long _xparams);

    public static void cmatrixcopy(int m, int n, complex[][] a, int ia, int ja, complex[][] b, int ib, int jb, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixcopy(error_msg, m, n, a, ia, ja, b, ib, jb, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixcopy");
    }
    public static void cmatrixcopy(int m, int n, complex[][] a, int ia, int ja, complex[][] b, int ib, int jb) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixcopy(error_msg, m, n, a, ia, ja, b, ib, jb, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixcopy");
    }
    private static native int _jni_cmatrixcopy(mut_string error_msg, int m, int n, complex[][] a, int ia, int ja, complex[][] b, int ib, int jb, long _xparams);

    public static void rvectorcopy(int n, double[] a, int ia, double[] b, int ib, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rvectorcopy(error_msg, n, a, ia, b, ib, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rvectorcopy");
    }
    public static void rvectorcopy(int n, double[] a, int ia, double[] b, int ib) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rvectorcopy(error_msg, n, a, ia, b, ib, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rvectorcopy");
    }
    private static native int _jni_rvectorcopy(mut_string error_msg, int n, double[] a, int ia, double[] b, int ib, long _xparams);

    public static void rmatrixcopy(int m, int n, double[][] a, int ia, int ja, double[][] b, int ib, int jb, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixcopy(error_msg, m, n, a, ia, ja, b, ib, jb, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixcopy");
    }
    public static void rmatrixcopy(int m, int n, double[][] a, int ia, int ja, double[][] b, int ib, int jb) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixcopy(error_msg, m, n, a, ia, ja, b, ib, jb, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixcopy");
    }
    private static native int _jni_rmatrixcopy(mut_string error_msg, int m, int n, double[][] a, int ia, int ja, double[][] b, int ib, int jb, long _xparams);

    public static void rmatrixgencopy(int m, int n, double alpha, double[][] a, int ia, int ja, double beta, double[][] b, int ib, int jb, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixgencopy(error_msg, m, n, alpha, a, ia, ja, beta, b, ib, jb, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixgencopy");
    }
    public static void rmatrixgencopy(int m, int n, double alpha, double[][] a, int ia, int ja, double beta, double[][] b, int ib, int jb) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixgencopy(error_msg, m, n, alpha, a, ia, ja, beta, b, ib, jb, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixgencopy");
    }
    private static native int _jni_rmatrixgencopy(mut_string error_msg, int m, int n, double alpha, double[][] a, int ia, int ja, double beta, double[][] b, int ib, int jb, long _xparams);

    public static void rmatrixger(int m, int n, double[][] a, int ia, int ja, double alpha, double[] u, int iu, double[] v, int iv, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixger(error_msg, m, n, a, ia, ja, alpha, u, iu, v, iv, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixger");
    }
    public static void rmatrixger(int m, int n, double[][] a, int ia, int ja, double alpha, double[] u, int iu, double[] v, int iv) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixger(error_msg, m, n, a, ia, ja, alpha, u, iu, v, iv, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixger");
    }
    private static native int _jni_rmatrixger(mut_string error_msg, int m, int n, double[][] a, int ia, int ja, double alpha, double[] u, int iu, double[] v, int iv, long _xparams);

    public static void cmatrixrank1(int m, int n, complex[][] a, int ia, int ja, complex[] u, int iu, complex[] v, int iv, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrank1(error_msg, m, n, a, ia, ja, u, iu, v, iv, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrank1");
    }
    public static void cmatrixrank1(int m, int n, complex[][] a, int ia, int ja, complex[] u, int iu, complex[] v, int iv) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrank1(error_msg, m, n, a, ia, ja, u, iu, v, iv, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrank1");
    }
    private static native int _jni_cmatrixrank1(mut_string error_msg, int m, int n, complex[][] a, int ia, int ja, complex[] u, int iu, complex[] v, int iv, long _xparams);

    public static void rmatrixrank1(int m, int n, double[][] a, int ia, int ja, double[] u, int iu, double[] v, int iv, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrank1(error_msg, m, n, a, ia, ja, u, iu, v, iv, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrank1");
    }
    public static void rmatrixrank1(int m, int n, double[][] a, int ia, int ja, double[] u, int iu, double[] v, int iv) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrank1(error_msg, m, n, a, ia, ja, u, iu, v, iv, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrank1");
    }
    private static native int _jni_rmatrixrank1(mut_string error_msg, int m, int n, double[][] a, int ia, int ja, double[] u, int iu, double[] v, int iv, long _xparams);

    public static void rmatrixgemv(int m, int n, double alpha, double[][] a, int ia, int ja, int opa, double[] x, int ix, double beta, double[] y, int iy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixgemv(error_msg, m, n, alpha, a, ia, ja, opa, x, ix, beta, y, iy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixgemv");
    }
    public static void rmatrixgemv(int m, int n, double alpha, double[][] a, int ia, int ja, int opa, double[] x, int ix, double beta, double[] y, int iy) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixgemv(error_msg, m, n, alpha, a, ia, ja, opa, x, ix, beta, y, iy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixgemv");
    }
    private static native int _jni_rmatrixgemv(mut_string error_msg, int m, int n, double alpha, double[][] a, int ia, int ja, int opa, double[] x, int ix, double beta, double[] y, int iy, long _xparams);

    public static void cmatrixmv(int m, int n, complex[][] a, int ia, int ja, int opa, complex[] x, int ix, complex[] y, int iy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixmv(error_msg, m, n, a, ia, ja, opa, x, ix, y, iy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixmv");
    }
    public static void cmatrixmv(int m, int n, complex[][] a, int ia, int ja, int opa, complex[] x, int ix, complex[] y, int iy) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixmv(error_msg, m, n, a, ia, ja, opa, x, ix, y, iy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixmv");
    }
    private static native int _jni_cmatrixmv(mut_string error_msg, int m, int n, complex[][] a, int ia, int ja, int opa, complex[] x, int ix, complex[] y, int iy, long _xparams);

    public static void rmatrixmv(int m, int n, double[][] a, int ia, int ja, int opa, double[] x, int ix, double[] y, int iy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixmv(error_msg, m, n, a, ia, ja, opa, x, ix, y, iy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixmv");
    }
    public static void rmatrixmv(int m, int n, double[][] a, int ia, int ja, int opa, double[] x, int ix, double[] y, int iy) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixmv(error_msg, m, n, a, ia, ja, opa, x, ix, y, iy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixmv");
    }
    private static native int _jni_rmatrixmv(mut_string error_msg, int m, int n, double[][] a, int ia, int ja, int opa, double[] x, int ix, double[] y, int iy, long _xparams);

    public static void rmatrixsymv(int n, double alpha, double[][] a, int ia, int ja, boolean isupper, double[] x, int ix, double beta, double[] y, int iy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsymv(error_msg, n, alpha, a, ia, ja, isupper, x, ix, beta, y, iy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsymv");
    }
    public static void rmatrixsymv(int n, double alpha, double[][] a, int ia, int ja, boolean isupper, double[] x, int ix, double beta, double[] y, int iy) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsymv(error_msg, n, alpha, a, ia, ja, isupper, x, ix, beta, y, iy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsymv");
    }
    private static native int _jni_rmatrixsymv(mut_string error_msg, int n, double alpha, double[][] a, int ia, int ja, boolean isupper, double[] x, int ix, double beta, double[] y, int iy, long _xparams);

    public static double rmatrixsyvmv(int n, double[][] a, int ia, int ja, boolean isupper, double[] x, int ix, double[] tmp, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsyvmv(error_msg, lcl_result, n, a, ia, ja, isupper, x, ix, tmp, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsyvmv");
        return lcl_result.val;
    }
    public static double rmatrixsyvmv(int n, double[][] a, int ia, int ja, boolean isupper, double[] x, int ix, double[] tmp) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsyvmv(error_msg, lcl_result, n, a, ia, ja, isupper, x, ix, tmp, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsyvmv");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixsyvmv(mut_string error_msg, mut_double result, int n, double[][] a, int ia, int ja, boolean isupper, double[] x, int ix, double[] tmp, long _xparams);

    public static void rmatrixtrsv(int n, double[][] a, int ia, int ja, boolean isupper, boolean isunit, int optype, double[] x, int ix, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrsv(error_msg, n, a, ia, ja, isupper, isunit, optype, x, ix, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrsv");
    }
    public static void rmatrixtrsv(int n, double[][] a, int ia, int ja, boolean isupper, boolean isunit, int optype, double[] x, int ix) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrsv(error_msg, n, a, ia, ja, isupper, isunit, optype, x, ix, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrsv");
    }
    private static native int _jni_rmatrixtrsv(mut_string error_msg, int n, double[][] a, int ia, int ja, boolean isupper, boolean isunit, int optype, double[] x, int ix, long _xparams);

    public static void cmatrixrighttrsm(int m, int n, complex[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, complex[][] x, int i2, int j2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrighttrsm(error_msg, m, n, a, i1, j1, isupper, isunit, optype, x, i2, j2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrighttrsm");
    }
    public static void cmatrixrighttrsm(int m, int n, complex[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, complex[][] x, int i2, int j2) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrighttrsm(error_msg, m, n, a, i1, j1, isupper, isunit, optype, x, i2, j2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrighttrsm");
    }
    private static native int _jni_cmatrixrighttrsm(mut_string error_msg, int m, int n, complex[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, complex[][] x, int i2, int j2, long _xparams);

    public static void cmatrixlefttrsm(int m, int n, complex[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, complex[][] x, int i2, int j2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlefttrsm(error_msg, m, n, a, i1, j1, isupper, isunit, optype, x, i2, j2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlefttrsm");
    }
    public static void cmatrixlefttrsm(int m, int n, complex[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, complex[][] x, int i2, int j2) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlefttrsm(error_msg, m, n, a, i1, j1, isupper, isunit, optype, x, i2, j2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlefttrsm");
    }
    private static native int _jni_cmatrixlefttrsm(mut_string error_msg, int m, int n, complex[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, complex[][] x, int i2, int j2, long _xparams);

    public static void rmatrixrighttrsm(int m, int n, double[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, double[][] x, int i2, int j2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrighttrsm(error_msg, m, n, a, i1, j1, isupper, isunit, optype, x, i2, j2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrighttrsm");
    }
    public static void rmatrixrighttrsm(int m, int n, double[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, double[][] x, int i2, int j2) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrighttrsm(error_msg, m, n, a, i1, j1, isupper, isunit, optype, x, i2, j2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrighttrsm");
    }
    private static native int _jni_rmatrixrighttrsm(mut_string error_msg, int m, int n, double[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, double[][] x, int i2, int j2, long _xparams);

    public static void rmatrixlefttrsm(int m, int n, double[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, double[][] x, int i2, int j2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlefttrsm(error_msg, m, n, a, i1, j1, isupper, isunit, optype, x, i2, j2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlefttrsm");
    }
    public static void rmatrixlefttrsm(int m, int n, double[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, double[][] x, int i2, int j2) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlefttrsm(error_msg, m, n, a, i1, j1, isupper, isunit, optype, x, i2, j2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlefttrsm");
    }
    private static native int _jni_rmatrixlefttrsm(mut_string error_msg, int m, int n, double[][] a, int i1, int j1, boolean isupper, boolean isunit, int optype, double[][] x, int i2, int j2, long _xparams);

    public static void cmatrixherk(int n, int k, double alpha, complex[][] a, int ia, int ja, int optypea, double beta, complex[][] c, int ic, int jc, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixherk(error_msg, n, k, alpha, a, ia, ja, optypea, beta, c, ic, jc, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixherk");
    }
    public static void cmatrixherk(int n, int k, double alpha, complex[][] a, int ia, int ja, int optypea, double beta, complex[][] c, int ic, int jc, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixherk(error_msg, n, k, alpha, a, ia, ja, optypea, beta, c, ic, jc, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixherk");
    }
    private static native int _jni_cmatrixherk(mut_string error_msg, int n, int k, double alpha, complex[][] a, int ia, int ja, int optypea, double beta, complex[][] c, int ic, int jc, boolean isupper, long _xparams);

    public static void rmatrixsyrk(int n, int k, double alpha, double[][] a, int ia, int ja, int optypea, double beta, double[][] c, int ic, int jc, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsyrk(error_msg, n, k, alpha, a, ia, ja, optypea, beta, c, ic, jc, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsyrk");
    }
    public static void rmatrixsyrk(int n, int k, double alpha, double[][] a, int ia, int ja, int optypea, double beta, double[][] c, int ic, int jc, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsyrk(error_msg, n, k, alpha, a, ia, ja, optypea, beta, c, ic, jc, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsyrk");
    }
    private static native int _jni_rmatrixsyrk(mut_string error_msg, int n, int k, double alpha, double[][] a, int ia, int ja, int optypea, double beta, double[][] c, int ic, int jc, boolean isupper, long _xparams);

    public static void cmatrixgemm(int m, int n, int k, complex alpha, complex[][] a, int ia, int ja, int optypea, complex[][] b, int ib, int jb, int optypeb, complex beta, complex[][] c, int ic, int jc, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixgemm(error_msg, m, n, k, alpha, a, ia, ja, optypea, b, ib, jb, optypeb, beta, c, ic, jc, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixgemm");
    }
    public static void cmatrixgemm(int m, int n, int k, complex alpha, complex[][] a, int ia, int ja, int optypea, complex[][] b, int ib, int jb, int optypeb, complex beta, complex[][] c, int ic, int jc) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixgemm(error_msg, m, n, k, alpha, a, ia, ja, optypea, b, ib, jb, optypeb, beta, c, ic, jc, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixgemm");
    }
    private static native int _jni_cmatrixgemm(mut_string error_msg, int m, int n, int k, complex alpha, complex[][] a, int ia, int ja, int optypea, complex[][] b, int ib, int jb, int optypeb, complex beta, complex[][] c, int ic, int jc, long _xparams);

    public static void rmatrixgemm(int m, int n, int k, double alpha, double[][] a, int ia, int ja, int optypea, double[][] b, int ib, int jb, int optypeb, double beta, double[][] c, int ic, int jc, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixgemm(error_msg, m, n, k, alpha, a, ia, ja, optypea, b, ib, jb, optypeb, beta, c, ic, jc, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixgemm");
    }
    public static void rmatrixgemm(int m, int n, int k, double alpha, double[][] a, int ia, int ja, int optypea, double[][] b, int ib, int jb, int optypeb, double beta, double[][] c, int ic, int jc) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixgemm(error_msg, m, n, k, alpha, a, ia, ja, optypea, b, ib, jb, optypeb, beta, c, ic, jc, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixgemm");
    }
    private static native int _jni_rmatrixgemm(mut_string error_msg, int m, int n, int k, double alpha, double[][] a, int ia, int ja, int optypea, double[][] b, int ib, int jb, int optypeb, double beta, double[][] c, int ic, int jc, long _xparams);

    public static void cmatrixsyrk(int n, int k, double alpha, complex[][] a, int ia, int ja, int optypea, double beta, complex[][] c, int ic, int jc, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsyrk(error_msg, n, k, alpha, a, ia, ja, optypea, beta, c, ic, jc, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsyrk");
    }
    public static void cmatrixsyrk(int n, int k, double alpha, complex[][] a, int ia, int ja, int optypea, double beta, complex[][] c, int ic, int jc, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsyrk(error_msg, n, k, alpha, a, ia, ja, optypea, beta, c, ic, jc, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsyrk");
    }
    private static native int _jni_cmatrixsyrk(mut_string error_msg, int n, int k, double alpha, complex[][] a, int ia, int ja, int optypea, double beta, complex[][] c, int ic, int jc, boolean isupper, long _xparams);

    
    
    //
    // Subpackage ortfac
    //
    
    public static double[] rmatrixqr(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tau = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixqr(error_msg, a, m, n, lcl_tau, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixqr");
        return lcl_tau.val;
    }
    public static double[] rmatrixqr(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tau = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixqr(error_msg, a, m, n, lcl_tau, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixqr");
        return lcl_tau.val;
    }
    private static native int _jni_rmatrixqr(mut_string error_msg, double[][] a, int m, int n, rlc_double1d tau, long _xparams);

    public static double[] rmatrixlq(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tau = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlq(error_msg, a, m, n, lcl_tau, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlq");
        return lcl_tau.val;
    }
    public static double[] rmatrixlq(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tau = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlq(error_msg, a, m, n, lcl_tau, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlq");
        return lcl_tau.val;
    }
    private static native int _jni_rmatrixlq(mut_string error_msg, double[][] a, int m, int n, rlc_double1d tau, long _xparams);

    public static complex[] cmatrixqr(complex[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_tau = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixqr(error_msg, a, m, n, lcl_tau, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixqr");
        return lcl_tau.val;
    }
    public static complex[] cmatrixqr(complex[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_tau = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixqr(error_msg, a, m, n, lcl_tau, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixqr");
        return lcl_tau.val;
    }
    private static native int _jni_cmatrixqr(mut_string error_msg, complex[][] a, int m, int n, rlc_complex1d tau, long _xparams);

    public static complex[] cmatrixlq(complex[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_tau = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlq(error_msg, a, m, n, lcl_tau, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlq");
        return lcl_tau.val;
    }
    public static complex[] cmatrixlq(complex[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_tau = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlq(error_msg, a, m, n, lcl_tau, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlq");
        return lcl_tau.val;
    }
    private static native int _jni_cmatrixlq(mut_string error_msg, complex[][] a, int m, int n, rlc_complex1d tau, long _xparams);

    public static double[][] rmatrixqrunpackq(double[][] a, int m, int n, double[] tau, int qcolumns, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixqrunpackq(error_msg, a, m, n, tau, qcolumns, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixqrunpackq");
        return lcl_q.val;
    }
    public static double[][] rmatrixqrunpackq(double[][] a, int m, int n, double[] tau, int qcolumns) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixqrunpackq(error_msg, a, m, n, tau, qcolumns, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixqrunpackq");
        return lcl_q.val;
    }
    private static native int _jni_rmatrixqrunpackq(mut_string error_msg, double[][] a, int m, int n, double[] tau, int qcolumns, rlc_double2d q, long _xparams);

    public static double[][] rmatrixqrunpackr(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_r = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixqrunpackr(error_msg, a, m, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixqrunpackr");
        return lcl_r.val;
    }
    public static double[][] rmatrixqrunpackr(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_r = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixqrunpackr(error_msg, a, m, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixqrunpackr");
        return lcl_r.val;
    }
    private static native int _jni_rmatrixqrunpackr(mut_string error_msg, double[][] a, int m, int n, rlc_double2d r, long _xparams);

    public static double[][] rmatrixlqunpackq(double[][] a, int m, int n, double[] tau, int qrows, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlqunpackq(error_msg, a, m, n, tau, qrows, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlqunpackq");
        return lcl_q.val;
    }
    public static double[][] rmatrixlqunpackq(double[][] a, int m, int n, double[] tau, int qrows) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlqunpackq(error_msg, a, m, n, tau, qrows, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlqunpackq");
        return lcl_q.val;
    }
    private static native int _jni_rmatrixlqunpackq(mut_string error_msg, double[][] a, int m, int n, double[] tau, int qrows, rlc_double2d q, long _xparams);

    public static double[][] rmatrixlqunpackl(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_l = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlqunpackl(error_msg, a, m, n, lcl_l, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlqunpackl");
        return lcl_l.val;
    }
    public static double[][] rmatrixlqunpackl(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_l = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlqunpackl(error_msg, a, m, n, lcl_l, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlqunpackl");
        return lcl_l.val;
    }
    private static native int _jni_rmatrixlqunpackl(mut_string error_msg, double[][] a, int m, int n, rlc_double2d l, long _xparams);

    public static complex[][] cmatrixqrunpackq(complex[][] a, int m, int n, complex[] tau, int qcolumns, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_q = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixqrunpackq(error_msg, a, m, n, tau, qcolumns, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixqrunpackq");
        return lcl_q.val;
    }
    public static complex[][] cmatrixqrunpackq(complex[][] a, int m, int n, complex[] tau, int qcolumns) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_q = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixqrunpackq(error_msg, a, m, n, tau, qcolumns, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixqrunpackq");
        return lcl_q.val;
    }
    private static native int _jni_cmatrixqrunpackq(mut_string error_msg, complex[][] a, int m, int n, complex[] tau, int qcolumns, rlc_complex2d q, long _xparams);

    public static complex[][] cmatrixqrunpackr(complex[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_r = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixqrunpackr(error_msg, a, m, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixqrunpackr");
        return lcl_r.val;
    }
    public static complex[][] cmatrixqrunpackr(complex[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_r = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixqrunpackr(error_msg, a, m, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixqrunpackr");
        return lcl_r.val;
    }
    private static native int _jni_cmatrixqrunpackr(mut_string error_msg, complex[][] a, int m, int n, rlc_complex2d r, long _xparams);

    public static complex[][] cmatrixlqunpackq(complex[][] a, int m, int n, complex[] tau, int qrows, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_q = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlqunpackq(error_msg, a, m, n, tau, qrows, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlqunpackq");
        return lcl_q.val;
    }
    public static complex[][] cmatrixlqunpackq(complex[][] a, int m, int n, complex[] tau, int qrows) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_q = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlqunpackq(error_msg, a, m, n, tau, qrows, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlqunpackq");
        return lcl_q.val;
    }
    private static native int _jni_cmatrixlqunpackq(mut_string error_msg, complex[][] a, int m, int n, complex[] tau, int qrows, rlc_complex2d q, long _xparams);

    public static complex[][] cmatrixlqunpackl(complex[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_l = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlqunpackl(error_msg, a, m, n, lcl_l, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlqunpackl");
        return lcl_l.val;
    }
    public static complex[][] cmatrixlqunpackl(complex[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_l = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlqunpackl(error_msg, a, m, n, lcl_l, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlqunpackl");
        return lcl_l.val;
    }
    private static native int _jni_cmatrixlqunpackl(mut_string error_msg, complex[][] a, int m, int n, rlc_complex2d l, long _xparams);

    public static class rmatrixbd_results
    {
        public double[] tauq;
        public double[] taup;
    }
    public static rmatrixbd_results rmatrixbd(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tauq = new rlc_double1d();
        rlc_double1d lcl_taup = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbd(error_msg, a, m, n, lcl_tauq, lcl_taup, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbd");
        rmatrixbd_results ret_tuple = new rmatrixbd_results();
        ret_tuple.tauq = lcl_tauq.val;
        ret_tuple.taup = lcl_taup.val;
        return ret_tuple;
    }
    public static rmatrixbd_results rmatrixbd(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tauq = new rlc_double1d();
        rlc_double1d lcl_taup = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbd(error_msg, a, m, n, lcl_tauq, lcl_taup, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbd");
        rmatrixbd_results ret_tuple = new rmatrixbd_results();
        ret_tuple.tauq = lcl_tauq.val;
        ret_tuple.taup = lcl_taup.val;
        return ret_tuple;
    }
    private static native int _jni_rmatrixbd(mut_string error_msg, double[][] a, int m, int n, rlc_double1d tauq, rlc_double1d taup, long _xparams);

    public static double[][] rmatrixbdunpackq(double[][] qp, int m, int n, double[] tauq, int qcolumns, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdunpackq(error_msg, qp, m, n, tauq, qcolumns, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdunpackq");
        return lcl_q.val;
    }
    public static double[][] rmatrixbdunpackq(double[][] qp, int m, int n, double[] tauq, int qcolumns) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdunpackq(error_msg, qp, m, n, tauq, qcolumns, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdunpackq");
        return lcl_q.val;
    }
    private static native int _jni_rmatrixbdunpackq(mut_string error_msg, double[][] qp, int m, int n, double[] tauq, int qcolumns, rlc_double2d q, long _xparams);

    public static void rmatrixbdmultiplybyq(double[][] qp, int m, int n, double[] tauq, double[][] z, int zrows, int zcolumns, boolean fromtheright, boolean dotranspose, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdmultiplybyq(error_msg, qp, m, n, tauq, z, zrows, zcolumns, fromtheright, dotranspose, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdmultiplybyq");
    }
    public static void rmatrixbdmultiplybyq(double[][] qp, int m, int n, double[] tauq, double[][] z, int zrows, int zcolumns, boolean fromtheright, boolean dotranspose) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdmultiplybyq(error_msg, qp, m, n, tauq, z, zrows, zcolumns, fromtheright, dotranspose, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdmultiplybyq");
    }
    private static native int _jni_rmatrixbdmultiplybyq(mut_string error_msg, double[][] qp, int m, int n, double[] tauq, double[][] z, int zrows, int zcolumns, boolean fromtheright, boolean dotranspose, long _xparams);

    public static double[][] rmatrixbdunpackpt(double[][] qp, int m, int n, double[] taup, int ptrows, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_pt = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdunpackpt(error_msg, qp, m, n, taup, ptrows, lcl_pt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdunpackpt");
        return lcl_pt.val;
    }
    public static double[][] rmatrixbdunpackpt(double[][] qp, int m, int n, double[] taup, int ptrows) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_pt = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdunpackpt(error_msg, qp, m, n, taup, ptrows, lcl_pt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdunpackpt");
        return lcl_pt.val;
    }
    private static native int _jni_rmatrixbdunpackpt(mut_string error_msg, double[][] qp, int m, int n, double[] taup, int ptrows, rlc_double2d pt, long _xparams);

    public static void rmatrixbdmultiplybyp(double[][] qp, int m, int n, double[] taup, double[][] z, int zrows, int zcolumns, boolean fromtheright, boolean dotranspose, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdmultiplybyp(error_msg, qp, m, n, taup, z, zrows, zcolumns, fromtheright, dotranspose, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdmultiplybyp");
    }
    public static void rmatrixbdmultiplybyp(double[][] qp, int m, int n, double[] taup, double[][] z, int zrows, int zcolumns, boolean fromtheright, boolean dotranspose) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdmultiplybyp(error_msg, qp, m, n, taup, z, zrows, zcolumns, fromtheright, dotranspose, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdmultiplybyp");
    }
    private static native int _jni_rmatrixbdmultiplybyp(mut_string error_msg, double[][] qp, int m, int n, double[] taup, double[][] z, int zrows, int zcolumns, boolean fromtheright, boolean dotranspose, long _xparams);

    public static class rmatrixbdunpackdiagonals_results
    {
        public boolean isupper;
        public double[] d;
        public double[] e;
    }
    public static rmatrixbdunpackdiagonals_results rmatrixbdunpackdiagonals(double[][] b, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_isupper = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double1d lcl_e = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdunpackdiagonals(error_msg, b, m, n, lcl_isupper, lcl_d, lcl_e, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdunpackdiagonals");
        rmatrixbdunpackdiagonals_results ret_tuple = new rmatrixbdunpackdiagonals_results();
        ret_tuple.isupper = lcl_isupper.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.e = lcl_e.val;
        return ret_tuple;
    }
    public static rmatrixbdunpackdiagonals_results rmatrixbdunpackdiagonals(double[][] b, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_isupper = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double1d lcl_e = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdunpackdiagonals(error_msg, b, m, n, lcl_isupper, lcl_d, lcl_e, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdunpackdiagonals");
        rmatrixbdunpackdiagonals_results ret_tuple = new rmatrixbdunpackdiagonals_results();
        ret_tuple.isupper = lcl_isupper.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.e = lcl_e.val;
        return ret_tuple;
    }
    private static native int _jni_rmatrixbdunpackdiagonals(mut_string error_msg, double[][] b, int m, int n, mut_boolean isupper, rlc_double1d d, rlc_double1d e, long _xparams);

    public static double[] rmatrixhessenberg(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tau = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixhessenberg(error_msg, a, n, lcl_tau, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixhessenberg");
        return lcl_tau.val;
    }
    public static double[] rmatrixhessenberg(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tau = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixhessenberg(error_msg, a, n, lcl_tau, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixhessenberg");
        return lcl_tau.val;
    }
    private static native int _jni_rmatrixhessenberg(mut_string error_msg, double[][] a, int n, rlc_double1d tau, long _xparams);

    public static double[][] rmatrixhessenbergunpackq(double[][] a, int n, double[] tau, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixhessenbergunpackq(error_msg, a, n, tau, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixhessenbergunpackq");
        return lcl_q.val;
    }
    public static double[][] rmatrixhessenbergunpackq(double[][] a, int n, double[] tau) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixhessenbergunpackq(error_msg, a, n, tau, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixhessenbergunpackq");
        return lcl_q.val;
    }
    private static native int _jni_rmatrixhessenbergunpackq(mut_string error_msg, double[][] a, int n, double[] tau, rlc_double2d q, long _xparams);

    public static double[][] rmatrixhessenbergunpackh(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_h = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixhessenbergunpackh(error_msg, a, n, lcl_h, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixhessenbergunpackh");
        return lcl_h.val;
    }
    public static double[][] rmatrixhessenbergunpackh(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_h = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixhessenbergunpackh(error_msg, a, n, lcl_h, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixhessenbergunpackh");
        return lcl_h.val;
    }
    private static native int _jni_rmatrixhessenbergunpackh(mut_string error_msg, double[][] a, int n, rlc_double2d h, long _xparams);

    public static class smatrixtd_results
    {
        public double[] tau;
        public double[] d;
        public double[] e;
    }
    public static smatrixtd_results smatrixtd(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tau = new rlc_double1d();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double1d lcl_e = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtd(error_msg, a, n, isupper, lcl_tau, lcl_d, lcl_e, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtd");
        smatrixtd_results ret_tuple = new smatrixtd_results();
        ret_tuple.tau = lcl_tau.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.e = lcl_e.val;
        return ret_tuple;
    }
    public static smatrixtd_results smatrixtd(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_tau = new rlc_double1d();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double1d lcl_e = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtd(error_msg, a, n, isupper, lcl_tau, lcl_d, lcl_e, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtd");
        smatrixtd_results ret_tuple = new smatrixtd_results();
        ret_tuple.tau = lcl_tau.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.e = lcl_e.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixtd(mut_string error_msg, double[][] a, int n, boolean isupper, rlc_double1d tau, rlc_double1d d, rlc_double1d e, long _xparams);

    public static double[][] smatrixtdunpackq(double[][] a, int n, boolean isupper, double[] tau, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtdunpackq(error_msg, a, n, isupper, tau, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtdunpackq");
        return lcl_q.val;
    }
    public static double[][] smatrixtdunpackq(double[][] a, int n, boolean isupper, double[] tau) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_q = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtdunpackq(error_msg, a, n, isupper, tau, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtdunpackq");
        return lcl_q.val;
    }
    private static native int _jni_smatrixtdunpackq(mut_string error_msg, double[][] a, int n, boolean isupper, double[] tau, rlc_double2d q, long _xparams);

    public static class hmatrixtd_results
    {
        public complex[] tau;
        public double[] d;
        public double[] e;
    }
    public static hmatrixtd_results hmatrixtd(complex[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_tau = new rlc_complex1d();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double1d lcl_e = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixtd(error_msg, a, n, isupper, lcl_tau, lcl_d, lcl_e, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixtd");
        hmatrixtd_results ret_tuple = new hmatrixtd_results();
        ret_tuple.tau = lcl_tau.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.e = lcl_e.val;
        return ret_tuple;
    }
    public static hmatrixtd_results hmatrixtd(complex[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_tau = new rlc_complex1d();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double1d lcl_e = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixtd(error_msg, a, n, isupper, lcl_tau, lcl_d, lcl_e, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixtd");
        hmatrixtd_results ret_tuple = new hmatrixtd_results();
        ret_tuple.tau = lcl_tau.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.e = lcl_e.val;
        return ret_tuple;
    }
    private static native int _jni_hmatrixtd(mut_string error_msg, complex[][] a, int n, boolean isupper, rlc_complex1d tau, rlc_double1d d, rlc_double1d e, long _xparams);

    public static complex[][] hmatrixtdunpackq(complex[][] a, int n, boolean isupper, complex[] tau, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_q = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixtdunpackq(error_msg, a, n, isupper, tau, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixtdunpackq");
        return lcl_q.val;
    }
    public static complex[][] hmatrixtdunpackq(complex[][] a, int n, boolean isupper, complex[] tau) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_q = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixtdunpackq(error_msg, a, n, isupper, tau, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixtdunpackq");
        return lcl_q.val;
    }
    private static native int _jni_hmatrixtdunpackq(mut_string error_msg, complex[][] a, int n, boolean isupper, complex[] tau, rlc_complex2d q, long _xparams);

    
    
    //
    // Subpackage matgen
    //
    
    public static double[][] rmatrixrndorthogonal(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrndorthogonal(error_msg, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrndorthogonal");
        return lcl_a.val;
    }
    public static double[][] rmatrixrndorthogonal(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrndorthogonal(error_msg, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrndorthogonal");
        return lcl_a.val;
    }
    private static native int _jni_rmatrixrndorthogonal(mut_string error_msg, int n, rlc_double2d a, long _xparams);

    public static double[][] rmatrixrndcond(int n, double c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrndcond(error_msg, n, c, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrndcond");
        return lcl_a.val;
    }
    public static double[][] rmatrixrndcond(int n, double c) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrndcond(error_msg, n, c, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrndcond");
        return lcl_a.val;
    }
    private static native int _jni_rmatrixrndcond(mut_string error_msg, int n, double c, rlc_double2d a, long _xparams);

    public static complex[][] cmatrixrndorthogonal(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrndorthogonal(error_msg, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrndorthogonal");
        return lcl_a.val;
    }
    public static complex[][] cmatrixrndorthogonal(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrndorthogonal(error_msg, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrndorthogonal");
        return lcl_a.val;
    }
    private static native int _jni_cmatrixrndorthogonal(mut_string error_msg, int n, rlc_complex2d a, long _xparams);

    public static complex[][] cmatrixrndcond(int n, double c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrndcond(error_msg, n, c, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrndcond");
        return lcl_a.val;
    }
    public static complex[][] cmatrixrndcond(int n, double c) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrndcond(error_msg, n, c, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrndcond");
        return lcl_a.val;
    }
    private static native int _jni_cmatrixrndcond(mut_string error_msg, int n, double c, rlc_complex2d a, long _xparams);

    public static double[][] smatrixrndcond(int n, double c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixrndcond(error_msg, n, c, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixrndcond");
        return lcl_a.val;
    }
    public static double[][] smatrixrndcond(int n, double c) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixrndcond(error_msg, n, c, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixrndcond");
        return lcl_a.val;
    }
    private static native int _jni_smatrixrndcond(mut_string error_msg, int n, double c, rlc_double2d a, long _xparams);

    public static double[][] spdmatrixrndcond(int n, double c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixrndcond(error_msg, n, c, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixrndcond");
        return lcl_a.val;
    }
    public static double[][] spdmatrixrndcond(int n, double c) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixrndcond(error_msg, n, c, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixrndcond");
        return lcl_a.val;
    }
    private static native int _jni_spdmatrixrndcond(mut_string error_msg, int n, double c, rlc_double2d a, long _xparams);

    public static complex[][] hmatrixrndcond(int n, double c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixrndcond(error_msg, n, c, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixrndcond");
        return lcl_a.val;
    }
    public static complex[][] hmatrixrndcond(int n, double c) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixrndcond(error_msg, n, c, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixrndcond");
        return lcl_a.val;
    }
    private static native int _jni_hmatrixrndcond(mut_string error_msg, int n, double c, rlc_complex2d a, long _xparams);

    public static complex[][] hpdmatrixrndcond(int n, double c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixrndcond(error_msg, n, c, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixrndcond");
        return lcl_a.val;
    }
    public static complex[][] hpdmatrixrndcond(int n, double c) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_a = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixrndcond(error_msg, n, c, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixrndcond");
        return lcl_a.val;
    }
    private static native int _jni_hpdmatrixrndcond(mut_string error_msg, int n, double c, rlc_complex2d a, long _xparams);

    public static void rmatrixrndorthogonalfromtheright(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrndorthogonalfromtheright(error_msg, a, m, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrndorthogonalfromtheright");
    }
    public static void rmatrixrndorthogonalfromtheright(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrndorthogonalfromtheright(error_msg, a, m, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrndorthogonalfromtheright");
    }
    private static native int _jni_rmatrixrndorthogonalfromtheright(mut_string error_msg, double[][] a, int m, int n, long _xparams);

    public static void rmatrixrndorthogonalfromtheleft(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrndorthogonalfromtheleft(error_msg, a, m, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrndorthogonalfromtheleft");
    }
    public static void rmatrixrndorthogonalfromtheleft(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrndorthogonalfromtheleft(error_msg, a, m, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrndorthogonalfromtheleft");
    }
    private static native int _jni_rmatrixrndorthogonalfromtheleft(mut_string error_msg, double[][] a, int m, int n, long _xparams);

    public static void cmatrixrndorthogonalfromtheright(complex[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrndorthogonalfromtheright(error_msg, a, m, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrndorthogonalfromtheright");
    }
    public static void cmatrixrndorthogonalfromtheright(complex[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrndorthogonalfromtheright(error_msg, a, m, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrndorthogonalfromtheright");
    }
    private static native int _jni_cmatrixrndorthogonalfromtheright(mut_string error_msg, complex[][] a, int m, int n, long _xparams);

    public static void cmatrixrndorthogonalfromtheleft(complex[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrndorthogonalfromtheleft(error_msg, a, m, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrndorthogonalfromtheleft");
    }
    public static void cmatrixrndorthogonalfromtheleft(complex[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrndorthogonalfromtheleft(error_msg, a, m, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrndorthogonalfromtheleft");
    }
    private static native int _jni_cmatrixrndorthogonalfromtheleft(mut_string error_msg, complex[][] a, int m, int n, long _xparams);

    public static void smatrixrndmultiply(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixrndmultiply(error_msg, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixrndmultiply");
    }
    public static void smatrixrndmultiply(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixrndmultiply(error_msg, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixrndmultiply");
    }
    private static native int _jni_smatrixrndmultiply(mut_string error_msg, double[][] a, int n, long _xparams);

    public static void hmatrixrndmultiply(complex[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixrndmultiply(error_msg, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixrndmultiply");
    }
    public static void hmatrixrndmultiply(complex[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixrndmultiply(error_msg, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixrndmultiply");
    }
    private static native int _jni_hmatrixrndmultiply(mut_string error_msg, complex[][] a, int n, long _xparams);

    
    
    //
    // Subpackage sparse
    //
    

    public static class sparsematrix extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected sparsematrix()
        {
            _ptr = 0;
            own  = false;
        }
        protected sparsematrix(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected sparsematrix(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new sparsematrix(0);
            return new sparsematrix(_jni_x_obj_copy_sparsematrix(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_sparsematrix(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_sparsematrix(long x);
    private static native void _jni_x_obj_free_sparsematrix(long x);


    public static class sparsebuffers extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected sparsebuffers()
        {
            _ptr = 0;
            own  = false;
        }
        protected sparsebuffers(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected sparsebuffers(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new sparsebuffers(0);
            return new sparsebuffers(_jni_x_obj_copy_sparsebuffers(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_sparsebuffers(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_sparsebuffers(long x);
    private static native void _jni_x_obj_free_sparsebuffers(long x);

    private static native int _jni_sparseserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String sparseserialize(sparsematrix obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of sparseserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of sparseserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_sparseserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_sparseunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static sparsematrix sparseunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_sparseunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseunserialize");
        return new sparsematrix(lcl_result.val);
    }

    public static sparsematrix sparsecreate(int m, int n, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreate(error_msg, m, n, k, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreate");
        return new sparsematrix(lcl_s.val);
    }
    public static sparsematrix sparsecreate(int m, int n, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreate(error_msg, m, n, k, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreate");
        return new sparsematrix(lcl_s.val);
    }
            
    public static sparsematrix sparsecreate(int m, int n, alglib.xparams _params) throws alglib.exception
    {
        int k;
    
        k = 0;
        return sparsecreate(m, n, k, _params);
    
    }
    
    public static sparsematrix sparsecreate(int m, int n) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
    
        k = 0;
        return sparsecreate(m, n, k, _params);
    
    }
    private static native int _jni_sparsecreate(mut_string error_msg, int m, int n, int k, mut_long s, long _xparams);

    public static void sparsecreatebuf(int m, int n, int k, sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatebuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatebuf(error_msg, m, n, k, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatebuf");
    }
    public static void sparsecreatebuf(int m, int n, int k, sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatebuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatebuf(error_msg, m, n, k, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatebuf");
    }
            
    public static void sparsecreatebuf(int m, int n, sparsematrix s, alglib.xparams _params) throws alglib.exception
    {
        int k;
    
        k = 0;
        sparsecreatebuf(m, n, k, s, _params);
    
    }
    
    public static void sparsecreatebuf(int m, int n, sparsematrix s) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
    
        k = 0;
        sparsecreatebuf(m, n, k, s, _params);
    
    }
    private static native int _jni_sparsecreatebuf(mut_string error_msg, int m, int n, int k, long s, long _xparams);

    public static sparsematrix sparsecreatecrs(int m, int n, int[] ner, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrs(error_msg, m, n, ner, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrs");
        return new sparsematrix(lcl_s.val);
    }
    public static sparsematrix sparsecreatecrs(int m, int n, int[] ner) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrs(error_msg, m, n, ner, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrs");
        return new sparsematrix(lcl_s.val);
    }
    private static native int _jni_sparsecreatecrs(mut_string error_msg, int m, int n, int[] ner, mut_long s, long _xparams);

    public static void sparsecreatecrsbuf(int m, int n, int[] ner, sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsbuf(error_msg, m, n, ner, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsbuf");
    }
    public static void sparsecreatecrsbuf(int m, int n, int[] ner, sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsbuf(error_msg, m, n, ner, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsbuf");
    }
    private static native int _jni_sparsecreatecrsbuf(mut_string error_msg, int m, int n, int[] ner, long s, long _xparams);

    public static sparsematrix sparsecreatecrsempty(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsempty(error_msg, n, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsempty");
        return new sparsematrix(lcl_s.val);
    }
    public static sparsematrix sparsecreatecrsempty(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsempty(error_msg, n, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsempty");
        return new sparsematrix(lcl_s.val);
    }
    private static native int _jni_sparsecreatecrsempty(mut_string error_msg, int n, mut_long s, long _xparams);

    public static void sparsecreatecrsemptybuf(int n, sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsemptybuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsemptybuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsemptybuf(error_msg, n, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsemptybuf");
    }
    public static void sparsecreatecrsemptybuf(int n, sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsemptybuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsemptybuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsemptybuf(error_msg, n, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsemptybuf");
    }
    private static native int _jni_sparsecreatecrsemptybuf(mut_string error_msg, int n, long s, long _xparams);

    public static sparsematrix sparsecreatecrsfromdense(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsfromdense(error_msg, a, m, n, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsfromdense");
        return new sparsematrix(lcl_s.val);
    }
    public static sparsematrix sparsecreatecrsfromdense(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsfromdense(error_msg, a, m, n, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsfromdense");
        return new sparsematrix(lcl_s.val);
    }
            
    public static sparsematrix sparsecreatecrsfromdense(double[][] a, alglib.xparams _params) throws alglib.exception
    {
        int m;
        int n;
    
        m = ap.rows(a);
        n = ap.cols(a);
        return sparsecreatecrsfromdense(a, m, n, _params);
    
    }
    
    public static sparsematrix sparsecreatecrsfromdense(double[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int m;
        int n;
    
        m = ap.rows(a);
        n = ap.cols(a);
        return sparsecreatecrsfromdense(a, m, n, _params);
    
    }
    private static native int _jni_sparsecreatecrsfromdense(mut_string error_msg, double[][] a, int m, int n, mut_long s, long _xparams);

    public static void sparsecreatecrsfromdensebuf(double[][] a, int m, int n, sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsfromdensebuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsfromdensebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsfromdensebuf(error_msg, a, m, n, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsfromdensebuf");
    }
    public static void sparsecreatecrsfromdensebuf(double[][] a, int m, int n, sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsfromdensebuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsfromdensebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsfromdensebuf(error_msg, a, m, n, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsfromdensebuf");
    }
            
    public static void sparsecreatecrsfromdensebuf(double[][] a, sparsematrix s, alglib.xparams _params) throws alglib.exception
    {
        int m;
        int n;
    
        m = ap.rows(a);
        n = ap.cols(a);
        sparsecreatecrsfromdensebuf(a, m, n, s, _params);
    
    }
    
    public static void sparsecreatecrsfromdensebuf(double[][] a, sparsematrix s) throws alglib.exception
    {
        alglib.xparams _params = null;
        int m;
        int n;
    
        m = ap.rows(a);
        n = ap.cols(a);
        sparsecreatecrsfromdensebuf(a, m, n, s, _params);
    
    }
    private static native int _jni_sparsecreatecrsfromdensebuf(mut_string error_msg, double[][] a, int m, int n, long s, long _xparams);

    public static sparsematrix sparsecreatecrsfromdensev(double[] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsfromdensev(error_msg, a, m, n, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsfromdensev");
        return new sparsematrix(lcl_s.val);
    }
    public static sparsematrix sparsecreatecrsfromdensev(double[] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsfromdensev(error_msg, a, m, n, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsfromdensev");
        return new sparsematrix(lcl_s.val);
    }
    private static native int _jni_sparsecreatecrsfromdensev(mut_string error_msg, double[] a, int m, int n, mut_long s, long _xparams);

    public static void sparsecreatecrsfromdensevbuf(double[] a, int m, int n, sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsfromdensevbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsfromdensevbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsfromdensevbuf(error_msg, a, m, n, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsfromdensevbuf");
    }
    public static void sparsecreatecrsfromdensevbuf(double[] a, int m, int n, sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsfromdensevbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatecrsfromdensevbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatecrsfromdensevbuf(error_msg, a, m, n, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatecrsfromdensevbuf");
    }
    private static native int _jni_sparsecreatecrsfromdensevbuf(mut_string error_msg, double[] a, int m, int n, long s, long _xparams);

    public static sparsematrix sparsecreatesks(int m, int n, int[] d, int[] u, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatesks(error_msg, m, n, d, u, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatesks");
        return new sparsematrix(lcl_s.val);
    }
    public static sparsematrix sparsecreatesks(int m, int n, int[] d, int[] u) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatesks(error_msg, m, n, d, u, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatesks");
        return new sparsematrix(lcl_s.val);
    }
    private static native int _jni_sparsecreatesks(mut_string error_msg, int m, int n, int[] d, int[] u, mut_long s, long _xparams);

    public static void sparsecreatesksbuf(int m, int n, int[] d, int[] u, sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatesksbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatesksbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatesksbuf(error_msg, m, n, d, u, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatesksbuf");
    }
    public static void sparsecreatesksbuf(int m, int n, int[] d, int[] u, sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatesksbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatesksbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatesksbuf(error_msg, m, n, d, u, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatesksbuf");
    }
    private static native int _jni_sparsecreatesksbuf(mut_string error_msg, int m, int n, int[] d, int[] u, long s, long _xparams);

    public static sparsematrix sparsecreatesksband(int m, int n, int bw, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatesksband(error_msg, m, n, bw, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatesksband");
        return new sparsematrix(lcl_s.val);
    }
    public static sparsematrix sparsecreatesksband(int m, int n, int bw) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatesksband(error_msg, m, n, bw, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatesksband");
        return new sparsematrix(lcl_s.val);
    }
    private static native int _jni_sparsecreatesksband(mut_string error_msg, int m, int n, int bw, mut_long s, long _xparams);

    public static void sparsecreatesksbandbuf(int m, int n, int bw, sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatesksbandbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatesksbandbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatesksbandbuf(error_msg, m, n, bw, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatesksbandbuf");
    }
    public static void sparsecreatesksbandbuf(int m, int n, int bw, sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatesksbandbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsecreatesksbandbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecreatesksbandbuf(error_msg, m, n, bw, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecreatesksbandbuf");
    }
    private static native int _jni_sparsecreatesksbandbuf(mut_string error_msg, int m, int n, int bw, long s, long _xparams);

    public static sparsematrix sparsecopy(sparsematrix s0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopy() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopy(error_msg, s0.get_ptr(), lcl_s1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopy");
        return new sparsematrix(lcl_s1.val);
    }
    public static sparsematrix sparsecopy(sparsematrix s0) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopy() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopy(error_msg, s0.get_ptr(), lcl_s1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopy");
        return new sparsematrix(lcl_s1.val);
    }
    private static native int _jni_sparsecopy(mut_string error_msg, long s0, mut_long s1, long _xparams);

    public static void sparsecopybuf(sparsematrix s0, sparsematrix s1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopybuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopybuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopybuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopybuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopybuf(error_msg, s0.get_ptr(), s1.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopybuf");
    }
    public static void sparsecopybuf(sparsematrix s0, sparsematrix s1) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopybuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopybuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopybuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopybuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopybuf(error_msg, s0.get_ptr(), s1.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopybuf");
    }
    private static native int _jni_sparsecopybuf(mut_string error_msg, long s0, long s1, long _xparams);

    public static void sparseswap(sparsematrix s0, sparsematrix s1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparseswap() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparseswap() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparseswap() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparseswap() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseswap(error_msg, s0.get_ptr(), s1.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseswap");
    }
    public static void sparseswap(sparsematrix s0, sparsematrix s1) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparseswap() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparseswap() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparseswap() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparseswap() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseswap(error_msg, s0.get_ptr(), s1.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseswap");
    }
    private static native int _jni_sparseswap(mut_string error_msg, long s0, long s1, long _xparams);

    public static void sparseadd(sparsematrix s, int i, int j, double v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseadd() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseadd() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseadd(error_msg, s.get_ptr(), i, j, v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseadd");
    }
    public static void sparseadd(sparsematrix s, int i, int j, double v) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseadd() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseadd() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseadd(error_msg, s.get_ptr(), i, j, v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseadd");
    }
    private static native int _jni_sparseadd(mut_string error_msg, long s, int i, int j, double v, long _xparams);

    public static void sparseset(sparsematrix s, int i, int j, double v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseset(error_msg, s.get_ptr(), i, j, v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseset");
    }
    public static void sparseset(sparsematrix s, int i, int j, double v) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseset(error_msg, s.get_ptr(), i, j, v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseset");
    }
    private static native int _jni_sparseset(mut_string error_msg, long s, int i, int j, double v, long _xparams);

    public static double sparseget(sparsematrix s, int i, int j, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseget() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseget() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseget(error_msg, lcl_result, s.get_ptr(), i, j, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseget");
        return lcl_result.val;
    }
    public static double sparseget(sparsematrix s, int i, int j) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseget() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseget() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseget(error_msg, lcl_result, s.get_ptr(), i, j, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseget");
        return lcl_result.val;
    }
    private static native int _jni_sparseget(mut_string error_msg, mut_double result, long s, int i, int j, long _xparams);

    public static boolean sparseexists(sparsematrix s, int i, int j, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseexists() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseexists() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseexists(error_msg, lcl_result, s.get_ptr(), i, j, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseexists");
        return lcl_result.val;
    }
    public static boolean sparseexists(sparsematrix s, int i, int j) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseexists() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseexists() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseexists(error_msg, lcl_result, s.get_ptr(), i, j, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseexists");
        return lcl_result.val;
    }
    private static native int _jni_sparseexists(mut_string error_msg, mut_boolean result, long s, int i, int j, long _xparams);

    public static double sparsegetdiagonal(sparsematrix s, int i, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetdiagonal() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetdiagonal() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetdiagonal(error_msg, lcl_result, s.get_ptr(), i, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetdiagonal");
        return lcl_result.val;
    }
    public static double sparsegetdiagonal(sparsematrix s, int i) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetdiagonal() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetdiagonal() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetdiagonal(error_msg, lcl_result, s.get_ptr(), i, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetdiagonal");
        return lcl_result.val;
    }
    private static native int _jni_sparsegetdiagonal(mut_string error_msg, mut_double result, long s, int i, long _xparams);

    public static double[] sparsemv(sparsematrix s, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemv(error_msg, s.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemv");
        return lcl_y.val;
    }
    public static double[] sparsemv(sparsematrix s, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemv(error_msg, s.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemv");
        return lcl_y.val;
    }
    private static native int _jni_sparsemv(mut_string error_msg, long s, double[] x, rlc_double1d y, long _xparams);

    public static double[] sparsemtv(sparsematrix s, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemtv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemtv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemtv(error_msg, s.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemtv");
        return lcl_y.val;
    }
    public static double[] sparsemtv(sparsematrix s, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemtv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemtv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemtv(error_msg, s.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemtv");
        return lcl_y.val;
    }
    private static native int _jni_sparsemtv(mut_string error_msg, long s, double[] x, rlc_double1d y, long _xparams);

    public static void sparsegemv(sparsematrix s, double alpha, int ops, double[] x, int ix, double beta, double[] y, int iy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegemv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegemv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegemv(error_msg, s.get_ptr(), alpha, ops, x, ix, beta, y, iy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegemv");
    }
    public static void sparsegemv(sparsematrix s, double alpha, int ops, double[] x, int ix, double beta, double[] y, int iy) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegemv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegemv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegemv(error_msg, s.get_ptr(), alpha, ops, x, ix, beta, y, iy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegemv");
    }
    private static native int _jni_sparsegemv(mut_string error_msg, long s, double alpha, int ops, double[] x, int ix, double beta, double[] y, int iy, long _xparams);

    public static class sparsemv2_results
    {
        public double[] y0;
        public double[] y1;
    }
    public static sparsemv2_results sparsemv2(sparsematrix s, double[] x, double[] y0, double[] y1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y0 = new rlc_double1d(y0);
        rlc_double1d lcl_y1 = new rlc_double1d(y1);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemv2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemv2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemv2(error_msg, s.get_ptr(), x, lcl_y0, lcl_y1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemv2");
        sparsemv2_results ret_tuple = new sparsemv2_results();
        ret_tuple.y0 = lcl_y0.val;
        ret_tuple.y1 = lcl_y1.val;
        return ret_tuple;
    }
    public static sparsemv2_results sparsemv2(sparsematrix s, double[] x, double[] y0, double[] y1) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y0 = new rlc_double1d(y0);
        rlc_double1d lcl_y1 = new rlc_double1d(y1);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemv2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemv2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemv2(error_msg, s.get_ptr(), x, lcl_y0, lcl_y1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemv2");
        sparsemv2_results ret_tuple = new sparsemv2_results();
        ret_tuple.y0 = lcl_y0.val;
        ret_tuple.y1 = lcl_y1.val;
        return ret_tuple;
    }
    private static native int _jni_sparsemv2(mut_string error_msg, long s, double[] x, rlc_double1d y0, rlc_double1d y1, long _xparams);

    public static double[] sparsesmv(sparsematrix s, boolean isupper, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsesmv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsesmv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesmv(error_msg, s.get_ptr(), isupper, x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesmv");
        return lcl_y.val;
    }
    public static double[] sparsesmv(sparsematrix s, boolean isupper, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsesmv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsesmv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesmv(error_msg, s.get_ptr(), isupper, x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesmv");
        return lcl_y.val;
    }
    private static native int _jni_sparsesmv(mut_string error_msg, long s, boolean isupper, double[] x, rlc_double1d y, long _xparams);

    public static void sparsemultiplycolsby(sparsematrix s, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemultiplycolsby() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemultiplycolsby() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemultiplycolsby(error_msg, s.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemultiplycolsby");
    }
    public static void sparsemultiplycolsby(sparsematrix s, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemultiplycolsby() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemultiplycolsby() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemultiplycolsby(error_msg, s.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemultiplycolsby");
    }
    private static native int _jni_sparsemultiplycolsby(mut_string error_msg, long s, double[] x, long _xparams);

    public static void sparsemultiplyrowsby(sparsematrix s, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemultiplyrowsby() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemultiplyrowsby() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemultiplyrowsby(error_msg, s.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemultiplyrowsby");
    }
    public static void sparsemultiplyrowsby(sparsematrix s, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemultiplyrowsby() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemultiplyrowsby() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemultiplyrowsby(error_msg, s.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemultiplyrowsby");
    }
    private static native int _jni_sparsemultiplyrowsby(mut_string error_msg, long s, double[] x, long _xparams);

    public static double sparsevsmv(sparsematrix s, boolean isupper, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsevsmv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsevsmv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsevsmv(error_msg, lcl_result, s.get_ptr(), isupper, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsevsmv");
        return lcl_result.val;
    }
    public static double sparsevsmv(sparsematrix s, boolean isupper, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsevsmv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsevsmv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsevsmv(error_msg, lcl_result, s.get_ptr(), isupper, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsevsmv");
        return lcl_result.val;
    }
    private static native int _jni_sparsevsmv(mut_string error_msg, mut_double result, long s, boolean isupper, double[] x, long _xparams);

    public static double[][] sparsemm(sparsematrix s, double[][] a, int k, double[][] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d(b);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemm(error_msg, s.get_ptr(), a, k, lcl_b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemm");
        return lcl_b.val;
    }
    public static double[][] sparsemm(sparsematrix s, double[][] a, int k, double[][] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d(b);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemm(error_msg, s.get_ptr(), a, k, lcl_b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemm");
        return lcl_b.val;
    }
    private static native int _jni_sparsemm(mut_string error_msg, long s, double[][] a, int k, rlc_double2d b, long _xparams);

    public static double[][] sparsemtm(sparsematrix s, double[][] a, int k, double[][] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d(b);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemtm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemtm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemtm(error_msg, s.get_ptr(), a, k, lcl_b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemtm");
        return lcl_b.val;
    }
    public static double[][] sparsemtm(sparsematrix s, double[][] a, int k, double[][] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d(b);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemtm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemtm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemtm(error_msg, s.get_ptr(), a, k, lcl_b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemtm");
        return lcl_b.val;
    }
    private static native int _jni_sparsemtm(mut_string error_msg, long s, double[][] a, int k, rlc_double2d b, long _xparams);

    public static class sparsemm2_results
    {
        public double[][] b0;
        public double[][] b1;
    }
    public static sparsemm2_results sparsemm2(sparsematrix s, double[][] a, int k, double[][] b0, double[][] b1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b0 = new rlc_double2d(b0);
        rlc_double2d lcl_b1 = new rlc_double2d(b1);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemm2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemm2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemm2(error_msg, s.get_ptr(), a, k, lcl_b0, lcl_b1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemm2");
        sparsemm2_results ret_tuple = new sparsemm2_results();
        ret_tuple.b0 = lcl_b0.val;
        ret_tuple.b1 = lcl_b1.val;
        return ret_tuple;
    }
    public static sparsemm2_results sparsemm2(sparsematrix s, double[][] a, int k, double[][] b0, double[][] b1) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b0 = new rlc_double2d(b0);
        rlc_double2d lcl_b1 = new rlc_double2d(b1);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemm2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsemm2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsemm2(error_msg, s.get_ptr(), a, k, lcl_b0, lcl_b1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsemm2");
        sparsemm2_results ret_tuple = new sparsemm2_results();
        ret_tuple.b0 = lcl_b0.val;
        ret_tuple.b1 = lcl_b1.val;
        return ret_tuple;
    }
    private static native int _jni_sparsemm2(mut_string error_msg, long s, double[][] a, int k, rlc_double2d b0, rlc_double2d b1, long _xparams);

    public static double[][] sparsesmm(sparsematrix s, boolean isupper, double[][] a, int k, double[][] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d(b);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsesmm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsesmm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesmm(error_msg, s.get_ptr(), isupper, a, k, lcl_b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesmm");
        return lcl_b.val;
    }
    public static double[][] sparsesmm(sparsematrix s, boolean isupper, double[][] a, int k, double[][] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d(b);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsesmm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsesmm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesmm(error_msg, s.get_ptr(), isupper, a, k, lcl_b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesmm");
        return lcl_b.val;
    }
    private static native int _jni_sparsesmm(mut_string error_msg, long s, boolean isupper, double[][] a, int k, rlc_double2d b, long _xparams);

    public static double[] sparsetrmv(sparsematrix s, boolean isupper, boolean isunit, int optype, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetrmv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetrmv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsetrmv(error_msg, s.get_ptr(), isupper, isunit, optype, x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsetrmv");
        return lcl_y.val;
    }
    public static double[] sparsetrmv(sparsematrix s, boolean isupper, boolean isunit, int optype, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetrmv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetrmv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsetrmv(error_msg, s.get_ptr(), isupper, isunit, optype, x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsetrmv");
        return lcl_y.val;
    }
    private static native int _jni_sparsetrmv(mut_string error_msg, long s, boolean isupper, boolean isunit, int optype, double[] x, rlc_double1d y, long _xparams);

    public static void sparsetrsv(sparsematrix s, boolean isupper, boolean isunit, int optype, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetrsv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetrsv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsetrsv(error_msg, s.get_ptr(), isupper, isunit, optype, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsetrsv");
    }
    public static void sparsetrsv(sparsematrix s, boolean isupper, boolean isunit, int optype, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetrsv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetrsv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsetrsv(error_msg, s.get_ptr(), isupper, isunit, optype, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsetrsv");
    }
    private static native int _jni_sparsetrsv(mut_string error_msg, long s, boolean isupper, boolean isunit, int optype, double[] x, long _xparams);

    public static sparsematrix sparsesymmpermtbl(sparsematrix a, boolean isupper, int[] p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesymmpermtbl() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesymmpermtbl() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesymmpermtbl(error_msg, a.get_ptr(), isupper, p, lcl_b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesymmpermtbl");
        return new sparsematrix(lcl_b.val);
    }
    public static sparsematrix sparsesymmpermtbl(sparsematrix a, boolean isupper, int[] p) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesymmpermtbl() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesymmpermtbl() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesymmpermtbl(error_msg, a.get_ptr(), isupper, p, lcl_b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesymmpermtbl");
        return new sparsematrix(lcl_b.val);
    }
    private static native int _jni_sparsesymmpermtbl(mut_string error_msg, long a, boolean isupper, int[] p, mut_long b, long _xparams);

    public static void sparsesymmpermtblbuf(sparsematrix a, boolean isupper, int[] p, sparsematrix b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesymmpermtblbuf() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesymmpermtblbuf() points to deallocated ALGLIB object");
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of sparsesymmpermtblbuf() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of sparsesymmpermtblbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesymmpermtblbuf(error_msg, a.get_ptr(), isupper, p, b.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesymmpermtblbuf");
    }
    public static void sparsesymmpermtblbuf(sparsematrix a, boolean isupper, int[] p, sparsematrix b) throws alglib.exception
    {
        activatealglibcore();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesymmpermtblbuf() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesymmpermtblbuf() points to deallocated ALGLIB object");
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of sparsesymmpermtblbuf() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of sparsesymmpermtblbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesymmpermtblbuf(error_msg, a.get_ptr(), isupper, p, b.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesymmpermtblbuf");
    }
    private static native int _jni_sparsesymmpermtblbuf(mut_string error_msg, long a, boolean isupper, int[] p, long b, long _xparams);

    public static void sparseresizematrix(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseresizematrix() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseresizematrix() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseresizematrix(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseresizematrix");
    }
    public static void sparseresizematrix(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseresizematrix() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseresizematrix() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseresizematrix(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseresizematrix");
    }
    private static native int _jni_sparseresizematrix(mut_string error_msg, long s, long _xparams);

    public static class sparseenumerate_results
    {
        public boolean result;
        public int t0;
        public int t1;
        public int i;
        public int j;
        public double v;
    }
    public static sparseenumerate_results sparseenumerate(sparsematrix s, int t0, int t1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_int lcl_t0 = new mut_int(t0);
        mut_int lcl_t1 = new mut_int(t1);
        mut_int lcl_i = new mut_int();
        mut_int lcl_j = new mut_int();
        mut_double lcl_v = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseenumerate() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseenumerate() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseenumerate(error_msg, lcl_result, s.get_ptr(), lcl_t0, lcl_t1, lcl_i, lcl_j, lcl_v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseenumerate");
        sparseenumerate_results ret_tuple = new sparseenumerate_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.t0 = lcl_t0.val;
        ret_tuple.t1 = lcl_t1.val;
        ret_tuple.i = lcl_i.val;
        ret_tuple.j = lcl_j.val;
        ret_tuple.v = lcl_v.val;
        return ret_tuple;
    }
    public static sparseenumerate_results sparseenumerate(sparsematrix s, int t0, int t1) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_int lcl_t0 = new mut_int(t0);
        mut_int lcl_t1 = new mut_int(t1);
        mut_int lcl_i = new mut_int();
        mut_int lcl_j = new mut_int();
        mut_double lcl_v = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseenumerate() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseenumerate() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseenumerate(error_msg, lcl_result, s.get_ptr(), lcl_t0, lcl_t1, lcl_i, lcl_j, lcl_v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseenumerate");
        sparseenumerate_results ret_tuple = new sparseenumerate_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.t0 = lcl_t0.val;
        ret_tuple.t1 = lcl_t1.val;
        ret_tuple.i = lcl_i.val;
        ret_tuple.j = lcl_j.val;
        ret_tuple.v = lcl_v.val;
        return ret_tuple;
    }
    private static native int _jni_sparseenumerate(mut_string error_msg, mut_boolean result, long s, mut_int t0, mut_int t1, mut_int i, mut_int j, mut_double v, long _xparams);

    public static boolean sparserewriteexisting(sparsematrix s, int i, int j, double v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparserewriteexisting() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparserewriteexisting() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparserewriteexisting(error_msg, lcl_result, s.get_ptr(), i, j, v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparserewriteexisting");
        return lcl_result.val;
    }
    public static boolean sparserewriteexisting(sparsematrix s, int i, int j, double v) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparserewriteexisting() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparserewriteexisting() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparserewriteexisting(error_msg, lcl_result, s.get_ptr(), i, j, v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparserewriteexisting");
        return lcl_result.val;
    }
    private static native int _jni_sparserewriteexisting(mut_string error_msg, mut_boolean result, long s, int i, int j, double v, long _xparams);

    public static double[] sparsegetrow(sparsematrix s, int i, double[] irow, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_irow = new rlc_double1d(irow);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetrow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetrow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetrow(error_msg, s.get_ptr(), i, lcl_irow, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetrow");
        return lcl_irow.val;
    }
    public static double[] sparsegetrow(sparsematrix s, int i, double[] irow) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_irow = new rlc_double1d(irow);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetrow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetrow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetrow(error_msg, s.get_ptr(), i, lcl_irow, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetrow");
        return lcl_irow.val;
    }
    private static native int _jni_sparsegetrow(mut_string error_msg, long s, int i, rlc_double1d irow, long _xparams);

    public static class sparsegetcompressedrow_results
    {
        public int[] colidx;
        public double[] vals;
        public int nzcnt;
    }
    public static sparsegetcompressedrow_results sparsegetcompressedrow(sparsematrix s, int i, int[] colidx, double[] vals, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_colidx = new rlc_int1d(colidx);
        rlc_double1d lcl_vals = new rlc_double1d(vals);
        mut_int lcl_nzcnt = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetcompressedrow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetcompressedrow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetcompressedrow(error_msg, s.get_ptr(), i, lcl_colidx, lcl_vals, lcl_nzcnt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetcompressedrow");
        sparsegetcompressedrow_results ret_tuple = new sparsegetcompressedrow_results();
        ret_tuple.colidx = lcl_colidx.val;
        ret_tuple.vals = lcl_vals.val;
        ret_tuple.nzcnt = lcl_nzcnt.val;
        return ret_tuple;
    }
    public static sparsegetcompressedrow_results sparsegetcompressedrow(sparsematrix s, int i, int[] colidx, double[] vals) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_colidx = new rlc_int1d(colidx);
        rlc_double1d lcl_vals = new rlc_double1d(vals);
        mut_int lcl_nzcnt = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetcompressedrow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetcompressedrow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetcompressedrow(error_msg, s.get_ptr(), i, lcl_colidx, lcl_vals, lcl_nzcnt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetcompressedrow");
        sparsegetcompressedrow_results ret_tuple = new sparsegetcompressedrow_results();
        ret_tuple.colidx = lcl_colidx.val;
        ret_tuple.vals = lcl_vals.val;
        ret_tuple.nzcnt = lcl_nzcnt.val;
        return ret_tuple;
    }
    private static native int _jni_sparsegetcompressedrow(mut_string error_msg, long s, int i, rlc_int1d colidx, rlc_double1d vals, mut_int nzcnt, long _xparams);

    public static void sparseappendcompressedrow(sparsematrix s, int[] colidx, double[] vals, int nz, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendcompressedrow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendcompressedrow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseappendcompressedrow(error_msg, s.get_ptr(), colidx, vals, nz, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseappendcompressedrow");
    }
    public static void sparseappendcompressedrow(sparsematrix s, int[] colidx, double[] vals, int nz) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendcompressedrow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendcompressedrow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseappendcompressedrow(error_msg, s.get_ptr(), colidx, vals, nz, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseappendcompressedrow");
    }
    private static native int _jni_sparseappendcompressedrow(mut_string error_msg, long s, int[] colidx, double[] vals, int nz, long _xparams);

    public static void sparseappendemptyrow(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendemptyrow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendemptyrow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseappendemptyrow(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseappendemptyrow");
    }
    public static void sparseappendemptyrow(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendemptyrow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendemptyrow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseappendemptyrow(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseappendemptyrow");
    }
    private static native int _jni_sparseappendemptyrow(mut_string error_msg, long s, long _xparams);

    public static void sparseappendelement(sparsematrix s, int k, double v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendelement() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendelement() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseappendelement(error_msg, s.get_ptr(), k, v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseappendelement");
    }
    public static void sparseappendelement(sparsematrix s, int k, double v) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendelement() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseappendelement() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseappendelement(error_msg, s.get_ptr(), k, v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseappendelement");
    }
    private static native int _jni_sparseappendelement(mut_string error_msg, long s, int k, double v, long _xparams);

    public static void sparseappendmatrix(sparsematrix sdst, sparsematrix ssrc, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( sdst==null )
            throw new alglib.exception("ALGLIB: parameter 'sdst' of sparseappendmatrix() is null");
        if( sdst.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sdst' of sparseappendmatrix() points to deallocated ALGLIB object");
        if( ssrc==null )
            throw new alglib.exception("ALGLIB: parameter 'ssrc' of sparseappendmatrix() is null");
        if( ssrc.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ssrc' of sparseappendmatrix() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseappendmatrix(error_msg, sdst.get_ptr(), ssrc.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseappendmatrix");
    }
    public static void sparseappendmatrix(sparsematrix sdst, sparsematrix ssrc) throws alglib.exception
    {
        activatealglibcore();
        if( sdst==null )
            throw new alglib.exception("ALGLIB: parameter 'sdst' of sparseappendmatrix() is null");
        if( sdst.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sdst' of sparseappendmatrix() points to deallocated ALGLIB object");
        if( ssrc==null )
            throw new alglib.exception("ALGLIB: parameter 'ssrc' of sparseappendmatrix() is null");
        if( ssrc.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ssrc' of sparseappendmatrix() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseappendmatrix(error_msg, sdst.get_ptr(), ssrc.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseappendmatrix");
    }
    private static native int _jni_sparseappendmatrix(mut_string error_msg, long sdst, long ssrc, long _xparams);

    public static void sparsetransposesks(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetransposesks() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetransposesks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsetransposesks(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsetransposesks");
    }
    public static void sparsetransposesks(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetransposesks() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetransposesks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsetransposesks(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsetransposesks");
    }
    private static native int _jni_sparsetransposesks(mut_string error_msg, long s, long _xparams);

    public static void sparsetransposecrs(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetransposecrs() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetransposecrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsetransposecrs(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsetransposecrs");
    }
    public static void sparsetransposecrs(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetransposecrs() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsetransposecrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsetransposecrs(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsetransposecrs");
    }
    private static native int _jni_sparsetransposecrs(mut_string error_msg, long s, long _xparams);

    public static sparsematrix sparsecopytransposecrs(sparsematrix s0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytransposecrs() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytransposecrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytransposecrs(error_msg, s0.get_ptr(), lcl_s1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytransposecrs");
        return new sparsematrix(lcl_s1.val);
    }
    public static sparsematrix sparsecopytransposecrs(sparsematrix s0) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytransposecrs() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytransposecrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytransposecrs(error_msg, s0.get_ptr(), lcl_s1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytransposecrs");
        return new sparsematrix(lcl_s1.val);
    }
    private static native int _jni_sparsecopytransposecrs(mut_string error_msg, long s0, mut_long s1, long _xparams);

    public static void sparsecopytransposecrsbuf(sparsematrix s0, sparsematrix s1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytransposecrsbuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytransposecrsbuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytransposecrsbuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytransposecrsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytransposecrsbuf(error_msg, s0.get_ptr(), s1.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytransposecrsbuf");
    }
    public static void sparsecopytransposecrsbuf(sparsematrix s0, sparsematrix s1) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytransposecrsbuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytransposecrsbuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytransposecrsbuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytransposecrsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytransposecrsbuf(error_msg, s0.get_ptr(), s1.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytransposecrsbuf");
    }
    private static native int _jni_sparsecopytransposecrsbuf(mut_string error_msg, long s0, long s1, long _xparams);

    public static void sparseconvertto(sparsematrix s0, int fmt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparseconvertto() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparseconvertto() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseconvertto(error_msg, s0.get_ptr(), fmt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseconvertto");
    }
    public static void sparseconvertto(sparsematrix s0, int fmt) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparseconvertto() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparseconvertto() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseconvertto(error_msg, s0.get_ptr(), fmt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseconvertto");
    }
    private static native int _jni_sparseconvertto(mut_string error_msg, long s0, int fmt, long _xparams);

    public static void sparsecopytobuf(sparsematrix s0, int fmt, sparsematrix s1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytobuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytobuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytobuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytobuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytobuf(error_msg, s0.get_ptr(), fmt, s1.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytobuf");
    }
    public static void sparsecopytobuf(sparsematrix s0, int fmt, sparsematrix s1) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytobuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytobuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytobuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytobuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytobuf(error_msg, s0.get_ptr(), fmt, s1.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytobuf");
    }
    private static native int _jni_sparsecopytobuf(mut_string error_msg, long s0, int fmt, long s1, long _xparams);

    public static void sparseconverttohash(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttohash() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttohash() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseconverttohash(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseconverttohash");
    }
    public static void sparseconverttohash(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttohash() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttohash() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseconverttohash(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseconverttohash");
    }
    private static native int _jni_sparseconverttohash(mut_string error_msg, long s, long _xparams);

    public static sparsematrix sparsecopytohash(sparsematrix s0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytohash() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytohash() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytohash(error_msg, s0.get_ptr(), lcl_s1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytohash");
        return new sparsematrix(lcl_s1.val);
    }
    public static sparsematrix sparsecopytohash(sparsematrix s0) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytohash() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytohash() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytohash(error_msg, s0.get_ptr(), lcl_s1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytohash");
        return new sparsematrix(lcl_s1.val);
    }
    private static native int _jni_sparsecopytohash(mut_string error_msg, long s0, mut_long s1, long _xparams);

    public static void sparsecopytohashbuf(sparsematrix s0, sparsematrix s1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytohashbuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytohashbuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytohashbuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytohashbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytohashbuf(error_msg, s0.get_ptr(), s1.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytohashbuf");
    }
    public static void sparsecopytohashbuf(sparsematrix s0, sparsematrix s1) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytohashbuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytohashbuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytohashbuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytohashbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytohashbuf(error_msg, s0.get_ptr(), s1.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytohashbuf");
    }
    private static native int _jni_sparsecopytohashbuf(mut_string error_msg, long s0, long s1, long _xparams);

    public static void sparseconverttocrs(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttocrs() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttocrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseconverttocrs(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseconverttocrs");
    }
    public static void sparseconverttocrs(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttocrs() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttocrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseconverttocrs(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseconverttocrs");
    }
    private static native int _jni_sparseconverttocrs(mut_string error_msg, long s, long _xparams);

    public static sparsematrix sparsecopytocrs(sparsematrix s0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytocrs() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytocrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytocrs(error_msg, s0.get_ptr(), lcl_s1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytocrs");
        return new sparsematrix(lcl_s1.val);
    }
    public static sparsematrix sparsecopytocrs(sparsematrix s0) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytocrs() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytocrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytocrs(error_msg, s0.get_ptr(), lcl_s1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytocrs");
        return new sparsematrix(lcl_s1.val);
    }
    private static native int _jni_sparsecopytocrs(mut_string error_msg, long s0, mut_long s1, long _xparams);

    public static void sparsecopytocrsbuf(sparsematrix s0, sparsematrix s1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytocrsbuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytocrsbuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytocrsbuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytocrsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytocrsbuf(error_msg, s0.get_ptr(), s1.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytocrsbuf");
    }
    public static void sparsecopytocrsbuf(sparsematrix s0, sparsematrix s1) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytocrsbuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytocrsbuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytocrsbuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytocrsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytocrsbuf(error_msg, s0.get_ptr(), s1.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytocrsbuf");
    }
    private static native int _jni_sparsecopytocrsbuf(mut_string error_msg, long s0, long s1, long _xparams);

    public static void sparseconverttosks(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttosks() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttosks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseconverttosks(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseconverttosks");
    }
    public static void sparseconverttosks(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttosks() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseconverttosks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseconverttosks(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseconverttosks");
    }
    private static native int _jni_sparseconverttosks(mut_string error_msg, long s, long _xparams);

    public static sparsematrix sparsecopytosks(sparsematrix s0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytosks() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytosks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytosks(error_msg, s0.get_ptr(), lcl_s1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytosks");
        return new sparsematrix(lcl_s1.val);
    }
    public static sparsematrix sparsecopytosks(sparsematrix s0) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s1 = new mut_long();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytosks() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytosks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytosks(error_msg, s0.get_ptr(), lcl_s1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytosks");
        return new sparsematrix(lcl_s1.val);
    }
    private static native int _jni_sparsecopytosks(mut_string error_msg, long s0, mut_long s1, long _xparams);

    public static void sparsecopytosksbuf(sparsematrix s0, sparsematrix s1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytosksbuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytosksbuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytosksbuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytosksbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytosksbuf(error_msg, s0.get_ptr(), s1.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytosksbuf");
    }
    public static void sparsecopytosksbuf(sparsematrix s0, sparsematrix s1) throws alglib.exception
    {
        activatealglibcore();
        if( s0==null )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytosksbuf() is null");
        if( s0.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's0' of sparsecopytosksbuf() points to deallocated ALGLIB object");
        if( s1==null )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytosksbuf() is null");
        if( s1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's1' of sparsecopytosksbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecopytosksbuf(error_msg, s0.get_ptr(), s1.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecopytosksbuf");
    }
    private static native int _jni_sparsecopytosksbuf(mut_string error_msg, long s0, long s1, long _xparams);

    public static int sparsegetmatrixtype(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetmatrixtype() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetmatrixtype() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetmatrixtype(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetmatrixtype");
        return lcl_result.val;
    }
    public static int sparsegetmatrixtype(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetmatrixtype() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetmatrixtype() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetmatrixtype(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetmatrixtype");
        return lcl_result.val;
    }
    private static native int _jni_sparsegetmatrixtype(mut_string error_msg, mut_int result, long s, long _xparams);

    public static boolean sparseishash(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseishash() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseishash() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseishash(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseishash");
        return lcl_result.val;
    }
    public static boolean sparseishash(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseishash() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseishash() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseishash(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseishash");
        return lcl_result.val;
    }
    private static native int _jni_sparseishash(mut_string error_msg, mut_boolean result, long s, long _xparams);

    public static boolean sparseiscrs(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseiscrs() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseiscrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseiscrs(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseiscrs");
        return lcl_result.val;
    }
    public static boolean sparseiscrs(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseiscrs() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseiscrs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseiscrs(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseiscrs");
        return lcl_result.val;
    }
    private static native int _jni_sparseiscrs(mut_string error_msg, mut_boolean result, long s, long _xparams);

    public static boolean sparseissks(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseissks() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseissks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseissks(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseissks");
        return lcl_result.val;
    }
    public static boolean sparseissks(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseissks() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparseissks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparseissks(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparseissks");
        return lcl_result.val;
    }
    private static native int _jni_sparseissks(mut_string error_msg, mut_boolean result, long s, long _xparams);

    public static sparsematrix sparsefree(alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsefree(error_msg, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsefree");
        return new sparsematrix(lcl_s.val);
    }
    public static sparsematrix sparsefree() throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsefree(error_msg, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsefree");
        return new sparsematrix(lcl_s.val);
    }
    private static native int _jni_sparsefree(mut_string error_msg, mut_long s, long _xparams);

    public static int sparsegetnrows(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetnrows() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetnrows() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetnrows(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetnrows");
        return lcl_result.val;
    }
    public static int sparsegetnrows(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetnrows() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetnrows() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetnrows(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetnrows");
        return lcl_result.val;
    }
    private static native int _jni_sparsegetnrows(mut_string error_msg, mut_int result, long s, long _xparams);

    public static int sparsegetncols(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetncols() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetncols() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetncols(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetncols");
        return lcl_result.val;
    }
    public static int sparsegetncols(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetncols() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetncols() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetncols(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetncols");
        return lcl_result.val;
    }
    private static native int _jni_sparsegetncols(mut_string error_msg, mut_int result, long s, long _xparams);

    public static int sparsegetuppercount(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetuppercount() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetuppercount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetuppercount(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetuppercount");
        return lcl_result.val;
    }
    public static int sparsegetuppercount(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetuppercount() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetuppercount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetuppercount(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetuppercount");
        return lcl_result.val;
    }
    private static native int _jni_sparsegetuppercount(mut_string error_msg, mut_int result, long s, long _xparams);

    public static int sparsegetlowercount(sparsematrix s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetlowercount() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetlowercount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetlowercount(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetlowercount");
        return lcl_result.val;
    }
    public static int sparsegetlowercount(sparsematrix s) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetlowercount() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsegetlowercount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsegetlowercount(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsegetlowercount");
        return lcl_result.val;
    }
    private static native int _jni_sparsegetlowercount(mut_string error_msg, mut_int result, long s, long _xparams);

    public static class sparsescale_results
    {
        public double[] r;
        public double[] c;
    }
    public static sparsescale_results sparsescale(sparsematrix s, int scltype, boolean scalerows, boolean scalecols, boolean colsfirst, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        rlc_double1d lcl_c = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsescale() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsescale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsescale(error_msg, s.get_ptr(), scltype, scalerows, scalecols, colsfirst, lcl_r, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsescale");
        sparsescale_results ret_tuple = new sparsescale_results();
        ret_tuple.r = lcl_r.val;
        ret_tuple.c = lcl_c.val;
        return ret_tuple;
    }
    public static sparsescale_results sparsescale(sparsematrix s, int scltype, boolean scalerows, boolean scalecols, boolean colsfirst) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        rlc_double1d lcl_c = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsescale() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of sparsescale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsescale(error_msg, s.get_ptr(), scltype, scalerows, scalecols, colsfirst, lcl_r, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsescale");
        sparsescale_results ret_tuple = new sparsescale_results();
        ret_tuple.r = lcl_r.val;
        ret_tuple.c = lcl_c.val;
        return ret_tuple;
    }
    private static native int _jni_sparsescale(mut_string error_msg, long s, int scltype, boolean scalerows, boolean scalecols, boolean colsfirst, rlc_double1d r, rlc_double1d c, long _xparams);

    
    
    //
    // Subpackage hsschur
    //
    
    
    
    //
    // Subpackage evd
    //
    

    public static class eigsubspacestate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected eigsubspacestate()
        {
            _ptr = 0;
            own  = false;
        }
        protected eigsubspacestate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected eigsubspacestate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new eigsubspacestate(0);
            return new eigsubspacestate(_jni_x_obj_copy_eigsubspacestate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_eigsubspacestate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_eigsubspacestate(long x);
    private static native void _jni_x_obj_free_eigsubspacestate(long x);


        public static class eigsubspacereport extends alglibobject
        {
            public int iterationscount;
            public alglibobject make_copy()
            {
                eigsubspacereport dst = new eigsubspacereport();
                dst.iterationscount = iterationscount;
                return dst;
            }
        }

    public static eigsubspacestate eigsubspacecreate(int n, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacecreate(error_msg, n, k, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacecreate");
        return new eigsubspacestate(lcl_state.val);
    }
    public static eigsubspacestate eigsubspacecreate(int n, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacecreate(error_msg, n, k, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacecreate");
        return new eigsubspacestate(lcl_state.val);
    }
    private static native int _jni_eigsubspacecreate(mut_string error_msg, int n, int k, mut_long state, long _xparams);

    public static void eigsubspacecreatebuf(int n, int k, eigsubspacestate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacecreatebuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacecreatebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacecreatebuf(error_msg, n, k, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacecreatebuf");
    }
    public static void eigsubspacecreatebuf(int n, int k, eigsubspacestate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacecreatebuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacecreatebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacecreatebuf(error_msg, n, k, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacecreatebuf");
    }
    private static native int _jni_eigsubspacecreatebuf(mut_string error_msg, int n, int k, long state, long _xparams);

    public static void eigsubspacesetcond(eigsubspacestate state, double eps, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacesetcond(error_msg, state.get_ptr(), eps, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacesetcond");
    }
    public static void eigsubspacesetcond(eigsubspacestate state, double eps, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacesetcond(error_msg, state.get_ptr(), eps, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacesetcond");
    }
    private static native int _jni_eigsubspacesetcond(mut_string error_msg, long state, double eps, int maxits, long _xparams);

    public static void eigsubspacesetwarmstart(eigsubspacestate state, boolean usewarmstart, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesetwarmstart() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesetwarmstart() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacesetwarmstart(error_msg, state.get_ptr(), usewarmstart, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacesetwarmstart");
    }
    public static void eigsubspacesetwarmstart(eigsubspacestate state, boolean usewarmstart) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesetwarmstart() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesetwarmstart() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacesetwarmstart(error_msg, state.get_ptr(), usewarmstart, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacesetwarmstart");
    }
    private static native int _jni_eigsubspacesetwarmstart(mut_string error_msg, long state, boolean usewarmstart, long _xparams);

    public static void eigsubspaceoocstart(eigsubspacestate state, int mtype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocstart() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocstart() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocstart(error_msg, state.get_ptr(), mtype, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocstart");
    }
    public static void eigsubspaceoocstart(eigsubspacestate state, int mtype) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocstart() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocstart() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocstart(error_msg, state.get_ptr(), mtype, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocstart");
    }
    private static native int _jni_eigsubspaceoocstart(mut_string error_msg, long state, int mtype, long _xparams);

    public static boolean eigsubspaceooccontinue(eigsubspacestate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceooccontinue() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceooccontinue() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceooccontinue(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceooccontinue");
        return lcl_result.val;
    }
    public static boolean eigsubspaceooccontinue(eigsubspacestate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceooccontinue() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceooccontinue() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceooccontinue(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceooccontinue");
        return lcl_result.val;
    }
    private static native int _jni_eigsubspaceooccontinue(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static class eigsubspaceoocgetrequestinfo_results
    {
        public int requesttype;
        public int requestsize;
    }
    public static eigsubspaceoocgetrequestinfo_results eigsubspaceoocgetrequestinfo(eigsubspacestate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_requesttype = new mut_int();
        mut_int lcl_requestsize = new mut_int();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocgetrequestinfo() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocgetrequestinfo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocgetrequestinfo(error_msg, state.get_ptr(), lcl_requesttype, lcl_requestsize, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocgetrequestinfo");
        eigsubspaceoocgetrequestinfo_results ret_tuple = new eigsubspaceoocgetrequestinfo_results();
        ret_tuple.requesttype = lcl_requesttype.val;
        ret_tuple.requestsize = lcl_requestsize.val;
        return ret_tuple;
    }
    public static eigsubspaceoocgetrequestinfo_results eigsubspaceoocgetrequestinfo(eigsubspacestate state) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_requesttype = new mut_int();
        mut_int lcl_requestsize = new mut_int();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocgetrequestinfo() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocgetrequestinfo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocgetrequestinfo(error_msg, state.get_ptr(), lcl_requesttype, lcl_requestsize, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocgetrequestinfo");
        eigsubspaceoocgetrequestinfo_results ret_tuple = new eigsubspaceoocgetrequestinfo_results();
        ret_tuple.requesttype = lcl_requesttype.val;
        ret_tuple.requestsize = lcl_requestsize.val;
        return ret_tuple;
    }
    private static native int _jni_eigsubspaceoocgetrequestinfo(mut_string error_msg, long state, mut_int requesttype, mut_int requestsize, long _xparams);

    public static double[][] eigsubspaceoocgetrequestdata(eigsubspacestate state, double[][] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocgetrequestdata() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocgetrequestdata() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocgetrequestdata(error_msg, state.get_ptr(), lcl_x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocgetrequestdata");
        return lcl_x.val;
    }
    public static double[][] eigsubspaceoocgetrequestdata(eigsubspacestate state, double[][] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocgetrequestdata() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocgetrequestdata() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocgetrequestdata(error_msg, state.get_ptr(), lcl_x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocgetrequestdata");
        return lcl_x.val;
    }
    private static native int _jni_eigsubspaceoocgetrequestdata(mut_string error_msg, long state, rlc_double2d x, long _xparams);

    public static void eigsubspaceoocsendresult(eigsubspacestate state, double[][] ax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocsendresult() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocsendresult() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocsendresult(error_msg, state.get_ptr(), ax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocsendresult");
    }
    public static void eigsubspaceoocsendresult(eigsubspacestate state, double[][] ax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocsendresult() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocsendresult() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocsendresult(error_msg, state.get_ptr(), ax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocsendresult");
    }
    private static native int _jni_eigsubspaceoocsendresult(mut_string error_msg, long state, double[][] ax, long _xparams);

    public static class eigsubspaceoocstop_results
    {
        public double[] w;
        public double[][] z;
        public eigsubspacereport rep;
    }
    public static eigsubspaceoocstop_results eigsubspaceoocstop(eigsubspacestate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocstop() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocstop() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocstop(error_msg, state.get_ptr(), lcl_w, lcl_z, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocstop");
        eigsubspaceoocstop_results ret_tuple = new eigsubspaceoocstop_results();
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.rep = (eigsubspacereport)lcl_rep.val;
        return ret_tuple;
    }
    public static eigsubspaceoocstop_results eigsubspaceoocstop(eigsubspacestate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocstop() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspaceoocstop() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspaceoocstop(error_msg, state.get_ptr(), lcl_w, lcl_z, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspaceoocstop");
        eigsubspaceoocstop_results ret_tuple = new eigsubspaceoocstop_results();
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.rep = (eigsubspacereport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_eigsubspaceoocstop(mut_string error_msg, long state, rlc_double1d w, rlc_double2d z, mut_object rep, long _xparams);

    public static class eigsubspacesolvedenses_results
    {
        public double[] w;
        public double[][] z;
        public eigsubspacereport rep;
    }
    public static eigsubspacesolvedenses_results eigsubspacesolvedenses(eigsubspacestate state, double[][] a, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesolvedenses() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesolvedenses() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacesolvedenses(error_msg, state.get_ptr(), a, isupper, lcl_w, lcl_z, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacesolvedenses");
        eigsubspacesolvedenses_results ret_tuple = new eigsubspacesolvedenses_results();
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.rep = (eigsubspacereport)lcl_rep.val;
        return ret_tuple;
    }
    public static eigsubspacesolvedenses_results eigsubspacesolvedenses(eigsubspacestate state, double[][] a, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesolvedenses() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesolvedenses() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacesolvedenses(error_msg, state.get_ptr(), a, isupper, lcl_w, lcl_z, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacesolvedenses");
        eigsubspacesolvedenses_results ret_tuple = new eigsubspacesolvedenses_results();
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.rep = (eigsubspacereport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_eigsubspacesolvedenses(mut_string error_msg, long state, double[][] a, boolean isupper, rlc_double1d w, rlc_double2d z, mut_object rep, long _xparams);

    public static class eigsubspacesolvesparses_results
    {
        public double[] w;
        public double[][] z;
        public eigsubspacereport rep;
    }
    public static eigsubspacesolvesparses_results eigsubspacesolvesparses(eigsubspacestate state, sparsematrix a, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesolvesparses() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesolvesparses() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of eigsubspacesolvesparses() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of eigsubspacesolvesparses() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacesolvesparses(error_msg, state.get_ptr(), a.get_ptr(), isupper, lcl_w, lcl_z, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacesolvesparses");
        eigsubspacesolvesparses_results ret_tuple = new eigsubspacesolvesparses_results();
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.rep = (eigsubspacereport)lcl_rep.val;
        return ret_tuple;
    }
    public static eigsubspacesolvesparses_results eigsubspacesolvesparses(eigsubspacestate state, sparsematrix a, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesolvesparses() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of eigsubspacesolvesparses() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of eigsubspacesolvesparses() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of eigsubspacesolvesparses() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_eigsubspacesolvesparses(error_msg, state.get_ptr(), a.get_ptr(), isupper, lcl_w, lcl_z, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "eigsubspacesolvesparses");
        eigsubspacesolvesparses_results ret_tuple = new eigsubspacesolvesparses_results();
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.rep = (eigsubspacereport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_eigsubspacesolvesparses(mut_string error_msg, long state, long a, boolean isupper, rlc_double1d w, rlc_double2d z, mut_object rep, long _xparams);

    public static class smatrixevd_results
    {
        public boolean result;
        public double[] d;
        public double[][] z;
    }
    public static smatrixevd_results smatrixevd(double[][] a, int n, int zneeded, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixevd(error_msg, lcl_result, a, n, zneeded, isupper, lcl_d, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixevd");
        smatrixevd_results ret_tuple = new smatrixevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static smatrixevd_results smatrixevd(double[][] a, int n, int zneeded, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixevd(error_msg, lcl_result, a, n, zneeded, isupper, lcl_d, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixevd");
        smatrixevd_results ret_tuple = new smatrixevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixevd(mut_string error_msg, mut_boolean result, double[][] a, int n, int zneeded, boolean isupper, rlc_double1d d, rlc_double2d z, long _xparams);

    public static class smatrixevdr_results
    {
        public boolean result;
        public int m;
        public double[] w;
        public double[][] z;
    }
    public static smatrixevdr_results smatrixevdr(double[][] a, int n, int zneeded, boolean isupper, double b1, double b2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_int lcl_m = new mut_int();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixevdr(error_msg, lcl_result, a, n, zneeded, isupper, b1, b2, lcl_m, lcl_w, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixevdr");
        smatrixevdr_results ret_tuple = new smatrixevdr_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.m = lcl_m.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static smatrixevdr_results smatrixevdr(double[][] a, int n, int zneeded, boolean isupper, double b1, double b2) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_int lcl_m = new mut_int();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixevdr(error_msg, lcl_result, a, n, zneeded, isupper, b1, b2, lcl_m, lcl_w, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixevdr");
        smatrixevdr_results ret_tuple = new smatrixevdr_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.m = lcl_m.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixevdr(mut_string error_msg, mut_boolean result, double[][] a, int n, int zneeded, boolean isupper, double b1, double b2, mut_int m, rlc_double1d w, rlc_double2d z, long _xparams);

    public static class smatrixevdi_results
    {
        public boolean result;
        public double[] w;
        public double[][] z;
    }
    public static smatrixevdi_results smatrixevdi(double[][] a, int n, int zneeded, boolean isupper, int i1, int i2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixevdi(error_msg, lcl_result, a, n, zneeded, isupper, i1, i2, lcl_w, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixevdi");
        smatrixevdi_results ret_tuple = new smatrixevdi_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static smatrixevdi_results smatrixevdi(double[][] a, int n, int zneeded, boolean isupper, int i1, int i2) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixevdi(error_msg, lcl_result, a, n, zneeded, isupper, i1, i2, lcl_w, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixevdi");
        smatrixevdi_results ret_tuple = new smatrixevdi_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixevdi(mut_string error_msg, mut_boolean result, double[][] a, int n, int zneeded, boolean isupper, int i1, int i2, rlc_double1d w, rlc_double2d z, long _xparams);

    public static class hmatrixevd_results
    {
        public boolean result;
        public double[] d;
        public complex[][] z;
    }
    public static hmatrixevd_results hmatrixevd(complex[][] a, int n, int zneeded, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_complex2d lcl_z = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixevd(error_msg, lcl_result, a, n, zneeded, isupper, lcl_d, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixevd");
        hmatrixevd_results ret_tuple = new hmatrixevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static hmatrixevd_results hmatrixevd(complex[][] a, int n, int zneeded, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_complex2d lcl_z = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixevd(error_msg, lcl_result, a, n, zneeded, isupper, lcl_d, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixevd");
        hmatrixevd_results ret_tuple = new hmatrixevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_hmatrixevd(mut_string error_msg, mut_boolean result, complex[][] a, int n, int zneeded, boolean isupper, rlc_double1d d, rlc_complex2d z, long _xparams);

    public static class hmatrixevdr_results
    {
        public boolean result;
        public int m;
        public double[] w;
        public complex[][] z;
    }
    public static hmatrixevdr_results hmatrixevdr(complex[][] a, int n, int zneeded, boolean isupper, double b1, double b2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_int lcl_m = new mut_int();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_complex2d lcl_z = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixevdr(error_msg, lcl_result, a, n, zneeded, isupper, b1, b2, lcl_m, lcl_w, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixevdr");
        hmatrixevdr_results ret_tuple = new hmatrixevdr_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.m = lcl_m.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static hmatrixevdr_results hmatrixevdr(complex[][] a, int n, int zneeded, boolean isupper, double b1, double b2) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_int lcl_m = new mut_int();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_complex2d lcl_z = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixevdr(error_msg, lcl_result, a, n, zneeded, isupper, b1, b2, lcl_m, lcl_w, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixevdr");
        hmatrixevdr_results ret_tuple = new hmatrixevdr_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.m = lcl_m.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_hmatrixevdr(mut_string error_msg, mut_boolean result, complex[][] a, int n, int zneeded, boolean isupper, double b1, double b2, mut_int m, rlc_double1d w, rlc_complex2d z, long _xparams);

    public static class hmatrixevdi_results
    {
        public boolean result;
        public double[] w;
        public complex[][] z;
    }
    public static hmatrixevdi_results hmatrixevdi(complex[][] a, int n, int zneeded, boolean isupper, int i1, int i2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_complex2d lcl_z = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixevdi(error_msg, lcl_result, a, n, zneeded, isupper, i1, i2, lcl_w, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixevdi");
        hmatrixevdi_results ret_tuple = new hmatrixevdi_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static hmatrixevdi_results hmatrixevdi(complex[][] a, int n, int zneeded, boolean isupper, int i1, int i2) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_complex2d lcl_z = new rlc_complex2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hmatrixevdi(error_msg, lcl_result, a, n, zneeded, isupper, i1, i2, lcl_w, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hmatrixevdi");
        hmatrixevdi_results ret_tuple = new hmatrixevdi_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_hmatrixevdi(mut_string error_msg, mut_boolean result, complex[][] a, int n, int zneeded, boolean isupper, int i1, int i2, rlc_double1d w, rlc_complex2d z, long _xparams);

    public static class smatrixtdevd_results
    {
        public boolean result;
        public double[][] z;
    }
    public static smatrixtdevd_results smatrixtdevd(double[] d, double[] e, int n, int zneeded, double[][] z, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double2d lcl_z = new rlc_double2d(z);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtdevd(error_msg, lcl_result, d, e, n, zneeded, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtdevd");
        smatrixtdevd_results ret_tuple = new smatrixtdevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static smatrixtdevd_results smatrixtdevd(double[] d, double[] e, int n, int zneeded, double[][] z) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double2d lcl_z = new rlc_double2d(z);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtdevd(error_msg, lcl_result, d, e, n, zneeded, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtdevd");
        smatrixtdevd_results ret_tuple = new smatrixtdevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixtdevd(mut_string error_msg, mut_boolean result, double[] d, double[] e, int n, int zneeded, rlc_double2d z, long _xparams);

    public static class smatrixtdevdr_results
    {
        public boolean result;
        public double[] d;
        public int m;
        public double[][] z;
    }
    public static smatrixtdevdr_results smatrixtdevdr(double[] d, double[] e, int n, int zneeded, double a, double b, double[][] z, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d(d);
        mut_int lcl_m = new mut_int();
        rlc_double2d lcl_z = new rlc_double2d(z);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtdevdr(error_msg, lcl_result, lcl_d, e, n, zneeded, a, b, lcl_m, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtdevdr");
        smatrixtdevdr_results ret_tuple = new smatrixtdevdr_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.m = lcl_m.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static smatrixtdevdr_results smatrixtdevdr(double[] d, double[] e, int n, int zneeded, double a, double b, double[][] z) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d(d);
        mut_int lcl_m = new mut_int();
        rlc_double2d lcl_z = new rlc_double2d(z);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtdevdr(error_msg, lcl_result, lcl_d, e, n, zneeded, a, b, lcl_m, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtdevdr");
        smatrixtdevdr_results ret_tuple = new smatrixtdevdr_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.m = lcl_m.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixtdevdr(mut_string error_msg, mut_boolean result, rlc_double1d d, double[] e, int n, int zneeded, double a, double b, mut_int m, rlc_double2d z, long _xparams);

    public static class smatrixtdevdi_results
    {
        public boolean result;
        public double[] d;
        public double[][] z;
    }
    public static smatrixtdevdi_results smatrixtdevdi(double[] d, double[] e, int n, int zneeded, int i1, int i2, double[][] z, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d(d);
        rlc_double2d lcl_z = new rlc_double2d(z);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtdevdi(error_msg, lcl_result, lcl_d, e, n, zneeded, i1, i2, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtdevdi");
        smatrixtdevdi_results ret_tuple = new smatrixtdevdi_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static smatrixtdevdi_results smatrixtdevdi(double[] d, double[] e, int n, int zneeded, int i1, int i2, double[][] z) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d(d);
        rlc_double2d lcl_z = new rlc_double2d(z);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixtdevdi(error_msg, lcl_result, lcl_d, e, n, zneeded, i1, i2, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixtdevdi");
        smatrixtdevdi_results ret_tuple = new smatrixtdevdi_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixtdevdi(mut_string error_msg, mut_boolean result, rlc_double1d d, double[] e, int n, int zneeded, int i1, int i2, rlc_double2d z, long _xparams);

    public static class rmatrixevd_results
    {
        public boolean result;
        public double[] wr;
        public double[] wi;
        public double[][] vl;
        public double[][] vr;
    }
    public static rmatrixevd_results rmatrixevd(double[][] a, int n, int vneeded, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_wr = new rlc_double1d();
        rlc_double1d lcl_wi = new rlc_double1d();
        rlc_double2d lcl_vl = new rlc_double2d();
        rlc_double2d lcl_vr = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixevd(error_msg, lcl_result, a, n, vneeded, lcl_wr, lcl_wi, lcl_vl, lcl_vr, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixevd");
        rmatrixevd_results ret_tuple = new rmatrixevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.wr = lcl_wr.val;
        ret_tuple.wi = lcl_wi.val;
        ret_tuple.vl = lcl_vl.val;
        ret_tuple.vr = lcl_vr.val;
        return ret_tuple;
    }
    public static rmatrixevd_results rmatrixevd(double[][] a, int n, int vneeded) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_wr = new rlc_double1d();
        rlc_double1d lcl_wi = new rlc_double1d();
        rlc_double2d lcl_vl = new rlc_double2d();
        rlc_double2d lcl_vr = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixevd(error_msg, lcl_result, a, n, vneeded, lcl_wr, lcl_wi, lcl_vl, lcl_vr, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixevd");
        rmatrixevd_results ret_tuple = new rmatrixevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.wr = lcl_wr.val;
        ret_tuple.wi = lcl_wi.val;
        ret_tuple.vl = lcl_vl.val;
        ret_tuple.vr = lcl_vr.val;
        return ret_tuple;
    }
    private static native int _jni_rmatrixevd(mut_string error_msg, mut_boolean result, double[][] a, int n, int vneeded, rlc_double1d wr, rlc_double1d wi, rlc_double2d vl, rlc_double2d vr, long _xparams);

    
    
    //
    // Subpackage dlu
    //
    
    
    
    //
    // Subpackage sptrf
    //
    
    
    
    //
    // Subpackage amdordering
    //
    
    
    
    //
    // Subpackage spchol
    //
    
    
    
    //
    // Subpackage trfac
    //
    

    public static class sparsedecompositionanalysis extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected sparsedecompositionanalysis()
        {
            _ptr = 0;
            own  = false;
        }
        protected sparsedecompositionanalysis(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected sparsedecompositionanalysis(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new sparsedecompositionanalysis(0);
            return new sparsedecompositionanalysis(_jni_x_obj_copy_sparsedecompositionanalysis(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_sparsedecompositionanalysis(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_sparsedecompositionanalysis(long x);
    private static native void _jni_x_obj_free_sparsedecompositionanalysis(long x);

    public static int[] rmatrixlu(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_pivots = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlu(error_msg, a, m, n, lcl_pivots, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlu");
        return lcl_pivots.val;
    }
    public static int[] rmatrixlu(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_pivots = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlu(error_msg, a, m, n, lcl_pivots, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlu");
        return lcl_pivots.val;
    }
            
    public static int[] rmatrixlu(double[][] a, alglib.xparams _params) throws alglib.exception
    {
        int m;
        int n;
    
        m = ap.rows(a);
        n = ap.cols(a);
        return rmatrixlu(a, m, n, _params);
    
    }
    
    public static int[] rmatrixlu(double[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int m;
        int n;
    
        m = ap.rows(a);
        n = ap.cols(a);
        return rmatrixlu(a, m, n, _params);
    
    }
    private static native int _jni_rmatrixlu(mut_string error_msg, double[][] a, int m, int n, rlc_int1d pivots, long _xparams);

    public static int[] cmatrixlu(complex[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_pivots = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlu(error_msg, a, m, n, lcl_pivots, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlu");
        return lcl_pivots.val;
    }
    public static int[] cmatrixlu(complex[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_pivots = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlu(error_msg, a, m, n, lcl_pivots, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlu");
        return lcl_pivots.val;
    }
            
    public static int[] cmatrixlu(complex[][] a, alglib.xparams _params) throws alglib.exception
    {
        int m;
        int n;
    
        m = ap.rows(a);
        n = ap.cols(a);
        return cmatrixlu(a, m, n, _params);
    
    }
    
    public static int[] cmatrixlu(complex[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int m;
        int n;
    
        m = ap.rows(a);
        n = ap.cols(a);
        return cmatrixlu(a, m, n, _params);
    
    }
    private static native int _jni_cmatrixlu(mut_string error_msg, complex[][] a, int m, int n, rlc_int1d pivots, long _xparams);

    public static boolean hpdmatrixcholesky(complex[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholesky(error_msg, lcl_result, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholesky");
        return lcl_result.val;
    }
    public static boolean hpdmatrixcholesky(complex[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholesky(error_msg, lcl_result, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholesky");
        return lcl_result.val;
    }
            
    public static boolean hpdmatrixcholesky(complex[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling hpdmatrixcholesky(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return hpdmatrixcholesky(a, n, isupper, _params);
    
    }
    
    public static boolean hpdmatrixcholesky(complex[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling hpdmatrixcholesky(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return hpdmatrixcholesky(a, n, isupper, _params);
    
    }
    private static native int _jni_hpdmatrixcholesky(mut_string error_msg, mut_boolean result, complex[][] a, int n, boolean isupper, long _xparams);

    public static boolean spdmatrixcholesky(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholesky(error_msg, lcl_result, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholesky");
        return lcl_result.val;
    }
    public static boolean spdmatrixcholesky(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholesky(error_msg, lcl_result, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholesky");
        return lcl_result.val;
    }
            
    public static boolean spdmatrixcholesky(double[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling spdmatrixcholesky(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixcholesky(a, n, isupper, _params);
    
    }
    
    public static boolean spdmatrixcholesky(double[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling spdmatrixcholesky(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixcholesky(a, n, isupper, _params);
    
    }
    private static native int _jni_spdmatrixcholesky(mut_string error_msg, mut_boolean result, double[][] a, int n, boolean isupper, long _xparams);

    public static void spdmatrixcholeskyupdateadd1(double[][] a, int n, boolean isupper, double[] u, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyupdateadd1(error_msg, a, n, isupper, u, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyupdateadd1");
    }
    public static void spdmatrixcholeskyupdateadd1(double[][] a, int n, boolean isupper, double[] u) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyupdateadd1(error_msg, a, n, isupper, u, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyupdateadd1");
    }
            
    public static void spdmatrixcholeskyupdateadd1(double[][] a, boolean isupper, double[] u, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=u.length))
            throw new exception("Error while calling spdmatrixcholeskyupdateadd1(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        spdmatrixcholeskyupdateadd1(a, n, isupper, u, _params);
    
    }
    
    public static void spdmatrixcholeskyupdateadd1(double[][] a, boolean isupper, double[] u) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=u.length))
            throw new exception("Error while calling spdmatrixcholeskyupdateadd1(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        spdmatrixcholeskyupdateadd1(a, n, isupper, u, _params);
    
    }
    private static native int _jni_spdmatrixcholeskyupdateadd1(mut_string error_msg, double[][] a, int n, boolean isupper, double[] u, long _xparams);

    public static void spdmatrixcholeskyupdatefix(double[][] a, int n, boolean isupper, boolean[] fix, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyupdatefix(error_msg, a, n, isupper, fix, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyupdatefix");
    }
    public static void spdmatrixcholeskyupdatefix(double[][] a, int n, boolean isupper, boolean[] fix) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyupdatefix(error_msg, a, n, isupper, fix, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyupdatefix");
    }
            
    public static void spdmatrixcholeskyupdatefix(double[][] a, boolean isupper, boolean[] fix, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=fix.length))
            throw new exception("Error while calling spdmatrixcholeskyupdatefix(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        spdmatrixcholeskyupdatefix(a, n, isupper, fix, _params);
    
    }
    
    public static void spdmatrixcholeskyupdatefix(double[][] a, boolean isupper, boolean[] fix) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=fix.length))
            throw new exception("Error while calling spdmatrixcholeskyupdatefix(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        spdmatrixcholeskyupdatefix(a, n, isupper, fix, _params);
    
    }
    private static native int _jni_spdmatrixcholeskyupdatefix(mut_string error_msg, double[][] a, int n, boolean isupper, boolean[] fix, long _xparams);

    public static double[] spdmatrixcholeskyupdateadd1buf(double[][] a, int n, boolean isupper, double[] u, double[] bufr, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_bufr = new rlc_double1d(bufr);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyupdateadd1buf(error_msg, a, n, isupper, u, lcl_bufr, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyupdateadd1buf");
        return lcl_bufr.val;
    }
    public static double[] spdmatrixcholeskyupdateadd1buf(double[][] a, int n, boolean isupper, double[] u, double[] bufr) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_bufr = new rlc_double1d(bufr);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyupdateadd1buf(error_msg, a, n, isupper, u, lcl_bufr, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyupdateadd1buf");
        return lcl_bufr.val;
    }
    private static native int _jni_spdmatrixcholeskyupdateadd1buf(mut_string error_msg, double[][] a, int n, boolean isupper, double[] u, rlc_double1d bufr, long _xparams);

    public static double[] spdmatrixcholeskyupdatefixbuf(double[][] a, int n, boolean isupper, boolean[] fix, double[] bufr, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_bufr = new rlc_double1d(bufr);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyupdatefixbuf(error_msg, a, n, isupper, fix, lcl_bufr, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyupdatefixbuf");
        return lcl_bufr.val;
    }
    public static double[] spdmatrixcholeskyupdatefixbuf(double[][] a, int n, boolean isupper, boolean[] fix, double[] bufr) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_bufr = new rlc_double1d(bufr);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyupdatefixbuf(error_msg, a, n, isupper, fix, lcl_bufr, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyupdatefixbuf");
        return lcl_bufr.val;
    }
    private static native int _jni_spdmatrixcholeskyupdatefixbuf(mut_string error_msg, double[][] a, int n, boolean isupper, boolean[] fix, rlc_double1d bufr, long _xparams);

    public static class sparselu_results
    {
        public boolean result;
        public int[] p;
        public int[] q;
    }
    public static sparselu_results sparselu(sparsematrix a, int pivottype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_int1d lcl_p = new rlc_int1d();
        rlc_int1d lcl_q = new rlc_int1d();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparselu() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparselu() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparselu(error_msg, lcl_result, a.get_ptr(), pivottype, lcl_p, lcl_q, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparselu");
        sparselu_results ret_tuple = new sparselu_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.p = lcl_p.val;
        ret_tuple.q = lcl_q.val;
        return ret_tuple;
    }
    public static sparselu_results sparselu(sparsematrix a, int pivottype) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_int1d lcl_p = new rlc_int1d();
        rlc_int1d lcl_q = new rlc_int1d();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparselu() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparselu() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparselu(error_msg, lcl_result, a.get_ptr(), pivottype, lcl_p, lcl_q, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparselu");
        sparselu_results ret_tuple = new sparselu_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.p = lcl_p.val;
        ret_tuple.q = lcl_q.val;
        return ret_tuple;
    }
    private static native int _jni_sparselu(mut_string error_msg, mut_boolean result, long a, int pivottype, rlc_int1d p, rlc_int1d q, long _xparams);

    public static boolean sparsecholeskyskyline(sparsematrix a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyskyline() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyskyline() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyskyline(error_msg, lcl_result, a.get_ptr(), n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyskyline");
        return lcl_result.val;
    }
    public static boolean sparsecholeskyskyline(sparsematrix a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyskyline() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyskyline() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyskyline(error_msg, lcl_result, a.get_ptr(), n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyskyline");
        return lcl_result.val;
    }
    private static native int _jni_sparsecholeskyskyline(mut_string error_msg, mut_boolean result, long a, int n, boolean isupper, long _xparams);

    public static boolean sparsecholesky(sparsematrix a, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholesky() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholesky() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholesky(error_msg, lcl_result, a.get_ptr(), isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholesky");
        return lcl_result.val;
    }
    public static boolean sparsecholesky(sparsematrix a, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholesky() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholesky() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholesky(error_msg, lcl_result, a.get_ptr(), isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholesky");
        return lcl_result.val;
    }
    private static native int _jni_sparsecholesky(mut_string error_msg, mut_boolean result, long a, boolean isupper, long _xparams);

    public static class sparsecholeskyp_results
    {
        public boolean result;
        public int[] p;
    }
    public static sparsecholeskyp_results sparsecholeskyp(sparsematrix a, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_int1d lcl_p = new rlc_int1d();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyp() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyp(error_msg, lcl_result, a.get_ptr(), isupper, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyp");
        sparsecholeskyp_results ret_tuple = new sparsecholeskyp_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.p = lcl_p.val;
        return ret_tuple;
    }
    public static sparsecholeskyp_results sparsecholeskyp(sparsematrix a, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_int1d lcl_p = new rlc_int1d();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyp() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyp(error_msg, lcl_result, a.get_ptr(), isupper, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyp");
        sparsecholeskyp_results ret_tuple = new sparsecholeskyp_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.p = lcl_p.val;
        return ret_tuple;
    }
    private static native int _jni_sparsecholeskyp(mut_string error_msg, mut_boolean result, long a, boolean isupper, rlc_int1d p, long _xparams);

    public static class sparsecholeskyanalyze_results
    {
        public boolean result;
        public sparsedecompositionanalysis analysis;
    }
    public static sparsecholeskyanalyze_results sparsecholeskyanalyze(sparsematrix a, boolean isupper, int facttype, int permtype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_long lcl_analysis = new mut_long();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyanalyze() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyanalyze() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyanalyze(error_msg, lcl_result, a.get_ptr(), isupper, facttype, permtype, lcl_analysis, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyanalyze");
        sparsecholeskyanalyze_results ret_tuple = new sparsecholeskyanalyze_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.analysis = new sparsedecompositionanalysis(lcl_analysis.val);
        return ret_tuple;
    }
    public static sparsecholeskyanalyze_results sparsecholeskyanalyze(sparsematrix a, boolean isupper, int facttype, int permtype) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_long lcl_analysis = new mut_long();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyanalyze() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyanalyze() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyanalyze(error_msg, lcl_result, a.get_ptr(), isupper, facttype, permtype, lcl_analysis, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyanalyze");
        sparsecholeskyanalyze_results ret_tuple = new sparsecholeskyanalyze_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.analysis = new sparsedecompositionanalysis(lcl_analysis.val);
        return ret_tuple;
    }
    private static native int _jni_sparsecholeskyanalyze(mut_string error_msg, mut_boolean result, long a, boolean isupper, int facttype, int permtype, mut_long analysis, long _xparams);

    public static class sparsecholeskyfactorize_results
    {
        public boolean result;
        public sparsematrix a;
        public double[] d;
        public int[] p;
    }
    public static sparsecholeskyfactorize_results sparsecholeskyfactorize(sparsedecompositionanalysis analysis, boolean needupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_long lcl_a = new mut_long();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_int1d lcl_p = new rlc_int1d();
        if( analysis==null )
            throw new alglib.exception("ALGLIB: parameter 'analysis' of sparsecholeskyfactorize() is null");
        if( analysis.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'analysis' of sparsecholeskyfactorize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyfactorize(error_msg, lcl_result, analysis.get_ptr(), needupper, lcl_a, lcl_d, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyfactorize");
        sparsecholeskyfactorize_results ret_tuple = new sparsecholeskyfactorize_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.a = new sparsematrix(lcl_a.val);
        ret_tuple.d = lcl_d.val;
        ret_tuple.p = lcl_p.val;
        return ret_tuple;
    }
    public static sparsecholeskyfactorize_results sparsecholeskyfactorize(sparsedecompositionanalysis analysis, boolean needupper) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_long lcl_a = new mut_long();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_int1d lcl_p = new rlc_int1d();
        if( analysis==null )
            throw new alglib.exception("ALGLIB: parameter 'analysis' of sparsecholeskyfactorize() is null");
        if( analysis.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'analysis' of sparsecholeskyfactorize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyfactorize(error_msg, lcl_result, analysis.get_ptr(), needupper, lcl_a, lcl_d, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyfactorize");
        sparsecholeskyfactorize_results ret_tuple = new sparsecholeskyfactorize_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.a = new sparsematrix(lcl_a.val);
        ret_tuple.d = lcl_d.val;
        ret_tuple.p = lcl_p.val;
        return ret_tuple;
    }
    private static native int _jni_sparsecholeskyfactorize(mut_string error_msg, mut_boolean result, long analysis, boolean needupper, mut_long a, rlc_double1d d, rlc_int1d p, long _xparams);

    public static void sparsecholeskyreload(sparsedecompositionanalysis analysis, sparsematrix a, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( analysis==null )
            throw new alglib.exception("ALGLIB: parameter 'analysis' of sparsecholeskyreload() is null");
        if( analysis.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'analysis' of sparsecholeskyreload() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyreload() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyreload() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyreload(error_msg, analysis.get_ptr(), a.get_ptr(), isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyreload");
    }
    public static void sparsecholeskyreload(sparsedecompositionanalysis analysis, sparsematrix a, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        if( analysis==null )
            throw new alglib.exception("ALGLIB: parameter 'analysis' of sparsecholeskyreload() is null");
        if( analysis.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'analysis' of sparsecholeskyreload() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyreload() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsecholeskyreload() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsecholeskyreload(error_msg, analysis.get_ptr(), a.get_ptr(), isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsecholeskyreload");
    }
    private static native int _jni_sparsecholeskyreload(mut_string error_msg, long analysis, long a, boolean isupper, long _xparams);

    
    
    //
    // Subpackage polynomialsolver
    //
    

        public static class polynomialsolverreport extends alglibobject
        {
            public double maxerr;
            public alglibobject make_copy()
            {
                polynomialsolverreport dst = new polynomialsolverreport();
                dst.maxerr = maxerr;
                return dst;
            }
        }

    public static class polynomialsolve_results
    {
        public complex[] x;
        public polynomialsolverreport rep;
    }
    public static polynomialsolve_results polynomialsolve(double[] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialsolve(error_msg, a, n, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialsolve");
        polynomialsolve_results ret_tuple = new polynomialsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (polynomialsolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static polynomialsolve_results polynomialsolve(double[] a, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialsolve(error_msg, a, n, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialsolve");
        polynomialsolve_results ret_tuple = new polynomialsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (polynomialsolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_polynomialsolve(mut_string error_msg, double[] a, int n, rlc_complex1d x, mut_object rep, long _xparams);

    
    
    //
    // Subpackage bdsvd
    //
    
    public static boolean rmatrixbdsvd(double[] d, double[] e, int n, boolean isupper, boolean isfractionalaccuracyrequired, double[][] u, int nru, double[][] c, int ncc, double[][] vt, int ncvt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdsvd(error_msg, lcl_result, d, e, n, isupper, isfractionalaccuracyrequired, u, nru, c, ncc, vt, ncvt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdsvd");
        return lcl_result.val;
    }
    public static boolean rmatrixbdsvd(double[] d, double[] e, int n, boolean isupper, boolean isfractionalaccuracyrequired, double[][] u, int nru, double[][] c, int ncc, double[][] vt, int ncvt) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixbdsvd(error_msg, lcl_result, d, e, n, isupper, isfractionalaccuracyrequired, u, nru, c, ncc, vt, ncvt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixbdsvd");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixbdsvd(mut_string error_msg, mut_boolean result, double[] d, double[] e, int n, boolean isupper, boolean isfractionalaccuracyrequired, double[][] u, int nru, double[][] c, int ncc, double[][] vt, int ncvt, long _xparams);

    
    
    //
    // Subpackage svd
    //
    
    public static class rmatrixsvd_results
    {
        public boolean result;
        public double[] w;
        public double[][] u;
        public double[][] vt;
    }
    public static rmatrixsvd_results rmatrixsvd(double[][] a, int m, int n, int uneeded, int vtneeded, int additionalmemory, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_u = new rlc_double2d();
        rlc_double2d lcl_vt = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsvd(error_msg, lcl_result, a, m, n, uneeded, vtneeded, additionalmemory, lcl_w, lcl_u, lcl_vt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsvd");
        rmatrixsvd_results ret_tuple = new rmatrixsvd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.u = lcl_u.val;
        ret_tuple.vt = lcl_vt.val;
        return ret_tuple;
    }
    public static rmatrixsvd_results rmatrixsvd(double[][] a, int m, int n, int uneeded, int vtneeded, int additionalmemory) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_w = new rlc_double1d();
        rlc_double2d lcl_u = new rlc_double2d();
        rlc_double2d lcl_vt = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsvd(error_msg, lcl_result, a, m, n, uneeded, vtneeded, additionalmemory, lcl_w, lcl_u, lcl_vt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsvd");
        rmatrixsvd_results ret_tuple = new rmatrixsvd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.w = lcl_w.val;
        ret_tuple.u = lcl_u.val;
        ret_tuple.vt = lcl_vt.val;
        return ret_tuple;
    }
    private static native int _jni_rmatrixsvd(mut_string error_msg, mut_boolean result, double[][] a, int m, int n, int uneeded, int vtneeded, int additionalmemory, rlc_double1d w, rlc_double2d u, rlc_double2d vt, long _xparams);

    
    
    //
    // Subpackage rcond
    //
    
    public static double rmatrixrcond1(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrcond1(error_msg, lcl_result, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrcond1");
        return lcl_result.val;
    }
    public static double rmatrixrcond1(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrcond1(error_msg, lcl_result, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrcond1");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixrcond1(mut_string error_msg, mut_double result, double[][] a, int n, long _xparams);

    public static double rmatrixrcond2(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrcond2(error_msg, lcl_result, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrcond2");
        return lcl_result.val;
    }
    public static double rmatrixrcond2(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrcond2(error_msg, lcl_result, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrcond2");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixrcond2(mut_string error_msg, mut_double result, double[][] a, int n, long _xparams);

    public static double rmatrixrcond2rect(double[][] a, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrcond2rect(error_msg, lcl_result, a, m, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrcond2rect");
        return lcl_result.val;
    }
    public static double rmatrixrcond2rect(double[][] a, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrcond2rect(error_msg, lcl_result, a, m, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrcond2rect");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixrcond2rect(mut_string error_msg, mut_double result, double[][] a, int m, int n, long _xparams);

    public static double rmatrixrcondinf(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrcondinf(error_msg, lcl_result, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrcondinf");
        return lcl_result.val;
    }
    public static double rmatrixrcondinf(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixrcondinf(error_msg, lcl_result, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixrcondinf");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixrcondinf(mut_string error_msg, mut_double result, double[][] a, int n, long _xparams);

    public static double spdmatrixrcond(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixrcond(error_msg, lcl_result, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixrcond");
        return lcl_result.val;
    }
    public static double spdmatrixrcond(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixrcond(error_msg, lcl_result, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixrcond");
        return lcl_result.val;
    }
    private static native int _jni_spdmatrixrcond(mut_string error_msg, mut_double result, double[][] a, int n, boolean isupper, long _xparams);

    public static double spdmatrixrcond2(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixrcond2(error_msg, lcl_result, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixrcond2");
        return lcl_result.val;
    }
    public static double spdmatrixrcond2(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixrcond2(error_msg, lcl_result, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixrcond2");
        return lcl_result.val;
    }
    private static native int _jni_spdmatrixrcond2(mut_string error_msg, mut_double result, double[][] a, int n, boolean isupper, long _xparams);

    public static double rmatrixtrrcond1(double[][] a, int n, boolean isupper, boolean isunit, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrrcond1(error_msg, lcl_result, a, n, isupper, isunit, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrrcond1");
        return lcl_result.val;
    }
    public static double rmatrixtrrcond1(double[][] a, int n, boolean isupper, boolean isunit) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrrcond1(error_msg, lcl_result, a, n, isupper, isunit, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrrcond1");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixtrrcond1(mut_string error_msg, mut_double result, double[][] a, int n, boolean isupper, boolean isunit, long _xparams);

    public static double rmatrixtrrcond2(double[][] a, int n, boolean isupper, boolean isunit, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrrcond2(error_msg, lcl_result, a, n, isupper, isunit, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrrcond2");
        return lcl_result.val;
    }
    public static double rmatrixtrrcond2(double[][] a, int n, boolean isupper, boolean isunit) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrrcond2(error_msg, lcl_result, a, n, isupper, isunit, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrrcond2");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixtrrcond2(mut_string error_msg, mut_double result, double[][] a, int n, boolean isupper, boolean isunit, long _xparams);

    public static double rmatrixtrrcondinf(double[][] a, int n, boolean isupper, boolean isunit, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrrcondinf(error_msg, lcl_result, a, n, isupper, isunit, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrrcondinf");
        return lcl_result.val;
    }
    public static double rmatrixtrrcondinf(double[][] a, int n, boolean isupper, boolean isunit) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrrcondinf(error_msg, lcl_result, a, n, isupper, isunit, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrrcondinf");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixtrrcondinf(mut_string error_msg, mut_double result, double[][] a, int n, boolean isupper, boolean isunit, long _xparams);

    public static double hpdmatrixrcond(complex[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixrcond(error_msg, lcl_result, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixrcond");
        return lcl_result.val;
    }
    public static double hpdmatrixrcond(complex[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixrcond(error_msg, lcl_result, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixrcond");
        return lcl_result.val;
    }
    private static native int _jni_hpdmatrixrcond(mut_string error_msg, mut_double result, complex[][] a, int n, boolean isupper, long _xparams);

    public static double cmatrixrcond1(complex[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrcond1(error_msg, lcl_result, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrcond1");
        return lcl_result.val;
    }
    public static double cmatrixrcond1(complex[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrcond1(error_msg, lcl_result, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrcond1");
        return lcl_result.val;
    }
    private static native int _jni_cmatrixrcond1(mut_string error_msg, mut_double result, complex[][] a, int n, long _xparams);

    public static double cmatrixrcondinf(complex[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrcondinf(error_msg, lcl_result, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrcondinf");
        return lcl_result.val;
    }
    public static double cmatrixrcondinf(complex[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixrcondinf(error_msg, lcl_result, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixrcondinf");
        return lcl_result.val;
    }
    private static native int _jni_cmatrixrcondinf(mut_string error_msg, mut_double result, complex[][] a, int n, long _xparams);

    public static double rmatrixlurcond1(double[][] lua, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlurcond1(error_msg, lcl_result, lua, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlurcond1");
        return lcl_result.val;
    }
    public static double rmatrixlurcond1(double[][] lua, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlurcond1(error_msg, lcl_result, lua, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlurcond1");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixlurcond1(mut_string error_msg, mut_double result, double[][] lua, int n, long _xparams);

    public static double rmatrixlurcondinf(double[][] lua, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlurcondinf(error_msg, lcl_result, lua, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlurcondinf");
        return lcl_result.val;
    }
    public static double rmatrixlurcondinf(double[][] lua, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlurcondinf(error_msg, lcl_result, lua, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlurcondinf");
        return lcl_result.val;
    }
    private static native int _jni_rmatrixlurcondinf(mut_string error_msg, mut_double result, double[][] lua, int n, long _xparams);

    public static double spdmatrixcholeskyrcond(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyrcond(error_msg, lcl_result, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyrcond");
        return lcl_result.val;
    }
    public static double spdmatrixcholeskyrcond(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyrcond(error_msg, lcl_result, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyrcond");
        return lcl_result.val;
    }
    private static native int _jni_spdmatrixcholeskyrcond(mut_string error_msg, mut_double result, double[][] a, int n, boolean isupper, long _xparams);

    public static double hpdmatrixcholeskyrcond(complex[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskyrcond(error_msg, lcl_result, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskyrcond");
        return lcl_result.val;
    }
    public static double hpdmatrixcholeskyrcond(complex[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskyrcond(error_msg, lcl_result, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskyrcond");
        return lcl_result.val;
    }
    private static native int _jni_hpdmatrixcholeskyrcond(mut_string error_msg, mut_double result, complex[][] a, int n, boolean isupper, long _xparams);

    public static double cmatrixlurcond1(complex[][] lua, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlurcond1(error_msg, lcl_result, lua, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlurcond1");
        return lcl_result.val;
    }
    public static double cmatrixlurcond1(complex[][] lua, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlurcond1(error_msg, lcl_result, lua, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlurcond1");
        return lcl_result.val;
    }
    private static native int _jni_cmatrixlurcond1(mut_string error_msg, mut_double result, complex[][] lua, int n, long _xparams);

    public static double cmatrixlurcondinf(complex[][] lua, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlurcondinf(error_msg, lcl_result, lua, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlurcondinf");
        return lcl_result.val;
    }
    public static double cmatrixlurcondinf(complex[][] lua, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlurcondinf(error_msg, lcl_result, lua, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlurcondinf");
        return lcl_result.val;
    }
    private static native int _jni_cmatrixlurcondinf(mut_string error_msg, mut_double result, complex[][] lua, int n, long _xparams);

    public static double cmatrixtrrcond1(complex[][] a, int n, boolean isupper, boolean isunit, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixtrrcond1(error_msg, lcl_result, a, n, isupper, isunit, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixtrrcond1");
        return lcl_result.val;
    }
    public static double cmatrixtrrcond1(complex[][] a, int n, boolean isupper, boolean isunit) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixtrrcond1(error_msg, lcl_result, a, n, isupper, isunit, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixtrrcond1");
        return lcl_result.val;
    }
    private static native int _jni_cmatrixtrrcond1(mut_string error_msg, mut_double result, complex[][] a, int n, boolean isupper, boolean isunit, long _xparams);

    public static double cmatrixtrrcondinf(complex[][] a, int n, boolean isupper, boolean isunit, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixtrrcondinf(error_msg, lcl_result, a, n, isupper, isunit, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixtrrcondinf");
        return lcl_result.val;
    }
    public static double cmatrixtrrcondinf(complex[][] a, int n, boolean isupper, boolean isunit) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixtrrcondinf(error_msg, lcl_result, a, n, isupper, isunit, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixtrrcondinf");
        return lcl_result.val;
    }
    private static native int _jni_cmatrixtrrcondinf(mut_string error_msg, mut_double result, complex[][] a, int n, boolean isupper, boolean isunit, long _xparams);

    
    
    //
    // Subpackage directdensesolvers
    //
    

        public static class densesolverreport extends alglibobject
        {
            public int terminationtype;
            public double r1;
            public double rinf;
            public alglibobject make_copy()
            {
                densesolverreport dst = new densesolverreport();
                dst.terminationtype = terminationtype;
                dst.r1 = r1;
                dst.rinf = rinf;
                return dst;
            }
        }


        public static class densesolverlsreport extends alglibobject
        {
            public int terminationtype;
            public double r2;
            public double[][] cx;
            public int n;
            public int k;
            public alglibobject make_copy()
            {
                densesolverlsreport dst = new densesolverlsreport();
                dst.terminationtype = terminationtype;
                dst.r2 = r2;
                dst.cx = alglib.make_copy(cx);
                dst.n = n;
                dst.k = k;
                return dst;
            }
        }

    public static class rmatrixsolve_results
    {
        public double[] x;
        public densesolverreport rep;
    }
    public static rmatrixsolve_results rmatrixsolve(double[][] a, int n, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolve(error_msg, a, n, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolve");
        rmatrixsolve_results ret_tuple = new rmatrixsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static rmatrixsolve_results rmatrixsolve(double[][] a, int n, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolve(error_msg, a, n, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolve");
        rmatrixsolve_results ret_tuple = new rmatrixsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static rmatrixsolve_results rmatrixsolve(double[][] a, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling rmatrixsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixsolve(a, n, b, _params);
    
    }
    
    public static rmatrixsolve_results rmatrixsolve(double[][] a, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling rmatrixsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixsolve(a, n, b, _params);
    
    }
    private static native int _jni_rmatrixsolve(mut_string error_msg, double[][] a, int n, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    public static boolean rmatrixsolvefast(double[][] a, int n, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolvefast(error_msg, lcl_result, a, n, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolvefast");
        return lcl_result.val;
    }
    public static boolean rmatrixsolvefast(double[][] a, int n, double[] b) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolvefast(error_msg, lcl_result, a, n, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolvefast");
        return lcl_result.val;
    }
            
    public static boolean rmatrixsolvefast(double[][] a, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling rmatrixsolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixsolvefast(a, n, b, _params);
    
    }
    
    public static boolean rmatrixsolvefast(double[][] a, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling rmatrixsolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixsolvefast(a, n, b, _params);
    
    }
    private static native int _jni_rmatrixsolvefast(mut_string error_msg, mut_boolean result, double[][] a, int n, double[] b, long _xparams);

    public static class rmatrixsolvem_results
    {
        public double[][] x;
        public densesolverreport rep;
    }
    public static rmatrixsolvem_results rmatrixsolvem(double[][] a, int n, double[][] b, int m, boolean rfs, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolvem(error_msg, a, n, b, m, rfs, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolvem");
        rmatrixsolvem_results ret_tuple = new rmatrixsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static rmatrixsolvem_results rmatrixsolvem(double[][] a, int n, double[][] b, int m, boolean rfs) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolvem(error_msg, a, n, b, m, rfs, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolvem");
        rmatrixsolvem_results ret_tuple = new rmatrixsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static rmatrixsolvem_results rmatrixsolvem(double[][] a, double[][] b, boolean rfs, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return rmatrixsolvem(a, n, b, m, rfs, _params);
    
    }
    
    public static rmatrixsolvem_results rmatrixsolvem(double[][] a, double[][] b, boolean rfs) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return rmatrixsolvem(a, n, b, m, rfs, _params);
    
    }
    private static native int _jni_rmatrixsolvem(mut_string error_msg, double[][] a, int n, double[][] b, int m, boolean rfs, rlc_double2d x, mut_object rep, long _xparams);

    public static boolean rmatrixsolvemfast(double[][] a, int n, double[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolvemfast(error_msg, lcl_result, a, n, b, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolvemfast");
        return lcl_result.val;
    }
    public static boolean rmatrixsolvemfast(double[][] a, int n, double[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolvemfast(error_msg, lcl_result, a, n, b, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolvemfast");
        return lcl_result.val;
    }
            
    public static boolean rmatrixsolvemfast(double[][] a, double[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixsolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return rmatrixsolvemfast(a, n, b, m, _params);
    
    }
    
    public static boolean rmatrixsolvemfast(double[][] a, double[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixsolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return rmatrixsolvemfast(a, n, b, m, _params);
    
    }
    private static native int _jni_rmatrixsolvemfast(mut_string error_msg, mut_boolean result, double[][] a, int n, double[][] b, int m, long _xparams);

    public static class rmatrixlusolve_results
    {
        public double[] x;
        public densesolverreport rep;
    }
    public static rmatrixlusolve_results rmatrixlusolve(double[][] lua, int[] p, int n, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlusolve(error_msg, lua, p, n, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlusolve");
        rmatrixlusolve_results ret_tuple = new rmatrixlusolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static rmatrixlusolve_results rmatrixlusolve(double[][] lua, int[] p, int n, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlusolve(error_msg, lua, p, n, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlusolve");
        rmatrixlusolve_results ret_tuple = new rmatrixlusolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static rmatrixlusolve_results rmatrixlusolve(double[][] lua, int[] p, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=b.length))
            throw new exception("Error while calling rmatrixlusolve(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        return rmatrixlusolve(lua, p, n, b, _params);
    
    }
    
    public static rmatrixlusolve_results rmatrixlusolve(double[][] lua, int[] p, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=b.length))
            throw new exception("Error while calling rmatrixlusolve(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        return rmatrixlusolve(lua, p, n, b, _params);
    
    }
    private static native int _jni_rmatrixlusolve(mut_string error_msg, double[][] lua, int[] p, int n, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    public static boolean rmatrixlusolvefast(double[][] lua, int[] p, int n, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlusolvefast(error_msg, lcl_result, lua, p, n, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlusolvefast");
        return lcl_result.val;
    }
    public static boolean rmatrixlusolvefast(double[][] lua, int[] p, int n, double[] b) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlusolvefast(error_msg, lcl_result, lua, p, n, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlusolvefast");
        return lcl_result.val;
    }
            
    public static boolean rmatrixlusolvefast(double[][] lua, int[] p, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length))
            throw new exception("Error while calling rmatrixlusolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        return rmatrixlusolvefast(lua, p, n, b, _params);
    
    }
    
    public static boolean rmatrixlusolvefast(double[][] lua, int[] p, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length))
            throw new exception("Error while calling rmatrixlusolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        return rmatrixlusolvefast(lua, p, n, b, _params);
    
    }
    private static native int _jni_rmatrixlusolvefast(mut_string error_msg, mut_boolean result, double[][] lua, int[] p, int n, double[] b, long _xparams);

    public static class rmatrixlusolvem_results
    {
        public double[][] x;
        public densesolverreport rep;
    }
    public static rmatrixlusolvem_results rmatrixlusolvem(double[][] lua, int[] p, int n, double[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlusolvem(error_msg, lua, p, n, b, m, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlusolvem");
        rmatrixlusolvem_results ret_tuple = new rmatrixlusolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static rmatrixlusolvem_results rmatrixlusolvem(double[][] lua, int[] p, int n, double[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlusolvem(error_msg, lua, p, n, b, m, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlusolvem");
        rmatrixlusolvem_results ret_tuple = new rmatrixlusolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static rmatrixlusolvem_results rmatrixlusolvem(double[][] lua, int[] p, double[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixlusolvem(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        m = ap.cols(b);
        return rmatrixlusolvem(lua, p, n, b, m, _params);
    
    }
    
    public static rmatrixlusolvem_results rmatrixlusolvem(double[][] lua, int[] p, double[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixlusolvem(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        m = ap.cols(b);
        return rmatrixlusolvem(lua, p, n, b, m, _params);
    
    }
    private static native int _jni_rmatrixlusolvem(mut_string error_msg, double[][] lua, int[] p, int n, double[][] b, int m, rlc_double2d x, mut_object rep, long _xparams);

    public static boolean rmatrixlusolvemfast(double[][] lua, int[] p, int n, double[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlusolvemfast(error_msg, lcl_result, lua, p, n, b, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlusolvemfast");
        return lcl_result.val;
    }
    public static boolean rmatrixlusolvemfast(double[][] lua, int[] p, int n, double[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixlusolvemfast(error_msg, lcl_result, lua, p, n, b, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixlusolvemfast");
        return lcl_result.val;
    }
            
    public static boolean rmatrixlusolvemfast(double[][] lua, int[] p, double[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixlusolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        m = ap.cols(b);
        return rmatrixlusolvemfast(lua, p, n, b, m, _params);
    
    }
    
    public static boolean rmatrixlusolvemfast(double[][] lua, int[] p, double[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixlusolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        m = ap.cols(b);
        return rmatrixlusolvemfast(lua, p, n, b, m, _params);
    
    }
    private static native int _jni_rmatrixlusolvemfast(mut_string error_msg, mut_boolean result, double[][] lua, int[] p, int n, double[][] b, int m, long _xparams);

    public static class rmatrixmixedsolve_results
    {
        public double[] x;
        public densesolverreport rep;
    }
    public static rmatrixmixedsolve_results rmatrixmixedsolve(double[][] a, double[][] lua, int[] p, int n, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixmixedsolve(error_msg, a, lua, p, n, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixmixedsolve");
        rmatrixmixedsolve_results ret_tuple = new rmatrixmixedsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static rmatrixmixedsolve_results rmatrixmixedsolve(double[][] a, double[][] lua, int[] p, int n, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixmixedsolve(error_msg, a, lua, p, n, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixmixedsolve");
        rmatrixmixedsolve_results ret_tuple = new rmatrixmixedsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static rmatrixmixedsolve_results rmatrixmixedsolve(double[][] a, double[][] lua, int[] p, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(lua)) || (ap.rows(a)!=ap.cols(lua)) || (ap.rows(a)!=p.length) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling rmatrixmixedsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixmixedsolve(a, lua, p, n, b, _params);
    
    }
    
    public static rmatrixmixedsolve_results rmatrixmixedsolve(double[][] a, double[][] lua, int[] p, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(lua)) || (ap.rows(a)!=ap.cols(lua)) || (ap.rows(a)!=p.length) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling rmatrixmixedsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixmixedsolve(a, lua, p, n, b, _params);
    
    }
    private static native int _jni_rmatrixmixedsolve(mut_string error_msg, double[][] a, double[][] lua, int[] p, int n, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    public static class rmatrixmixedsolvem_results
    {
        public double[][] x;
        public densesolverreport rep;
    }
    public static rmatrixmixedsolvem_results rmatrixmixedsolvem(double[][] a, double[][] lua, int[] p, int n, double[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixmixedsolvem(error_msg, a, lua, p, n, b, m, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixmixedsolvem");
        rmatrixmixedsolvem_results ret_tuple = new rmatrixmixedsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static rmatrixmixedsolvem_results rmatrixmixedsolvem(double[][] a, double[][] lua, int[] p, int n, double[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixmixedsolvem(error_msg, a, lua, p, n, b, m, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixmixedsolvem");
        rmatrixmixedsolvem_results ret_tuple = new rmatrixmixedsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static rmatrixmixedsolvem_results rmatrixmixedsolvem(double[][] a, double[][] lua, int[] p, double[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(lua)) || (ap.rows(a)!=ap.cols(lua)) || (ap.rows(a)!=p.length) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixmixedsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return rmatrixmixedsolvem(a, lua, p, n, b, m, _params);
    
    }
    
    public static rmatrixmixedsolvem_results rmatrixmixedsolvem(double[][] a, double[][] lua, int[] p, double[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(lua)) || (ap.rows(a)!=ap.cols(lua)) || (ap.rows(a)!=p.length) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling rmatrixmixedsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return rmatrixmixedsolvem(a, lua, p, n, b, m, _params);
    
    }
    private static native int _jni_rmatrixmixedsolvem(mut_string error_msg, double[][] a, double[][] lua, int[] p, int n, double[][] b, int m, rlc_double2d x, mut_object rep, long _xparams);

    public static class cmatrixsolvem_results
    {
        public complex[][] x;
        public densesolverreport rep;
    }
    public static cmatrixsolvem_results cmatrixsolvem(complex[][] a, int n, complex[][] b, int m, boolean rfs, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsolvem(error_msg, a, n, b, m, rfs, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsolvem");
        cmatrixsolvem_results ret_tuple = new cmatrixsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static cmatrixsolvem_results cmatrixsolvem(complex[][] a, int n, complex[][] b, int m, boolean rfs) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsolvem(error_msg, a, n, b, m, rfs, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsolvem");
        cmatrixsolvem_results ret_tuple = new cmatrixsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static cmatrixsolvem_results cmatrixsolvem(complex[][] a, complex[][] b, boolean rfs, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return cmatrixsolvem(a, n, b, m, rfs, _params);
    
    }
    
    public static cmatrixsolvem_results cmatrixsolvem(complex[][] a, complex[][] b, boolean rfs) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return cmatrixsolvem(a, n, b, m, rfs, _params);
    
    }
    private static native int _jni_cmatrixsolvem(mut_string error_msg, complex[][] a, int n, complex[][] b, int m, boolean rfs, rlc_complex2d x, mut_object rep, long _xparams);

    public static boolean cmatrixsolvemfast(complex[][] a, int n, complex[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsolvemfast(error_msg, lcl_result, a, n, b, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsolvemfast");
        return lcl_result.val;
    }
    public static boolean cmatrixsolvemfast(complex[][] a, int n, complex[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsolvemfast(error_msg, lcl_result, a, n, b, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsolvemfast");
        return lcl_result.val;
    }
            
    public static boolean cmatrixsolvemfast(complex[][] a, complex[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixsolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return cmatrixsolvemfast(a, n, b, m, _params);
    
    }
    
    public static boolean cmatrixsolvemfast(complex[][] a, complex[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixsolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return cmatrixsolvemfast(a, n, b, m, _params);
    
    }
    private static native int _jni_cmatrixsolvemfast(mut_string error_msg, mut_boolean result, complex[][] a, int n, complex[][] b, int m, long _xparams);

    public static class cmatrixsolve_results
    {
        public complex[] x;
        public densesolverreport rep;
    }
    public static cmatrixsolve_results cmatrixsolve(complex[][] a, int n, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsolve(error_msg, a, n, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsolve");
        cmatrixsolve_results ret_tuple = new cmatrixsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static cmatrixsolve_results cmatrixsolve(complex[][] a, int n, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsolve(error_msg, a, n, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsolve");
        cmatrixsolve_results ret_tuple = new cmatrixsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static cmatrixsolve_results cmatrixsolve(complex[][] a, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling cmatrixsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixsolve(a, n, b, _params);
    
    }
    
    public static cmatrixsolve_results cmatrixsolve(complex[][] a, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling cmatrixsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixsolve(a, n, b, _params);
    
    }
    private static native int _jni_cmatrixsolve(mut_string error_msg, complex[][] a, int n, complex[] b, rlc_complex1d x, mut_object rep, long _xparams);

    public static boolean cmatrixsolvefast(complex[][] a, int n, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsolvefast(error_msg, lcl_result, a, n, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsolvefast");
        return lcl_result.val;
    }
    public static boolean cmatrixsolvefast(complex[][] a, int n, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixsolvefast(error_msg, lcl_result, a, n, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixsolvefast");
        return lcl_result.val;
    }
            
    public static boolean cmatrixsolvefast(complex[][] a, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling cmatrixsolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixsolvefast(a, n, b, _params);
    
    }
    
    public static boolean cmatrixsolvefast(complex[][] a, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling cmatrixsolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixsolvefast(a, n, b, _params);
    
    }
    private static native int _jni_cmatrixsolvefast(mut_string error_msg, mut_boolean result, complex[][] a, int n, complex[] b, long _xparams);

    public static class cmatrixlusolvem_results
    {
        public complex[][] x;
        public densesolverreport rep;
    }
    public static cmatrixlusolvem_results cmatrixlusolvem(complex[][] lua, int[] p, int n, complex[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlusolvem(error_msg, lua, p, n, b, m, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlusolvem");
        cmatrixlusolvem_results ret_tuple = new cmatrixlusolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static cmatrixlusolvem_results cmatrixlusolvem(complex[][] lua, int[] p, int n, complex[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlusolvem(error_msg, lua, p, n, b, m, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlusolvem");
        cmatrixlusolvem_results ret_tuple = new cmatrixlusolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static cmatrixlusolvem_results cmatrixlusolvem(complex[][] lua, int[] p, complex[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixlusolvem(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        m = ap.cols(b);
        return cmatrixlusolvem(lua, p, n, b, m, _params);
    
    }
    
    public static cmatrixlusolvem_results cmatrixlusolvem(complex[][] lua, int[] p, complex[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixlusolvem(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        m = ap.cols(b);
        return cmatrixlusolvem(lua, p, n, b, m, _params);
    
    }
    private static native int _jni_cmatrixlusolvem(mut_string error_msg, complex[][] lua, int[] p, int n, complex[][] b, int m, rlc_complex2d x, mut_object rep, long _xparams);

    public static boolean cmatrixlusolvemfast(complex[][] lua, int[] p, int n, complex[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlusolvemfast(error_msg, lcl_result, lua, p, n, b, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlusolvemfast");
        return lcl_result.val;
    }
    public static boolean cmatrixlusolvemfast(complex[][] lua, int[] p, int n, complex[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlusolvemfast(error_msg, lcl_result, lua, p, n, b, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlusolvemfast");
        return lcl_result.val;
    }
            
    public static boolean cmatrixlusolvemfast(complex[][] lua, int[] p, complex[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixlusolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        m = ap.cols(b);
        return cmatrixlusolvemfast(lua, p, n, b, m, _params);
    
    }
    
    public static boolean cmatrixlusolvemfast(complex[][] lua, int[] p, complex[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixlusolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        m = ap.cols(b);
        return cmatrixlusolvemfast(lua, p, n, b, m, _params);
    
    }
    private static native int _jni_cmatrixlusolvemfast(mut_string error_msg, mut_boolean result, complex[][] lua, int[] p, int n, complex[][] b, int m, long _xparams);

    public static class cmatrixlusolve_results
    {
        public complex[] x;
        public densesolverreport rep;
    }
    public static cmatrixlusolve_results cmatrixlusolve(complex[][] lua, int[] p, int n, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlusolve(error_msg, lua, p, n, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlusolve");
        cmatrixlusolve_results ret_tuple = new cmatrixlusolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static cmatrixlusolve_results cmatrixlusolve(complex[][] lua, int[] p, int n, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlusolve(error_msg, lua, p, n, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlusolve");
        cmatrixlusolve_results ret_tuple = new cmatrixlusolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static cmatrixlusolve_results cmatrixlusolve(complex[][] lua, int[] p, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=b.length))
            throw new exception("Error while calling cmatrixlusolve(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        return cmatrixlusolve(lua, p, n, b, _params);
    
    }
    
    public static cmatrixlusolve_results cmatrixlusolve(complex[][] lua, int[] p, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length) || (ap.rows(lua)!=b.length))
            throw new exception("Error while calling cmatrixlusolve(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        return cmatrixlusolve(lua, p, n, b, _params);
    
    }
    private static native int _jni_cmatrixlusolve(mut_string error_msg, complex[][] lua, int[] p, int n, complex[] b, rlc_complex1d x, mut_object rep, long _xparams);

    public static boolean cmatrixlusolvefast(complex[][] lua, int[] p, int n, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlusolvefast(error_msg, lcl_result, lua, p, n, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlusolvefast");
        return lcl_result.val;
    }
    public static boolean cmatrixlusolvefast(complex[][] lua, int[] p, int n, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixlusolvefast(error_msg, lcl_result, lua, p, n, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixlusolvefast");
        return lcl_result.val;
    }
            
    public static boolean cmatrixlusolvefast(complex[][] lua, int[] p, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length))
            throw new exception("Error while calling cmatrixlusolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        return cmatrixlusolvefast(lua, p, n, b, _params);
    
    }
    
    public static boolean cmatrixlusolvefast(complex[][] lua, int[] p, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(lua)!=ap.cols(lua)) || (ap.rows(lua)!=p.length))
            throw new exception("Error while calling cmatrixlusolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(lua);
        return cmatrixlusolvefast(lua, p, n, b, _params);
    
    }
    private static native int _jni_cmatrixlusolvefast(mut_string error_msg, mut_boolean result, complex[][] lua, int[] p, int n, complex[] b, long _xparams);

    public static class cmatrixmixedsolvem_results
    {
        public complex[][] x;
        public densesolverreport rep;
    }
    public static cmatrixmixedsolvem_results cmatrixmixedsolvem(complex[][] a, complex[][] lua, int[] p, int n, complex[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixmixedsolvem(error_msg, a, lua, p, n, b, m, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixmixedsolvem");
        cmatrixmixedsolvem_results ret_tuple = new cmatrixmixedsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static cmatrixmixedsolvem_results cmatrixmixedsolvem(complex[][] a, complex[][] lua, int[] p, int n, complex[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixmixedsolvem(error_msg, a, lua, p, n, b, m, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixmixedsolvem");
        cmatrixmixedsolvem_results ret_tuple = new cmatrixmixedsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static cmatrixmixedsolvem_results cmatrixmixedsolvem(complex[][] a, complex[][] lua, int[] p, complex[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(lua)) || (ap.rows(a)!=ap.cols(lua)) || (ap.rows(a)!=p.length) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixmixedsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return cmatrixmixedsolvem(a, lua, p, n, b, m, _params);
    
    }
    
    public static cmatrixmixedsolvem_results cmatrixmixedsolvem(complex[][] a, complex[][] lua, int[] p, complex[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(lua)) || (ap.rows(a)!=ap.cols(lua)) || (ap.rows(a)!=p.length) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling cmatrixmixedsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return cmatrixmixedsolvem(a, lua, p, n, b, m, _params);
    
    }
    private static native int _jni_cmatrixmixedsolvem(mut_string error_msg, complex[][] a, complex[][] lua, int[] p, int n, complex[][] b, int m, rlc_complex2d x, mut_object rep, long _xparams);

    public static class cmatrixmixedsolve_results
    {
        public complex[] x;
        public densesolverreport rep;
    }
    public static cmatrixmixedsolve_results cmatrixmixedsolve(complex[][] a, complex[][] lua, int[] p, int n, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixmixedsolve(error_msg, a, lua, p, n, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixmixedsolve");
        cmatrixmixedsolve_results ret_tuple = new cmatrixmixedsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static cmatrixmixedsolve_results cmatrixmixedsolve(complex[][] a, complex[][] lua, int[] p, int n, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixmixedsolve(error_msg, a, lua, p, n, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixmixedsolve");
        cmatrixmixedsolve_results ret_tuple = new cmatrixmixedsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static cmatrixmixedsolve_results cmatrixmixedsolve(complex[][] a, complex[][] lua, int[] p, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(lua)) || (ap.rows(a)!=ap.cols(lua)) || (ap.rows(a)!=p.length) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling cmatrixmixedsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixmixedsolve(a, lua, p, n, b, _params);
    
    }
    
    public static cmatrixmixedsolve_results cmatrixmixedsolve(complex[][] a, complex[][] lua, int[] p, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(lua)) || (ap.rows(a)!=ap.cols(lua)) || (ap.rows(a)!=p.length) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling cmatrixmixedsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixmixedsolve(a, lua, p, n, b, _params);
    
    }
    private static native int _jni_cmatrixmixedsolve(mut_string error_msg, complex[][] a, complex[][] lua, int[] p, int n, complex[] b, rlc_complex1d x, mut_object rep, long _xparams);

    public static class spdmatrixsolvem_results
    {
        public double[][] x;
        public densesolverreport rep;
    }
    public static spdmatrixsolvem_results spdmatrixsolvem(double[][] a, int n, boolean isupper, double[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixsolvem(error_msg, a, n, isupper, b, m, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixsolvem");
        spdmatrixsolvem_results ret_tuple = new spdmatrixsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spdmatrixsolvem_results spdmatrixsolvem(double[][] a, int n, boolean isupper, double[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixsolvem(error_msg, a, n, isupper, b, m, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixsolvem");
        spdmatrixsolvem_results ret_tuple = new spdmatrixsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spdmatrixsolvem_results spdmatrixsolvem(double[][] a, boolean isupper, double[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling spdmatrixsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return spdmatrixsolvem(a, n, isupper, b, m, _params);
    
    }
    
    public static spdmatrixsolvem_results spdmatrixsolvem(double[][] a, boolean isupper, double[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling spdmatrixsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return spdmatrixsolvem(a, n, isupper, b, m, _params);
    
    }
    private static native int _jni_spdmatrixsolvem(mut_string error_msg, double[][] a, int n, boolean isupper, double[][] b, int m, rlc_double2d x, mut_object rep, long _xparams);

    public static boolean spdmatrixsolvemfast(double[][] a, int n, boolean isupper, double[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixsolvemfast(error_msg, lcl_result, a, n, isupper, b, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixsolvemfast");
        return lcl_result.val;
    }
    public static boolean spdmatrixsolvemfast(double[][] a, int n, boolean isupper, double[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixsolvemfast(error_msg, lcl_result, a, n, isupper, b, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixsolvemfast");
        return lcl_result.val;
    }
            
    public static boolean spdmatrixsolvemfast(double[][] a, boolean isupper, double[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling spdmatrixsolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return spdmatrixsolvemfast(a, n, isupper, b, m, _params);
    
    }
    
    public static boolean spdmatrixsolvemfast(double[][] a, boolean isupper, double[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling spdmatrixsolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return spdmatrixsolvemfast(a, n, isupper, b, m, _params);
    
    }
    private static native int _jni_spdmatrixsolvemfast(mut_string error_msg, mut_boolean result, double[][] a, int n, boolean isupper, double[][] b, int m, long _xparams);

    public static class spdmatrixsolve_results
    {
        public double[] x;
        public densesolverreport rep;
    }
    public static spdmatrixsolve_results spdmatrixsolve(double[][] a, int n, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixsolve(error_msg, a, n, isupper, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixsolve");
        spdmatrixsolve_results ret_tuple = new spdmatrixsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spdmatrixsolve_results spdmatrixsolve(double[][] a, int n, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixsolve(error_msg, a, n, isupper, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixsolve");
        spdmatrixsolve_results ret_tuple = new spdmatrixsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spdmatrixsolve_results spdmatrixsolve(double[][] a, boolean isupper, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling spdmatrixsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixsolve(a, n, isupper, b, _params);
    
    }
    
    public static spdmatrixsolve_results spdmatrixsolve(double[][] a, boolean isupper, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling spdmatrixsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixsolve(a, n, isupper, b, _params);
    
    }
    private static native int _jni_spdmatrixsolve(mut_string error_msg, double[][] a, int n, boolean isupper, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    public static boolean spdmatrixsolvefast(double[][] a, int n, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixsolvefast(error_msg, lcl_result, a, n, isupper, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixsolvefast");
        return lcl_result.val;
    }
    public static boolean spdmatrixsolvefast(double[][] a, int n, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixsolvefast(error_msg, lcl_result, a, n, isupper, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixsolvefast");
        return lcl_result.val;
    }
            
    public static boolean spdmatrixsolvefast(double[][] a, boolean isupper, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling spdmatrixsolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixsolvefast(a, n, isupper, b, _params);
    
    }
    
    public static boolean spdmatrixsolvefast(double[][] a, boolean isupper, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling spdmatrixsolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixsolvefast(a, n, isupper, b, _params);
    
    }
    private static native int _jni_spdmatrixsolvefast(mut_string error_msg, mut_boolean result, double[][] a, int n, boolean isupper, double[] b, long _xparams);

    public static class spdmatrixcholeskysolvem_results
    {
        public double[][] x;
        public densesolverreport rep;
    }
    public static spdmatrixcholeskysolvem_results spdmatrixcholeskysolvem(double[][] cha, int n, boolean isupper, double[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskysolvem(error_msg, cha, n, isupper, b, m, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskysolvem");
        spdmatrixcholeskysolvem_results ret_tuple = new spdmatrixcholeskysolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spdmatrixcholeskysolvem_results spdmatrixcholeskysolvem(double[][] cha, int n, boolean isupper, double[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskysolvem(error_msg, cha, n, isupper, b, m, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskysolvem");
        spdmatrixcholeskysolvem_results ret_tuple = new spdmatrixcholeskysolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spdmatrixcholeskysolvem_results spdmatrixcholeskysolvem(double[][] cha, boolean isupper, double[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=ap.rows(b)))
            throw new exception("Error while calling spdmatrixcholeskysolvem(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        m = ap.cols(b);
        return spdmatrixcholeskysolvem(cha, n, isupper, b, m, _params);
    
    }
    
    public static spdmatrixcholeskysolvem_results spdmatrixcholeskysolvem(double[][] cha, boolean isupper, double[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=ap.rows(b)))
            throw new exception("Error while calling spdmatrixcholeskysolvem(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        m = ap.cols(b);
        return spdmatrixcholeskysolvem(cha, n, isupper, b, m, _params);
    
    }
    private static native int _jni_spdmatrixcholeskysolvem(mut_string error_msg, double[][] cha, int n, boolean isupper, double[][] b, int m, rlc_double2d x, mut_object rep, long _xparams);

    public static boolean spdmatrixcholeskysolvemfast(double[][] cha, int n, boolean isupper, double[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskysolvemfast(error_msg, lcl_result, cha, n, isupper, b, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskysolvemfast");
        return lcl_result.val;
    }
    public static boolean spdmatrixcholeskysolvemfast(double[][] cha, int n, boolean isupper, double[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskysolvemfast(error_msg, lcl_result, cha, n, isupper, b, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskysolvemfast");
        return lcl_result.val;
    }
            
    public static boolean spdmatrixcholeskysolvemfast(double[][] cha, boolean isupper, double[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=ap.rows(b)))
            throw new exception("Error while calling spdmatrixcholeskysolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        m = ap.cols(b);
        return spdmatrixcholeskysolvemfast(cha, n, isupper, b, m, _params);
    
    }
    
    public static boolean spdmatrixcholeskysolvemfast(double[][] cha, boolean isupper, double[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=ap.rows(b)))
            throw new exception("Error while calling spdmatrixcholeskysolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        m = ap.cols(b);
        return spdmatrixcholeskysolvemfast(cha, n, isupper, b, m, _params);
    
    }
    private static native int _jni_spdmatrixcholeskysolvemfast(mut_string error_msg, mut_boolean result, double[][] cha, int n, boolean isupper, double[][] b, int m, long _xparams);

    public static class spdmatrixcholeskysolve_results
    {
        public double[] x;
        public densesolverreport rep;
    }
    public static spdmatrixcholeskysolve_results spdmatrixcholeskysolve(double[][] cha, int n, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskysolve(error_msg, cha, n, isupper, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskysolve");
        spdmatrixcholeskysolve_results ret_tuple = new spdmatrixcholeskysolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spdmatrixcholeskysolve_results spdmatrixcholeskysolve(double[][] cha, int n, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskysolve(error_msg, cha, n, isupper, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskysolve");
        spdmatrixcholeskysolve_results ret_tuple = new spdmatrixcholeskysolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spdmatrixcholeskysolve_results spdmatrixcholeskysolve(double[][] cha, boolean isupper, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=b.length))
            throw new exception("Error while calling spdmatrixcholeskysolve(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        return spdmatrixcholeskysolve(cha, n, isupper, b, _params);
    
    }
    
    public static spdmatrixcholeskysolve_results spdmatrixcholeskysolve(double[][] cha, boolean isupper, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=b.length))
            throw new exception("Error while calling spdmatrixcholeskysolve(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        return spdmatrixcholeskysolve(cha, n, isupper, b, _params);
    
    }
    private static native int _jni_spdmatrixcholeskysolve(mut_string error_msg, double[][] cha, int n, boolean isupper, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    public static boolean spdmatrixcholeskysolvefast(double[][] cha, int n, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskysolvefast(error_msg, lcl_result, cha, n, isupper, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskysolvefast");
        return lcl_result.val;
    }
    public static boolean spdmatrixcholeskysolvefast(double[][] cha, int n, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskysolvefast(error_msg, lcl_result, cha, n, isupper, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskysolvefast");
        return lcl_result.val;
    }
            
    public static boolean spdmatrixcholeskysolvefast(double[][] cha, boolean isupper, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=b.length))
            throw new exception("Error while calling spdmatrixcholeskysolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        return spdmatrixcholeskysolvefast(cha, n, isupper, b, _params);
    
    }
    
    public static boolean spdmatrixcholeskysolvefast(double[][] cha, boolean isupper, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=b.length))
            throw new exception("Error while calling spdmatrixcholeskysolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        return spdmatrixcholeskysolvefast(cha, n, isupper, b, _params);
    
    }
    private static native int _jni_spdmatrixcholeskysolvefast(mut_string error_msg, mut_boolean result, double[][] cha, int n, boolean isupper, double[] b, long _xparams);

    public static class hpdmatrixsolvem_results
    {
        public complex[][] x;
        public densesolverreport rep;
    }
    public static hpdmatrixsolvem_results hpdmatrixsolvem(complex[][] a, int n, boolean isupper, complex[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixsolvem(error_msg, a, n, isupper, b, m, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixsolvem");
        hpdmatrixsolvem_results ret_tuple = new hpdmatrixsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static hpdmatrixsolvem_results hpdmatrixsolvem(complex[][] a, int n, boolean isupper, complex[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixsolvem(error_msg, a, n, isupper, b, m, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixsolvem");
        hpdmatrixsolvem_results ret_tuple = new hpdmatrixsolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static hpdmatrixsolvem_results hpdmatrixsolvem(complex[][] a, boolean isupper, complex[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling hpdmatrixsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return hpdmatrixsolvem(a, n, isupper, b, m, _params);
    
    }
    
    public static hpdmatrixsolvem_results hpdmatrixsolvem(complex[][] a, boolean isupper, complex[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling hpdmatrixsolvem(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return hpdmatrixsolvem(a, n, isupper, b, m, _params);
    
    }
    private static native int _jni_hpdmatrixsolvem(mut_string error_msg, complex[][] a, int n, boolean isupper, complex[][] b, int m, rlc_complex2d x, mut_object rep, long _xparams);

    public static boolean hpdmatrixsolvemfast(complex[][] a, int n, boolean isupper, complex[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixsolvemfast(error_msg, lcl_result, a, n, isupper, b, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixsolvemfast");
        return lcl_result.val;
    }
    public static boolean hpdmatrixsolvemfast(complex[][] a, int n, boolean isupper, complex[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixsolvemfast(error_msg, lcl_result, a, n, isupper, b, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixsolvemfast");
        return lcl_result.val;
    }
            
    public static boolean hpdmatrixsolvemfast(complex[][] a, boolean isupper, complex[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling hpdmatrixsolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return hpdmatrixsolvemfast(a, n, isupper, b, m, _params);
    
    }
    
    public static boolean hpdmatrixsolvemfast(complex[][] a, boolean isupper, complex[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=ap.rows(b)))
            throw new exception("Error while calling hpdmatrixsolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        m = ap.cols(b);
        return hpdmatrixsolvemfast(a, n, isupper, b, m, _params);
    
    }
    private static native int _jni_hpdmatrixsolvemfast(mut_string error_msg, mut_boolean result, complex[][] a, int n, boolean isupper, complex[][] b, int m, long _xparams);

    public static class hpdmatrixsolve_results
    {
        public complex[] x;
        public densesolverreport rep;
    }
    public static hpdmatrixsolve_results hpdmatrixsolve(complex[][] a, int n, boolean isupper, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixsolve(error_msg, a, n, isupper, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixsolve");
        hpdmatrixsolve_results ret_tuple = new hpdmatrixsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static hpdmatrixsolve_results hpdmatrixsolve(complex[][] a, int n, boolean isupper, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixsolve(error_msg, a, n, isupper, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixsolve");
        hpdmatrixsolve_results ret_tuple = new hpdmatrixsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static hpdmatrixsolve_results hpdmatrixsolve(complex[][] a, boolean isupper, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling hpdmatrixsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return hpdmatrixsolve(a, n, isupper, b, _params);
    
    }
    
    public static hpdmatrixsolve_results hpdmatrixsolve(complex[][] a, boolean isupper, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling hpdmatrixsolve(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return hpdmatrixsolve(a, n, isupper, b, _params);
    
    }
    private static native int _jni_hpdmatrixsolve(mut_string error_msg, complex[][] a, int n, boolean isupper, complex[] b, rlc_complex1d x, mut_object rep, long _xparams);

    public static boolean hpdmatrixsolvefast(complex[][] a, int n, boolean isupper, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixsolvefast(error_msg, lcl_result, a, n, isupper, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixsolvefast");
        return lcl_result.val;
    }
    public static boolean hpdmatrixsolvefast(complex[][] a, int n, boolean isupper, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixsolvefast(error_msg, lcl_result, a, n, isupper, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixsolvefast");
        return lcl_result.val;
    }
            
    public static boolean hpdmatrixsolvefast(complex[][] a, boolean isupper, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling hpdmatrixsolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return hpdmatrixsolvefast(a, n, isupper, b, _params);
    
    }
    
    public static boolean hpdmatrixsolvefast(complex[][] a, boolean isupper, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=b.length))
            throw new exception("Error while calling hpdmatrixsolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return hpdmatrixsolvefast(a, n, isupper, b, _params);
    
    }
    private static native int _jni_hpdmatrixsolvefast(mut_string error_msg, mut_boolean result, complex[][] a, int n, boolean isupper, complex[] b, long _xparams);

    public static class hpdmatrixcholeskysolvem_results
    {
        public complex[][] x;
        public densesolverreport rep;
    }
    public static hpdmatrixcholeskysolvem_results hpdmatrixcholeskysolvem(complex[][] cha, int n, boolean isupper, complex[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskysolvem(error_msg, cha, n, isupper, b, m, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskysolvem");
        hpdmatrixcholeskysolvem_results ret_tuple = new hpdmatrixcholeskysolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static hpdmatrixcholeskysolvem_results hpdmatrixcholeskysolvem(complex[][] cha, int n, boolean isupper, complex[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex2d lcl_x = new rlc_complex2d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskysolvem(error_msg, cha, n, isupper, b, m, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskysolvem");
        hpdmatrixcholeskysolvem_results ret_tuple = new hpdmatrixcholeskysolvem_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static hpdmatrixcholeskysolvem_results hpdmatrixcholeskysolvem(complex[][] cha, boolean isupper, complex[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=ap.rows(b)))
            throw new exception("Error while calling hpdmatrixcholeskysolvem(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        m = ap.cols(b);
        return hpdmatrixcholeskysolvem(cha, n, isupper, b, m, _params);
    
    }
    
    public static hpdmatrixcholeskysolvem_results hpdmatrixcholeskysolvem(complex[][] cha, boolean isupper, complex[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=ap.rows(b)))
            throw new exception("Error while calling hpdmatrixcholeskysolvem(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        m = ap.cols(b);
        return hpdmatrixcholeskysolvem(cha, n, isupper, b, m, _params);
    
    }
    private static native int _jni_hpdmatrixcholeskysolvem(mut_string error_msg, complex[][] cha, int n, boolean isupper, complex[][] b, int m, rlc_complex2d x, mut_object rep, long _xparams);

    public static boolean hpdmatrixcholeskysolvemfast(complex[][] cha, int n, boolean isupper, complex[][] b, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskysolvemfast(error_msg, lcl_result, cha, n, isupper, b, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskysolvemfast");
        return lcl_result.val;
    }
    public static boolean hpdmatrixcholeskysolvemfast(complex[][] cha, int n, boolean isupper, complex[][] b, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskysolvemfast(error_msg, lcl_result, cha, n, isupper, b, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskysolvemfast");
        return lcl_result.val;
    }
            
    public static boolean hpdmatrixcholeskysolvemfast(complex[][] cha, boolean isupper, complex[][] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=ap.rows(b)))
            throw new exception("Error while calling hpdmatrixcholeskysolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        m = ap.cols(b);
        return hpdmatrixcholeskysolvemfast(cha, n, isupper, b, m, _params);
    
    }
    
    public static boolean hpdmatrixcholeskysolvemfast(complex[][] cha, boolean isupper, complex[][] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=ap.rows(b)))
            throw new exception("Error while calling hpdmatrixcholeskysolvemfast(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        m = ap.cols(b);
        return hpdmatrixcholeskysolvemfast(cha, n, isupper, b, m, _params);
    
    }
    private static native int _jni_hpdmatrixcholeskysolvemfast(mut_string error_msg, mut_boolean result, complex[][] cha, int n, boolean isupper, complex[][] b, int m, long _xparams);

    public static class hpdmatrixcholeskysolve_results
    {
        public complex[] x;
        public densesolverreport rep;
    }
    public static hpdmatrixcholeskysolve_results hpdmatrixcholeskysolve(complex[][] cha, int n, boolean isupper, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskysolve(error_msg, cha, n, isupper, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskysolve");
        hpdmatrixcholeskysolve_results ret_tuple = new hpdmatrixcholeskysolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static hpdmatrixcholeskysolve_results hpdmatrixcholeskysolve(complex[][] cha, int n, boolean isupper, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_x = new rlc_complex1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskysolve(error_msg, cha, n, isupper, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskysolve");
        hpdmatrixcholeskysolve_results ret_tuple = new hpdmatrixcholeskysolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static hpdmatrixcholeskysolve_results hpdmatrixcholeskysolve(complex[][] cha, boolean isupper, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=b.length))
            throw new exception("Error while calling hpdmatrixcholeskysolve(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        return hpdmatrixcholeskysolve(cha, n, isupper, b, _params);
    
    }
    
    public static hpdmatrixcholeskysolve_results hpdmatrixcholeskysolve(complex[][] cha, boolean isupper, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=b.length))
            throw new exception("Error while calling hpdmatrixcholeskysolve(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        return hpdmatrixcholeskysolve(cha, n, isupper, b, _params);
    
    }
    private static native int _jni_hpdmatrixcholeskysolve(mut_string error_msg, complex[][] cha, int n, boolean isupper, complex[] b, rlc_complex1d x, mut_object rep, long _xparams);

    public static boolean hpdmatrixcholeskysolvefast(complex[][] cha, int n, boolean isupper, complex[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskysolvefast(error_msg, lcl_result, cha, n, isupper, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskysolvefast");
        return lcl_result.val;
    }
    public static boolean hpdmatrixcholeskysolvefast(complex[][] cha, int n, boolean isupper, complex[] b) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskysolvefast(error_msg, lcl_result, cha, n, isupper, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskysolvefast");
        return lcl_result.val;
    }
            
    public static boolean hpdmatrixcholeskysolvefast(complex[][] cha, boolean isupper, complex[] b, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=b.length))
            throw new exception("Error while calling hpdmatrixcholeskysolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        return hpdmatrixcholeskysolvefast(cha, n, isupper, b, _params);
    
    }
    
    public static boolean hpdmatrixcholeskysolvefast(complex[][] cha, boolean isupper, complex[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(cha)!=ap.cols(cha)) || (ap.rows(cha)!=b.length))
            throw new exception("Error while calling hpdmatrixcholeskysolvefast(): looks like one of arguments has wrong size");
        n = ap.rows(cha);
        return hpdmatrixcholeskysolvefast(cha, n, isupper, b, _params);
    
    }
    private static native int _jni_hpdmatrixcholeskysolvefast(mut_string error_msg, mut_boolean result, complex[][] cha, int n, boolean isupper, complex[] b, long _xparams);

    public static class rmatrixsolvels_results
    {
        public double[] x;
        public densesolverlsreport rep;
    }
    public static rmatrixsolvels_results rmatrixsolvels(double[][] a, int nrows, int ncols, double[] b, double threshold, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolvels(error_msg, a, nrows, ncols, b, threshold, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolvels");
        rmatrixsolvels_results ret_tuple = new rmatrixsolvels_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverlsreport)lcl_rep.val;
        return ret_tuple;
    }
    public static rmatrixsolvels_results rmatrixsolvels(double[][] a, int nrows, int ncols, double[] b, double threshold) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixsolvels(error_msg, a, nrows, ncols, b, threshold, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixsolvels");
        rmatrixsolvels_results ret_tuple = new rmatrixsolvels_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (densesolverlsreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static rmatrixsolvels_results rmatrixsolvels(double[][] a, double[] b, double threshold, alglib.xparams _params) throws alglib.exception
    {
        int nrows;
        int ncols;
        if( (ap.rows(a)!=b.length))
            throw new exception("Error while calling rmatrixsolvels(): looks like one of arguments has wrong size");
        nrows = ap.rows(a);
        ncols = ap.cols(a);
        return rmatrixsolvels(a, nrows, ncols, b, threshold, _params);
    
    }
    
    public static rmatrixsolvels_results rmatrixsolvels(double[][] a, double[] b, double threshold) throws alglib.exception
    {
        alglib.xparams _params = null;
        int nrows;
        int ncols;
        if( (ap.rows(a)!=b.length))
            throw new exception("Error while calling rmatrixsolvels(): looks like one of arguments has wrong size");
        nrows = ap.rows(a);
        ncols = ap.cols(a);
        return rmatrixsolvels(a, nrows, ncols, b, threshold, _params);
    
    }
    private static native int _jni_rmatrixsolvels(mut_string error_msg, double[][] a, int nrows, int ncols, double[] b, double threshold, rlc_double1d x, mut_object rep, long _xparams);

    
    
    //
    // Subpackage fbls
    //
    
    
    
    //
    // Subpackage iterativesparse
    //
    

        public static class sparsesolverreport extends alglibobject
        {
            public int terminationtype;
            public int nmv;
            public int iterationscount;
            public double r2;
            public alglibobject make_copy()
            {
                sparsesolverreport dst = new sparsesolverreport();
                dst.terminationtype = terminationtype;
                dst.nmv = nmv;
                dst.iterationscount = iterationscount;
                dst.r2 = r2;
                return dst;
            }
        }


    public static class sparsesolverstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected sparsesolverstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected sparsesolverstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected sparsesolverstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new sparsesolverstate(0);
            return new sparsesolverstate(_jni_x_obj_copy_sparsesolverstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_sparsesolverstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_sparsesolverstate(long x);
    private static native void _jni_x_obj_free_sparsesolverstate(long x);

    public static class sparsesolvesymmetricgmres_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsesolvesymmetricgmres_results sparsesolvesymmetricgmres(sparsematrix a, boolean isupper, double[] b, int k, double epsf, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvesymmetricgmres() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvesymmetricgmres() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolvesymmetricgmres(error_msg, a.get_ptr(), isupper, b, k, epsf, maxits, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolvesymmetricgmres");
        sparsesolvesymmetricgmres_results ret_tuple = new sparsesolvesymmetricgmres_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsesolvesymmetricgmres_results sparsesolvesymmetricgmres(sparsematrix a, boolean isupper, double[] b, int k, double epsf, int maxits) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvesymmetricgmres() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvesymmetricgmres() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolvesymmetricgmres(error_msg, a.get_ptr(), isupper, b, k, epsf, maxits, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolvesymmetricgmres");
        sparsesolvesymmetricgmres_results ret_tuple = new sparsesolvesymmetricgmres_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_sparsesolvesymmetricgmres(mut_string error_msg, long a, boolean isupper, double[] b, int k, double epsf, int maxits, rlc_double1d x, mut_object rep, long _xparams);

    public static class sparsesolvegmres_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsesolvegmres_results sparsesolvegmres(sparsematrix a, double[] b, int k, double epsf, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvegmres() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvegmres() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolvegmres(error_msg, a.get_ptr(), b, k, epsf, maxits, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolvegmres");
        sparsesolvegmres_results ret_tuple = new sparsesolvegmres_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsesolvegmres_results sparsesolvegmres(sparsematrix a, double[] b, int k, double epsf, int maxits) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvegmres() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvegmres() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolvegmres(error_msg, a.get_ptr(), b, k, epsf, maxits, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolvegmres");
        sparsesolvegmres_results ret_tuple = new sparsesolvegmres_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_sparsesolvegmres(mut_string error_msg, long a, double[] b, int k, double epsf, int maxits, rlc_double1d x, mut_object rep, long _xparams);

    public static sparsesolverstate sparsesolvercreate(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolvercreate(error_msg, n, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolvercreate");
        return new sparsesolverstate(lcl_state.val);
    }
    public static sparsesolverstate sparsesolvercreate(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolvercreate(error_msg, n, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolvercreate");
        return new sparsesolverstate(lcl_state.val);
    }
    private static native int _jni_sparsesolvercreate(mut_string error_msg, int n, mut_long state, long _xparams);

    public static void sparsesolversetalgogmres(sparsesolverstate state, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetalgogmres() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetalgogmres() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversetalgogmres(error_msg, state.get_ptr(), k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversetalgogmres");
    }
    public static void sparsesolversetalgogmres(sparsesolverstate state, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetalgogmres() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetalgogmres() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversetalgogmres(error_msg, state.get_ptr(), k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversetalgogmres");
    }
    private static native int _jni_sparsesolversetalgogmres(mut_string error_msg, long state, int k, long _xparams);

    public static void sparsesolversetstartingpoint(sparsesolverstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetstartingpoint() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetstartingpoint() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversetstartingpoint(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversetstartingpoint");
    }
    public static void sparsesolversetstartingpoint(sparsesolverstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetstartingpoint() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetstartingpoint() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversetstartingpoint(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversetstartingpoint");
    }
    private static native int _jni_sparsesolversetstartingpoint(mut_string error_msg, long state, double[] x, long _xparams);

    public static void sparsesolversetcond(sparsesolverstate state, double epsf, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversetcond(error_msg, state.get_ptr(), epsf, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversetcond");
    }
    public static void sparsesolversetcond(sparsesolverstate state, double epsf, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversetcond(error_msg, state.get_ptr(), epsf, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversetcond");
    }
    private static native int _jni_sparsesolversetcond(mut_string error_msg, long state, double epsf, int maxits, long _xparams);

    public static void sparsesolversolvesymmetric(sparsesolverstate state, sparsematrix a, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversolvesymmetric() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversolvesymmetric() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolversolvesymmetric() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolversolvesymmetric() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversolvesymmetric(error_msg, state.get_ptr(), a.get_ptr(), isupper, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversolvesymmetric");
    }
    public static void sparsesolversolvesymmetric(sparsesolverstate state, sparsematrix a, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversolvesymmetric() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversolvesymmetric() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolversolvesymmetric() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolversolvesymmetric() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversolvesymmetric(error_msg, state.get_ptr(), a.get_ptr(), isupper, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversolvesymmetric");
    }
    private static native int _jni_sparsesolversolvesymmetric(mut_string error_msg, long state, long a, boolean isupper, double[] b, long _xparams);

    public static void sparsesolversolve(sparsesolverstate state, sparsematrix a, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversolve() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversolve() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolversolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolversolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversolve(error_msg, state.get_ptr(), a.get_ptr(), b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversolve");
    }
    public static void sparsesolversolve(sparsesolverstate state, sparsematrix a, double[] b) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversolve() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversolve() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolversolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolversolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversolve(error_msg, state.get_ptr(), a.get_ptr(), b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversolve");
    }
    private static native int _jni_sparsesolversolve(mut_string error_msg, long state, long a, double[] b, long _xparams);

    public static class sparsesolverresults_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsesolverresults_results sparsesolverresults(sparsesolverstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolverresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolverresults");
        sparsesolverresults_results ret_tuple = new sparsesolverresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsesolverresults_results sparsesolverresults(sparsesolverstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolverresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolverresults");
        sparsesolverresults_results ret_tuple = new sparsesolverresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_sparsesolverresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static void sparsesolversetxrep(sparsesolverstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversetxrep");
    }
    public static void sparsesolversetxrep(sparsesolverstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolversetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolversetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolversetxrep");
    }
    private static native int _jni_sparsesolversetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void sparsesolveroocstart(sparsesolverstate state, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocstart() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocstart() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocstart(error_msg, state.get_ptr(), b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocstart");
    }
    public static void sparsesolveroocstart(sparsesolverstate state, double[] b) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocstart() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocstart() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocstart(error_msg, state.get_ptr(), b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocstart");
    }
    private static native int _jni_sparsesolveroocstart(mut_string error_msg, long state, double[] b, long _xparams);

    public static boolean sparsesolverooccontinue(sparsesolverstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverooccontinue() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverooccontinue() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolverooccontinue(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolverooccontinue");
        return lcl_result.val;
    }
    public static boolean sparsesolverooccontinue(sparsesolverstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverooccontinue() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverooccontinue() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolverooccontinue(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolverooccontinue");
        return lcl_result.val;
    }
    private static native int _jni_sparsesolverooccontinue(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static int sparsesolveroocgetrequestinfo(sparsesolverstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_requesttype = new mut_int();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestinfo() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestinfo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocgetrequestinfo(error_msg, state.get_ptr(), lcl_requesttype, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocgetrequestinfo");
        return lcl_requesttype.val;
    }
    public static int sparsesolveroocgetrequestinfo(sparsesolverstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_requesttype = new mut_int();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestinfo() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestinfo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocgetrequestinfo(error_msg, state.get_ptr(), lcl_requesttype, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocgetrequestinfo");
        return lcl_requesttype.val;
    }
    private static native int _jni_sparsesolveroocgetrequestinfo(mut_string error_msg, long state, mut_int requesttype, long _xparams);

    public static double[] sparsesolveroocgetrequestdata(sparsesolverstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestdata() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestdata() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocgetrequestdata(error_msg, state.get_ptr(), lcl_x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocgetrequestdata");
        return lcl_x.val;
    }
    public static double[] sparsesolveroocgetrequestdata(sparsesolverstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestdata() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestdata() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocgetrequestdata(error_msg, state.get_ptr(), lcl_x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocgetrequestdata");
        return lcl_x.val;
    }
    private static native int _jni_sparsesolveroocgetrequestdata(mut_string error_msg, long state, rlc_double1d x, long _xparams);

    public static double sparsesolveroocgetrequestdata1(sparsesolverstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_v = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestdata1() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestdata1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocgetrequestdata1(error_msg, state.get_ptr(), lcl_v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocgetrequestdata1");
        return lcl_v.val;
    }
    public static double sparsesolveroocgetrequestdata1(sparsesolverstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_v = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestdata1() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocgetrequestdata1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocgetrequestdata1(error_msg, state.get_ptr(), lcl_v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocgetrequestdata1");
        return lcl_v.val;
    }
    private static native int _jni_sparsesolveroocgetrequestdata1(mut_string error_msg, long state, mut_double v, long _xparams);

    public static void sparsesolveroocsendresult(sparsesolverstate state, double[] ax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocsendresult() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocsendresult() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocsendresult(error_msg, state.get_ptr(), ax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocsendresult");
    }
    public static void sparsesolveroocsendresult(sparsesolverstate state, double[] ax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocsendresult() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocsendresult() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocsendresult(error_msg, state.get_ptr(), ax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocsendresult");
    }
    private static native int _jni_sparsesolveroocsendresult(mut_string error_msg, long state, double[] ax, long _xparams);

    public static class sparsesolveroocstop_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsesolveroocstop_results sparsesolveroocstop(sparsesolverstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocstop() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocstop() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocstop(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocstop");
        sparsesolveroocstop_results ret_tuple = new sparsesolveroocstop_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsesolveroocstop_results sparsesolveroocstop(sparsesolverstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocstop() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolveroocstop() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolveroocstop(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolveroocstop");
        sparsesolveroocstop_results ret_tuple = new sparsesolveroocstop_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_sparsesolveroocstop(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static void sparsesolverrequesttermination(sparsesolverstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolverrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolverrequesttermination");
    }
    public static void sparsesolverrequesttermination(sparsesolverstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of sparsesolverrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolverrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolverrequesttermination");
    }
    private static native int _jni_sparsesolverrequesttermination(mut_string error_msg, long state, long _xparams);

    
    
    //
    // Subpackage lincg
    //
    

    public static class lincgstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected lincgstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected lincgstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected lincgstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new lincgstate(0);
            return new lincgstate(_jni_x_obj_copy_lincgstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_lincgstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_lincgstate(long x);
    private static native void _jni_x_obj_free_lincgstate(long x);


        public static class lincgreport extends alglibobject
        {
            public int iterationscount;
            public int nmv;
            public int terminationtype;
            public double r2;
            public alglibobject make_copy()
            {
                lincgreport dst = new lincgreport();
                dst.iterationscount = iterationscount;
                dst.nmv = nmv;
                dst.terminationtype = terminationtype;
                dst.r2 = r2;
                return dst;
            }
        }

    public static lincgstate lincgcreate(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgcreate(error_msg, n, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgcreate");
        return new lincgstate(lcl_state.val);
    }
    public static lincgstate lincgcreate(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgcreate(error_msg, n, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgcreate");
        return new lincgstate(lcl_state.val);
    }
    private static native int _jni_lincgcreate(mut_string error_msg, int n, mut_long state, long _xparams);

    public static void lincgsetstartingpoint(lincgstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetstartingpoint() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetstartingpoint() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetstartingpoint(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetstartingpoint");
    }
    public static void lincgsetstartingpoint(lincgstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetstartingpoint() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetstartingpoint() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetstartingpoint(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetstartingpoint");
    }
    private static native int _jni_lincgsetstartingpoint(mut_string error_msg, long state, double[] x, long _xparams);

    public static void lincgsetprecunit(lincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetprecunit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetprecunit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetprecunit(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetprecunit");
    }
    public static void lincgsetprecunit(lincgstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetprecunit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetprecunit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetprecunit(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetprecunit");
    }
    private static native int _jni_lincgsetprecunit(mut_string error_msg, long state, long _xparams);

    public static void lincgsetprecdiag(lincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetprecdiag(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetprecdiag");
    }
    public static void lincgsetprecdiag(lincgstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetprecdiag(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetprecdiag");
    }
    private static native int _jni_lincgsetprecdiag(mut_string error_msg, long state, long _xparams);

    public static void lincgsetcond(lincgstate state, double epsf, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetcond(error_msg, state.get_ptr(), epsf, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetcond");
    }
    public static void lincgsetcond(lincgstate state, double epsf, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetcond(error_msg, state.get_ptr(), epsf, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetcond");
    }
    private static native int _jni_lincgsetcond(mut_string error_msg, long state, double epsf, int maxits, long _xparams);

    public static void lincgsolvesparse(lincgstate state, sparsematrix a, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsolvesparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsolvesparse() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of lincgsolvesparse() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of lincgsolvesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsolvesparse(error_msg, state.get_ptr(), a.get_ptr(), isupper, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsolvesparse");
    }
    public static void lincgsolvesparse(lincgstate state, sparsematrix a, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsolvesparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsolvesparse() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of lincgsolvesparse() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of lincgsolvesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsolvesparse(error_msg, state.get_ptr(), a.get_ptr(), isupper, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsolvesparse");
    }
    private static native int _jni_lincgsolvesparse(mut_string error_msg, long state, long a, boolean isupper, double[] b, long _xparams);

    public static class lincgresults_results
    {
        public double[] x;
        public lincgreport rep;
    }
    public static lincgresults_results lincgresults(lincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgresults");
        lincgresults_results ret_tuple = new lincgresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (lincgreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lincgresults_results lincgresults(lincgstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgresults");
        lincgresults_results ret_tuple = new lincgresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (lincgreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_lincgresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static void lincgsetrestartfreq(lincgstate state, int srf, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetrestartfreq() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetrestartfreq() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetrestartfreq(error_msg, state.get_ptr(), srf, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetrestartfreq");
    }
    public static void lincgsetrestartfreq(lincgstate state, int srf) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetrestartfreq() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetrestartfreq() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetrestartfreq(error_msg, state.get_ptr(), srf, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetrestartfreq");
    }
    private static native int _jni_lincgsetrestartfreq(mut_string error_msg, long state, int srf, long _xparams);

    public static void lincgsetrupdatefreq(lincgstate state, int freq, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetrupdatefreq() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetrupdatefreq() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetrupdatefreq(error_msg, state.get_ptr(), freq, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetrupdatefreq");
    }
    public static void lincgsetrupdatefreq(lincgstate state, int freq) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetrupdatefreq() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetrupdatefreq() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetrupdatefreq(error_msg, state.get_ptr(), freq, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetrupdatefreq");
    }
    private static native int _jni_lincgsetrupdatefreq(mut_string error_msg, long state, int freq, long _xparams);

    public static void lincgsetxrep(lincgstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetxrep");
    }
    public static void lincgsetxrep(lincgstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lincgsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lincgsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lincgsetxrep");
    }
    private static native int _jni_lincgsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    
    
    //
    // Subpackage normestimator
    //
    

    public static class normestimatorstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected normestimatorstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected normestimatorstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected normestimatorstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new normestimatorstate(0);
            return new normestimatorstate(_jni_x_obj_copy_normestimatorstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_normestimatorstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_normestimatorstate(long x);
    private static native void _jni_x_obj_free_normestimatorstate(long x);

    public static normestimatorstate normestimatorcreate(int m, int n, int nstart, int nits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normestimatorcreate(error_msg, m, n, nstart, nits, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normestimatorcreate");
        return new normestimatorstate(lcl_state.val);
    }
    public static normestimatorstate normestimatorcreate(int m, int n, int nstart, int nits) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normestimatorcreate(error_msg, m, n, nstart, nits, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normestimatorcreate");
        return new normestimatorstate(lcl_state.val);
    }
    private static native int _jni_normestimatorcreate(mut_string error_msg, int m, int n, int nstart, int nits, mut_long state, long _xparams);

    public static void normestimatorsetseed(normestimatorstate state, int seedval, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorsetseed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorsetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normestimatorsetseed(error_msg, state.get_ptr(), seedval, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normestimatorsetseed");
    }
    public static void normestimatorsetseed(normestimatorstate state, int seedval) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorsetseed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorsetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normestimatorsetseed(error_msg, state.get_ptr(), seedval, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normestimatorsetseed");
    }
    private static native int _jni_normestimatorsetseed(mut_string error_msg, long state, int seedval, long _xparams);

    public static void normestimatorestimatesparse(normestimatorstate state, sparsematrix a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorestimatesparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorestimatesparse() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of normestimatorestimatesparse() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of normestimatorestimatesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normestimatorestimatesparse(error_msg, state.get_ptr(), a.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normestimatorestimatesparse");
    }
    public static void normestimatorestimatesparse(normestimatorstate state, sparsematrix a) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorestimatesparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorestimatesparse() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of normestimatorestimatesparse() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of normestimatorestimatesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normestimatorestimatesparse(error_msg, state.get_ptr(), a.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normestimatorestimatesparse");
    }
    private static native int _jni_normestimatorestimatesparse(mut_string error_msg, long state, long a, long _xparams);

    public static double normestimatorresults(normestimatorstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_nrm = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normestimatorresults(error_msg, state.get_ptr(), lcl_nrm, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normestimatorresults");
        return lcl_nrm.val;
    }
    public static double normestimatorresults(normestimatorstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_nrm = new mut_double();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of normestimatorresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normestimatorresults(error_msg, state.get_ptr(), lcl_nrm, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normestimatorresults");
        return lcl_nrm.val;
    }
    private static native int _jni_normestimatorresults(mut_string error_msg, long state, mut_double nrm, long _xparams);

    
    
    //
    // Subpackage linlsqr
    //
    

    public static class linlsqrstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected linlsqrstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected linlsqrstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected linlsqrstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new linlsqrstate(0);
            return new linlsqrstate(_jni_x_obj_copy_linlsqrstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_linlsqrstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_linlsqrstate(long x);
    private static native void _jni_x_obj_free_linlsqrstate(long x);


        public static class linlsqrreport extends alglibobject
        {
            public int iterationscount;
            public int nmv;
            public int terminationtype;
            public alglibobject make_copy()
            {
                linlsqrreport dst = new linlsqrreport();
                dst.iterationscount = iterationscount;
                dst.nmv = nmv;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static linlsqrstate linlsqrcreate(int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrcreate(error_msg, m, n, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrcreate");
        return new linlsqrstate(lcl_state.val);
    }
    public static linlsqrstate linlsqrcreate(int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrcreate(error_msg, m, n, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrcreate");
        return new linlsqrstate(lcl_state.val);
    }
    private static native int _jni_linlsqrcreate(mut_string error_msg, int m, int n, mut_long state, long _xparams);

    public static void linlsqrcreatebuf(int m, int n, linlsqrstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrcreatebuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrcreatebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrcreatebuf(error_msg, m, n, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrcreatebuf");
    }
    public static void linlsqrcreatebuf(int m, int n, linlsqrstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrcreatebuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrcreatebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrcreatebuf(error_msg, m, n, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrcreatebuf");
    }
    private static native int _jni_linlsqrcreatebuf(mut_string error_msg, int m, int n, long state, long _xparams);

    public static void linlsqrsetprecunit(linlsqrstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetprecunit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetprecunit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetprecunit(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetprecunit");
    }
    public static void linlsqrsetprecunit(linlsqrstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetprecunit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetprecunit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetprecunit(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetprecunit");
    }
    private static native int _jni_linlsqrsetprecunit(mut_string error_msg, long state, long _xparams);

    public static void linlsqrsetprecdiag(linlsqrstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetprecdiag(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetprecdiag");
    }
    public static void linlsqrsetprecdiag(linlsqrstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetprecdiag(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetprecdiag");
    }
    private static native int _jni_linlsqrsetprecdiag(mut_string error_msg, long state, long _xparams);

    public static void linlsqrsetlambdai(linlsqrstate state, double lambdai, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetlambdai() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetlambdai() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetlambdai(error_msg, state.get_ptr(), lambdai, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetlambdai");
    }
    public static void linlsqrsetlambdai(linlsqrstate state, double lambdai) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetlambdai() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetlambdai() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetlambdai(error_msg, state.get_ptr(), lambdai, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetlambdai");
    }
    private static native int _jni_linlsqrsetlambdai(mut_string error_msg, long state, double lambdai, long _xparams);

    public static void linlsqrsolvesparse(linlsqrstate state, sparsematrix a, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsolvesparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsolvesparse() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of linlsqrsolvesparse() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of linlsqrsolvesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsolvesparse(error_msg, state.get_ptr(), a.get_ptr(), b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsolvesparse");
    }
    public static void linlsqrsolvesparse(linlsqrstate state, sparsematrix a, double[] b) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsolvesparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsolvesparse() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of linlsqrsolvesparse() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of linlsqrsolvesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsolvesparse(error_msg, state.get_ptr(), a.get_ptr(), b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsolvesparse");
    }
    private static native int _jni_linlsqrsolvesparse(mut_string error_msg, long state, long a, double[] b, long _xparams);

    public static void linlsqrsetcond(linlsqrstate state, double epsa, double epsb, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetcond(error_msg, state.get_ptr(), epsa, epsb, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetcond");
    }
    public static void linlsqrsetcond(linlsqrstate state, double epsa, double epsb, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetcond(error_msg, state.get_ptr(), epsa, epsb, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetcond");
    }
    private static native int _jni_linlsqrsetcond(mut_string error_msg, long state, double epsa, double epsb, int maxits, long _xparams);

    public static class linlsqrresults_results
    {
        public double[] x;
        public linlsqrreport rep;
    }
    public static linlsqrresults_results linlsqrresults(linlsqrstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrresults");
        linlsqrresults_results ret_tuple = new linlsqrresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (linlsqrreport)lcl_rep.val;
        return ret_tuple;
    }
    public static linlsqrresults_results linlsqrresults(linlsqrstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrresults");
        linlsqrresults_results ret_tuple = new linlsqrresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (linlsqrreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_linlsqrresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static void linlsqrsetxrep(linlsqrstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetxrep");
    }
    public static void linlsqrsetxrep(linlsqrstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrsetxrep");
    }
    private static native int _jni_linlsqrsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static int linlsqrpeekiterationscount(linlsqrstate s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of linlsqrpeekiterationscount() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of linlsqrpeekiterationscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrpeekiterationscount(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrpeekiterationscount");
        return lcl_result.val;
    }
    public static int linlsqrpeekiterationscount(linlsqrstate s) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of linlsqrpeekiterationscount() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of linlsqrpeekiterationscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrpeekiterationscount(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrpeekiterationscount");
        return lcl_result.val;
    }
    private static native int _jni_linlsqrpeekiterationscount(mut_string error_msg, mut_int result, long s, long _xparams);

    public static void linlsqrrequesttermination(linlsqrstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrrequesttermination");
    }
    public static void linlsqrrequesttermination(linlsqrstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of linlsqrrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_linlsqrrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "linlsqrrequesttermination");
    }
    private static native int _jni_linlsqrrequesttermination(mut_string error_msg, long state, long _xparams);

    
    
    //
    // Subpackage directsparsesolvers
    //
    
    public static class sparsespdsolvesks_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsespdsolvesks_results sparsespdsolvesks(sparsematrix a, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdsolvesks() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdsolvesks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsespdsolvesks(error_msg, a.get_ptr(), isupper, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsespdsolvesks");
        sparsespdsolvesks_results ret_tuple = new sparsespdsolvesks_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsespdsolvesks_results sparsespdsolvesks(sparsematrix a, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdsolvesks() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdsolvesks() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsespdsolvesks(error_msg, a.get_ptr(), isupper, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsespdsolvesks");
        sparsespdsolvesks_results ret_tuple = new sparsespdsolvesks_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_sparsespdsolvesks(mut_string error_msg, long a, boolean isupper, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    public static class sparsespdsolve_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsespdsolve_results sparsespdsolve(sparsematrix a, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdsolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdsolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsespdsolve(error_msg, a.get_ptr(), isupper, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsespdsolve");
        sparsespdsolve_results ret_tuple = new sparsespdsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsespdsolve_results sparsespdsolve(sparsematrix a, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdsolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdsolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsespdsolve(error_msg, a.get_ptr(), isupper, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsespdsolve");
        sparsespdsolve_results ret_tuple = new sparsespdsolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_sparsespdsolve(mut_string error_msg, long a, boolean isupper, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    public static class sparsespdcholeskysolve_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsespdcholeskysolve_results sparsespdcholeskysolve(sparsematrix a, boolean isupper, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdcholeskysolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdcholeskysolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsespdcholeskysolve(error_msg, a.get_ptr(), isupper, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsespdcholeskysolve");
        sparsespdcholeskysolve_results ret_tuple = new sparsespdcholeskysolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsespdcholeskysolve_results sparsespdcholeskysolve(sparsematrix a, boolean isupper, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdcholeskysolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsespdcholeskysolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsespdcholeskysolve(error_msg, a.get_ptr(), isupper, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsespdcholeskysolve");
        sparsespdcholeskysolve_results ret_tuple = new sparsespdcholeskysolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_sparsespdcholeskysolve(mut_string error_msg, long a, boolean isupper, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    public static class sparsesolve_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsesolve_results sparsesolve(sparsematrix a, double[] b, int solvertype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolve(error_msg, a.get_ptr(), b, solvertype, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolve");
        sparsesolve_results ret_tuple = new sparsesolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsesolve_results sparsesolve(sparsematrix a, double[] b, int solvertype) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolve(error_msg, a.get_ptr(), b, solvertype, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolve");
        sparsesolve_results ret_tuple = new sparsesolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static sparsesolve_results sparsesolve(sparsematrix a, double[] b, alglib.xparams _params) throws alglib.exception
    {
        int solvertype;
    
        solvertype = 0;
        return sparsesolve(a, b, solvertype, _params);
    
    }
    
    public static sparsesolve_results sparsesolve(sparsematrix a, double[] b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int solvertype;
    
        solvertype = 0;
        return sparsesolve(a, b, solvertype, _params);
    
    }
    private static native int _jni_sparsesolve(mut_string error_msg, long a, double[] b, int solvertype, rlc_double1d x, mut_object rep, long _xparams);

    public static class sparsesolvelsreg_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparsesolvelsreg_results sparsesolvelsreg(sparsematrix a, double[] b, double reg, int solvertype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvelsreg() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvelsreg() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolvelsreg(error_msg, a.get_ptr(), b, reg, solvertype, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolvelsreg");
        sparsesolvelsreg_results ret_tuple = new sparsesolvelsreg_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparsesolvelsreg_results sparsesolvelsreg(sparsematrix a, double[] b, double reg, int solvertype) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvelsreg() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparsesolvelsreg() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparsesolvelsreg(error_msg, a.get_ptr(), b, reg, solvertype, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparsesolvelsreg");
        sparsesolvelsreg_results ret_tuple = new sparsesolvelsreg_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static sparsesolvelsreg_results sparsesolvelsreg(sparsematrix a, double[] b, double reg, alglib.xparams _params) throws alglib.exception
    {
        int solvertype;
    
        solvertype = 0;
        return sparsesolvelsreg(a, b, reg, solvertype, _params);
    
    }
    
    public static sparsesolvelsreg_results sparsesolvelsreg(sparsematrix a, double[] b, double reg) throws alglib.exception
    {
        alglib.xparams _params = null;
        int solvertype;
    
        solvertype = 0;
        return sparsesolvelsreg(a, b, reg, solvertype, _params);
    
    }
    private static native int _jni_sparsesolvelsreg(mut_string error_msg, long a, double[] b, double reg, int solvertype, rlc_double1d x, mut_object rep, long _xparams);

    public static class sparselusolve_results
    {
        public double[] x;
        public sparsesolverreport rep;
    }
    public static sparselusolve_results sparselusolve(sparsematrix a, int[] p, int[] q, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparselusolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparselusolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparselusolve(error_msg, a.get_ptr(), p, q, b, lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparselusolve");
        sparselusolve_results ret_tuple = new sparselusolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static sparselusolve_results sparselusolve(sparsematrix a, int[] p, int[] q, double[] b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparselusolve() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of sparselusolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sparselusolve(error_msg, a.get_ptr(), p, q, b, lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sparselusolve");
        sparselusolve_results ret_tuple = new sparselusolve_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (sparsesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_sparselusolve(mut_string error_msg, long a, int[] p, int[] q, double[] b, rlc_double1d x, mut_object rep, long _xparams);

    
    
    //
    // Subpackage nleq
    //
    

    public static class nleqstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected nleqstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected nleqstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected nleqstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new nleqstate(0);
            return new nleqstate(_jni_x_obj_copy_nleqstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_nleqstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_nleqstate(long x);
    private static native void _jni_x_obj_free_nleqstate(long x);
    private static native boolean _jni_nleqstate_get_needf(long x);
    private static native void _jni_nleqstate_set_needf(long x, boolean v);
    private static native boolean _jni_nleqstate_get_needfij(long x);
    private static native void _jni_nleqstate_set_needfij(long x, boolean v);
    private static native boolean _jni_nleqstate_get_xupdated(long x);
    private static native void _jni_nleqstate_set_xupdated(long x, boolean v);
    private static native double _jni_nleqstate_get_f(long x);
    private static native void _jni_nleqstate_set_f(long x, double v);
    private static native long _jni_nleqstate_get_fi(long obj);
    private static native long _jni_nleqstate_get_j(long obj);
    private static native long _jni_nleqstate_get_x(long obj);


        public static class nleqreport extends alglibobject
        {
            public int iterationscount;
            public int nfunc;
            public int njac;
            public int terminationtype;
            public alglibobject make_copy()
            {
                nleqreport dst = new nleqreport();
                dst.iterationscount = iterationscount;
                dst.nfunc = nfunc;
                dst.njac = njac;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static nleqstate nleqcreatelm(int n, int m, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqcreatelm(error_msg, n, m, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqcreatelm");
        return new nleqstate(lcl_state.val);
    }
    public static nleqstate nleqcreatelm(int n, int m, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqcreatelm(error_msg, n, m, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqcreatelm");
        return new nleqstate(lcl_state.val);
    }
            
    public static nleqstate nleqcreatelm(int m, double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return nleqcreatelm(n, m, x, _params);
    
    }
    
    public static nleqstate nleqcreatelm(int m, double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return nleqcreatelm(n, m, x, _params);
    
    }
    private static native int _jni_nleqcreatelm(mut_string error_msg, int n, int m, double[] x, mut_long state, long _xparams);

    public static void nleqsetcond(nleqstate state, double epsf, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqsetcond(error_msg, state.get_ptr(), epsf, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqsetcond");
    }
    public static void nleqsetcond(nleqstate state, double epsf, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqsetcond(error_msg, state.get_ptr(), epsf, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqsetcond");
    }
    private static native int _jni_nleqsetcond(mut_string error_msg, long state, double epsf, int maxits, long _xparams);

    public static void nleqsetxrep(nleqstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqsetxrep");
    }
    public static void nleqsetxrep(nleqstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqsetxrep");
    }
    private static native int _jni_nleqsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void nleqsetstpmax(nleqstate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqsetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqsetstpmax");
    }
    public static void nleqsetstpmax(nleqstate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqsetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqsetstpmax");
    }
    private static native int _jni_nleqsetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static boolean nleqiteration(nleqstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqiteration");
        return lcl_result.val;
    }
    public static boolean nleqiteration(nleqstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqiteration");
        return lcl_result.val;
    }
    private static native int _jni_nleqiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void nleqsolve(nleqstate state, ndimensional_func func, ndimensional_jac jac, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        nleqsolve(state, func, jac, rep, obj, null);
    }
    
    public static void nleqsolve(nleqstate state, ndimensional_func func, ndimensional_jac jac, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsolve() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqsolve() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        double lcl_f = 0;
        long xv_fi = 0;
        rlc_double1d rlc_fi = new rlc_double1d();
        long xm_j = 0;
        rlc_double2d rlc_j = new rlc_double2d();
        boolean xc_needf;
        boolean xc_needfij;
    
        //
        // Check correctness of interfaces
        //
        if( func==null )
            throw new alglib.exception("ALGLIB: error in 'nleqsolve()' (func is null)");
        if( jac==null )
            throw new alglib.exception("ALGLIB: error in 'nleqsolve()' (jac is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_nleqstate_get_x(lcl_state);
            xv_fi = _jni_nleqstate_get_fi(lcl_state);
            xm_j = _jni_nleqstate_get_j(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_fi, rlc_fi);
            _jni_x_matrix_to_double_array(xm_j, rlc_j);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_nleq_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "nleq_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "nleqiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_nleqiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "nleqiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_nleqstate_get_xupdated(lcl_state);
                xc_needf = _jni_nleqstate_get_needf(lcl_state);
                xc_needfij = _jni_nleqstate_get_needfij(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needf )
                {
                    lcl_f = func.calc(rlc_arg.val, obj);
                    _jni_nleqstate_set_f(lcl_state, lcl_f);
                    continue;
                }
                if( xc_needfij )
                {
                    jac.calc(rlc_arg.val, rlc_fi.val, rlc_j.val, obj);
                    _jni_x_vector_from_array(xv_fi, rlc_fi.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    _jni_x_matrix_from_array(xm_j,  rlc_j.val,  DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_nleqstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'nleqsolve' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_fi);
        _jni_x_matrix_clear_and_free(xm_j);
        }
    }
    private static native int _jni_rcv2_nleq_set_protocol_v1(mut_string error_msg, long obj, long _xparams);

    public static class nleqresults_results
    {
        public double[] x;
        public nleqreport rep;
    }
    public static nleqresults_results nleqresults(nleqstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqresults");
        nleqresults_results ret_tuple = new nleqresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (nleqreport)lcl_rep.val;
        return ret_tuple;
    }
    public static nleqresults_results nleqresults(nleqstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqresults");
        nleqresults_results ret_tuple = new nleqresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (nleqreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_nleqresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] nleqresultsbuf(nleqstate state, double[] x, nleqreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqresultsbuf");
        return lcl_x.val;
    }
    public static double[] nleqresultsbuf(nleqstate state, double[] x, nleqreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_nleqresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void nleqrestartfrom(nleqstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqrestartfrom");
    }
    public static void nleqrestartfrom(nleqstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nleqrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nleqrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nleqrestartfrom");
    }
    private static native int _jni_nleqrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    
    
    //
    // Subpackage optguardapi
    //
    

        public static class optguardreport extends alglibobject
        {
            public boolean nonc0suspected;
            public boolean nonc0test0positive;
            public int nonc0fidx;
            public double nonc0lipschitzc;
            public boolean nonc1suspected;
            public boolean nonc1test0positive;
            public boolean nonc1test1positive;
            public int nonc1fidx;
            public double nonc1lipschitzc;
            public boolean badgradsuspected;
            public int badgradfidx;
            public int badgradvidx;
            public double[] badgradxbase;
            public double[][] badgraduser;
            public double[][] badgradnum;
            public alglibobject make_copy()
            {
                optguardreport dst = new optguardreport();
                dst.nonc0suspected = nonc0suspected;
                dst.nonc0test0positive = nonc0test0positive;
                dst.nonc0fidx = nonc0fidx;
                dst.nonc0lipschitzc = nonc0lipschitzc;
                dst.nonc1suspected = nonc1suspected;
                dst.nonc1test0positive = nonc1test0positive;
                dst.nonc1test1positive = nonc1test1positive;
                dst.nonc1fidx = nonc1fidx;
                dst.nonc1lipschitzc = nonc1lipschitzc;
                dst.badgradsuspected = badgradsuspected;
                dst.badgradfidx = badgradfidx;
                dst.badgradvidx = badgradvidx;
                dst.badgradxbase = alglib.make_copy(badgradxbase);
                dst.badgraduser = alglib.make_copy(badgraduser);
                dst.badgradnum = alglib.make_copy(badgradnum);
                return dst;
            }
        }


        public static class optguardnonc0report extends alglibobject
        {
            public boolean positive;
            public int fidx;
            public double[] x0;
            public double[] d;
            public int n;
            public double[] stp;
            public double[] f;
            public int cnt;
            public int stpidxa;
            public int stpidxb;
            public int inneriter;
            public int outeriter;
            public alglibobject make_copy()
            {
                optguardnonc0report dst = new optguardnonc0report();
                dst.positive = positive;
                dst.fidx = fidx;
                dst.x0 = alglib.make_copy(x0);
                dst.d = alglib.make_copy(d);
                dst.n = n;
                dst.stp = alglib.make_copy(stp);
                dst.f = alglib.make_copy(f);
                dst.cnt = cnt;
                dst.stpidxa = stpidxa;
                dst.stpidxb = stpidxb;
                dst.inneriter = inneriter;
                dst.outeriter = outeriter;
                return dst;
            }
        }


        public static class optguardnonc1test0report extends alglibobject
        {
            public boolean positive;
            public int fidx;
            public double[] x0;
            public double[] d;
            public int n;
            public double[] stp;
            public double[] f;
            public int cnt;
            public int stpidxa;
            public int stpidxb;
            public int inneriter;
            public int outeriter;
            public alglibobject make_copy()
            {
                optguardnonc1test0report dst = new optguardnonc1test0report();
                dst.positive = positive;
                dst.fidx = fidx;
                dst.x0 = alglib.make_copy(x0);
                dst.d = alglib.make_copy(d);
                dst.n = n;
                dst.stp = alglib.make_copy(stp);
                dst.f = alglib.make_copy(f);
                dst.cnt = cnt;
                dst.stpidxa = stpidxa;
                dst.stpidxb = stpidxb;
                dst.inneriter = inneriter;
                dst.outeriter = outeriter;
                return dst;
            }
        }


        public static class optguardnonc1test1report extends alglibobject
        {
            public boolean positive;
            public int fidx;
            public int vidx;
            public double[] x0;
            public double[] d;
            public int n;
            public double[] stp;
            public double[] g;
            public int cnt;
            public int stpidxa;
            public int stpidxb;
            public int inneriter;
            public int outeriter;
            public alglibobject make_copy()
            {
                optguardnonc1test1report dst = new optguardnonc1test1report();
                dst.positive = positive;
                dst.fidx = fidx;
                dst.vidx = vidx;
                dst.x0 = alglib.make_copy(x0);
                dst.d = alglib.make_copy(d);
                dst.n = n;
                dst.stp = alglib.make_copy(stp);
                dst.g = alglib.make_copy(g);
                dst.cnt = cnt;
                dst.stpidxa = stpidxa;
                dst.stpidxb = stpidxb;
                dst.inneriter = inneriter;
                dst.outeriter = outeriter;
                return dst;
            }
        }

    
    
    //
    // Subpackage matinv
    //
    

        public static class matinvreport extends alglibobject
        {
            public int terminationtype;
            public double r1;
            public double rinf;
            public alglibobject make_copy()
            {
                matinvreport dst = new matinvreport();
                dst.terminationtype = terminationtype;
                dst.r1 = r1;
                dst.rinf = rinf;
                return dst;
            }
        }

    public static matinvreport rmatrixluinverse(double[][] a, int[] pivots, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixluinverse(error_msg, a, pivots, n, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixluinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport rmatrixluinverse(double[][] a, int[] pivots, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixluinverse(error_msg, a, pivots, n, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixluinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport rmatrixluinverse(double[][] a, int[] pivots, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.cols(a)!=ap.rows(a)) || (ap.cols(a)!=pivots.length))
            throw new exception("Error while calling rmatrixluinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return rmatrixluinverse(a, pivots, n, _params);
    
    }
    
    public static matinvreport rmatrixluinverse(double[][] a, int[] pivots) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.cols(a)!=ap.rows(a)) || (ap.cols(a)!=pivots.length))
            throw new exception("Error while calling rmatrixluinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return rmatrixluinverse(a, pivots, n, _params);
    
    }
    private static native int _jni_rmatrixluinverse(mut_string error_msg, double[][] a, int[] pivots, int n, mut_object rep, long _xparams);

    public static matinvreport rmatrixinverse(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinverse(error_msg, a, n, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport rmatrixinverse(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinverse(error_msg, a, n, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport rmatrixinverse(double[][] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling rmatrixinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return rmatrixinverse(a, n, _params);
    
    }
    
    public static matinvreport rmatrixinverse(double[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling rmatrixinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return rmatrixinverse(a, n, _params);
    
    }
    private static native int _jni_rmatrixinverse(mut_string error_msg, double[][] a, int n, mut_object rep, long _xparams);

    public static matinvreport cmatrixluinverse(complex[][] a, int[] pivots, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixluinverse(error_msg, a, pivots, n, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixluinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport cmatrixluinverse(complex[][] a, int[] pivots, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixluinverse(error_msg, a, pivots, n, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixluinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport cmatrixluinverse(complex[][] a, int[] pivots, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.cols(a)!=ap.rows(a)) || (ap.cols(a)!=pivots.length))
            throw new exception("Error while calling cmatrixluinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return cmatrixluinverse(a, pivots, n, _params);
    
    }
    
    public static matinvreport cmatrixluinverse(complex[][] a, int[] pivots) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.cols(a)!=ap.rows(a)) || (ap.cols(a)!=pivots.length))
            throw new exception("Error while calling cmatrixluinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return cmatrixluinverse(a, pivots, n, _params);
    
    }
    private static native int _jni_cmatrixluinverse(mut_string error_msg, complex[][] a, int[] pivots, int n, mut_object rep, long _xparams);

    public static matinvreport cmatrixinverse(complex[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixinverse(error_msg, a, n, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport cmatrixinverse(complex[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixinverse(error_msg, a, n, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport cmatrixinverse(complex[][] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling cmatrixinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return cmatrixinverse(a, n, _params);
    
    }
    
    public static matinvreport cmatrixinverse(complex[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling cmatrixinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return cmatrixinverse(a, n, _params);
    
    }
    private static native int _jni_cmatrixinverse(mut_string error_msg, complex[][] a, int n, mut_object rep, long _xparams);

    public static matinvreport spdmatrixcholeskyinverse(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyinverse(error_msg, a, n, isupper, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport spdmatrixcholeskyinverse(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskyinverse(error_msg, a, n, isupper, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskyinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport spdmatrixcholeskyinverse(double[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling spdmatrixcholeskyinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return spdmatrixcholeskyinverse(a, n, isupper, _params);
    
    }
    
    public static matinvreport spdmatrixcholeskyinverse(double[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling spdmatrixcholeskyinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return spdmatrixcholeskyinverse(a, n, isupper, _params);
    
    }
    private static native int _jni_spdmatrixcholeskyinverse(mut_string error_msg, double[][] a, int n, boolean isupper, mut_object rep, long _xparams);

    public static matinvreport spdmatrixinverse(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixinverse(error_msg, a, n, isupper, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport spdmatrixinverse(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixinverse(error_msg, a, n, isupper, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport spdmatrixinverse(double[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling spdmatrixinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return spdmatrixinverse(a, n, isupper, _params);
    
    }
    
    public static matinvreport spdmatrixinverse(double[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling spdmatrixinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return spdmatrixinverse(a, n, isupper, _params);
    
    }
    private static native int _jni_spdmatrixinverse(mut_string error_msg, double[][] a, int n, boolean isupper, mut_object rep, long _xparams);

    public static matinvreport hpdmatrixcholeskyinverse(complex[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskyinverse(error_msg, a, n, isupper, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskyinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport hpdmatrixcholeskyinverse(complex[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixcholeskyinverse(error_msg, a, n, isupper, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixcholeskyinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport hpdmatrixcholeskyinverse(complex[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling hpdmatrixcholeskyinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return hpdmatrixcholeskyinverse(a, n, isupper, _params);
    
    }
    
    public static matinvreport hpdmatrixcholeskyinverse(complex[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling hpdmatrixcholeskyinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return hpdmatrixcholeskyinverse(a, n, isupper, _params);
    
    }
    private static native int _jni_hpdmatrixcholeskyinverse(mut_string error_msg, complex[][] a, int n, boolean isupper, mut_object rep, long _xparams);

    public static matinvreport hpdmatrixinverse(complex[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixinverse(error_msg, a, n, isupper, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport hpdmatrixinverse(complex[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hpdmatrixinverse(error_msg, a, n, isupper, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hpdmatrixinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport hpdmatrixinverse(complex[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling hpdmatrixinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return hpdmatrixinverse(a, n, isupper, _params);
    
    }
    
    public static matinvreport hpdmatrixinverse(complex[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling hpdmatrixinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        return hpdmatrixinverse(a, n, isupper, _params);
    
    }
    private static native int _jni_hpdmatrixinverse(mut_string error_msg, complex[][] a, int n, boolean isupper, mut_object rep, long _xparams);

    public static matinvreport rmatrixtrinverse(double[][] a, int n, boolean isupper, boolean isunit, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrinverse(error_msg, a, n, isupper, isunit, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport rmatrixtrinverse(double[][] a, int n, boolean isupper, boolean isunit) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixtrinverse(error_msg, a, n, isupper, isunit, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixtrinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport rmatrixtrinverse(double[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        boolean isunit;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling rmatrixtrinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        isunit = false;
        return rmatrixtrinverse(a, n, isupper, isunit, _params);
    
    }
    
    public static matinvreport rmatrixtrinverse(double[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        boolean isunit;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling rmatrixtrinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        isunit = false;
        return rmatrixtrinverse(a, n, isupper, isunit, _params);
    
    }
    private static native int _jni_rmatrixtrinverse(mut_string error_msg, double[][] a, int n, boolean isupper, boolean isunit, mut_object rep, long _xparams);

    public static matinvreport cmatrixtrinverse(complex[][] a, int n, boolean isupper, boolean isunit, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixtrinverse(error_msg, a, n, isupper, isunit, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixtrinverse");
        return (matinvreport)lcl_rep.val;
    }
    public static matinvreport cmatrixtrinverse(complex[][] a, int n, boolean isupper, boolean isunit) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixtrinverse(error_msg, a, n, isupper, isunit, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixtrinverse");
        return (matinvreport)lcl_rep.val;
    }
            
    public static matinvreport cmatrixtrinverse(complex[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        boolean isunit;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling cmatrixtrinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        isunit = false;
        return cmatrixtrinverse(a, n, isupper, isunit, _params);
    
    }
    
    public static matinvreport cmatrixtrinverse(complex[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        boolean isunit;
        if( (ap.cols(a)!=ap.rows(a)))
            throw new exception("Error while calling cmatrixtrinverse(): looks like one of arguments has wrong size");
        n = ap.cols(a);
        isunit = false;
        return cmatrixtrinverse(a, n, isupper, isunit, _params);
    
    }
    private static native int _jni_cmatrixtrinverse(mut_string error_msg, complex[][] a, int n, boolean isupper, boolean isunit, mut_object rep, long _xparams);

    
    
    //
    // Subpackage optserv
    //
    
    
    
    //
    // Subpackage minlbfgs
    //
    

    public static class minlbfgsstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minlbfgsstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minlbfgsstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minlbfgsstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minlbfgsstate(0);
            return new minlbfgsstate(_jni_x_obj_copy_minlbfgsstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minlbfgsstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minlbfgsstate(long x);
    private static native void _jni_x_obj_free_minlbfgsstate(long x);


        public static class minlbfgsreport extends alglibobject
        {
            public int iterationscount;
            public int nfev;
            public int terminationtype;
            public alglibobject make_copy()
            {
                minlbfgsreport dst = new minlbfgsreport();
                dst.iterationscount = iterationscount;
                dst.nfev = nfev;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static minlbfgsstate minlbfgscreate(int n, int m, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgscreate(error_msg, n, m, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgscreate");
        return new minlbfgsstate(lcl_state.val);
    }
    public static minlbfgsstate minlbfgscreate(int n, int m, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgscreate(error_msg, n, m, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgscreate");
        return new minlbfgsstate(lcl_state.val);
    }
            
    public static minlbfgsstate minlbfgscreate(int m, double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minlbfgscreate(n, m, x, _params);
    
    }
    
    public static minlbfgsstate minlbfgscreate(int m, double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minlbfgscreate(n, m, x, _params);
    
    }
    private static native int _jni_minlbfgscreate(mut_string error_msg, int n, int m, double[] x, mut_long state, long _xparams);

    public static minlbfgsstate minlbfgscreatef(int n, int m, double[] x, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgscreatef(error_msg, n, m, x, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgscreatef");
        return new minlbfgsstate(lcl_state.val);
    }
    public static minlbfgsstate minlbfgscreatef(int n, int m, double[] x, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgscreatef(error_msg, n, m, x, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgscreatef");
        return new minlbfgsstate(lcl_state.val);
    }
            
    public static minlbfgsstate minlbfgscreatef(int m, double[] x, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minlbfgscreatef(n, m, x, diffstep, _params);
    
    }
    
    public static minlbfgsstate minlbfgscreatef(int m, double[] x, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minlbfgscreatef(n, m, x, diffstep, _params);
    
    }
    private static native int _jni_minlbfgscreatef(mut_string error_msg, int n, int m, double[] x, double diffstep, mut_long state, long _xparams);

    public static void minlbfgssetcond(minlbfgsstate state, double epsg, double epsf, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetcond");
    }
    public static void minlbfgssetcond(minlbfgsstate state, double epsg, double epsf, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetcond");
    }
    private static native int _jni_minlbfgssetcond(mut_string error_msg, long state, double epsg, double epsf, double epsx, int maxits, long _xparams);

    public static void minlbfgssetxrep(minlbfgsstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetxrep");
    }
    public static void minlbfgssetxrep(minlbfgsstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetxrep");
    }
    private static native int _jni_minlbfgssetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void minlbfgssetstpmax(minlbfgsstate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetstpmax");
    }
    public static void minlbfgssetstpmax(minlbfgsstate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetstpmax");
    }
    private static native int _jni_minlbfgssetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static void minlbfgssetscale(minlbfgsstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetscale");
    }
    public static void minlbfgssetscale(minlbfgsstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetscale");
    }
    private static native int _jni_minlbfgssetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minlbfgssetprecdefault(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecdefault() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecdefault() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetprecdefault(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetprecdefault");
    }
    public static void minlbfgssetprecdefault(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecdefault() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecdefault() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetprecdefault(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetprecdefault");
    }
    private static native int _jni_minlbfgssetprecdefault(mut_string error_msg, long state, long _xparams);

    public static void minlbfgssetpreccholesky(minlbfgsstate state, double[][] p, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetpreccholesky() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetpreccholesky() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetpreccholesky(error_msg, state.get_ptr(), p, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetpreccholesky");
    }
    public static void minlbfgssetpreccholesky(minlbfgsstate state, double[][] p, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetpreccholesky() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetpreccholesky() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetpreccholesky(error_msg, state.get_ptr(), p, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetpreccholesky");
    }
    private static native int _jni_minlbfgssetpreccholesky(mut_string error_msg, long state, double[][] p, boolean isupper, long _xparams);

    public static void minlbfgssetprecdiag(minlbfgsstate state, double[] d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetprecdiag(error_msg, state.get_ptr(), d, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetprecdiag");
    }
    public static void minlbfgssetprecdiag(minlbfgsstate state, double[] d) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetprecdiag(error_msg, state.get_ptr(), d, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetprecdiag");
    }
    private static native int _jni_minlbfgssetprecdiag(mut_string error_msg, long state, double[] d, long _xparams);

    public static void minlbfgssetprecscale(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetprecscale(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetprecscale");
    }
    public static void minlbfgssetprecscale(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetprecscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetprecscale(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetprecscale");
    }
    private static native int _jni_minlbfgssetprecscale(mut_string error_msg, long state, long _xparams);

    public static boolean minlbfgsiteration(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsiteration");
        return lcl_result.val;
    }
    public static boolean minlbfgsiteration(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsiteration");
        return lcl_result.val;
    }
    private static native int _jni_minlbfgsiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void minlbfgsoptimize(minlbfgsstate state, ndimensional_func func, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minlbfgsoptimize(state, func, rep, obj, null);
    }
    
    public static void minlbfgsoptimize(minlbfgsstate state, ndimensional_func func, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( func==null )
        throw new alglib.exception("ALGLIB: error in 'minlbfgsoptimize()' (func is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "minlbfgs");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minlbfgs_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minlbfgs_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minlbfgsiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minlbfgsiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minlbfgsiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_minlbfgs, state.get_ptr());
                buffers.resize(request);
                if( request.request==3 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_3phase0(request, job_idx, func, null, null, null, buffers);
                    _process_v2request_3phase1(request);
                    request.send_reply();
                    continue;
                }
                if( request.request==5 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_5phase0(request, job_idx, func, null, null, null, buffers);
                    _process_v2request_5phase1(request);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minlbfgsoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    public static void minlbfgsoptimize(minlbfgsstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minlbfgsoptimize(state, grad, rep, obj, null);
    }
    
    public static void minlbfgsoptimize(minlbfgsstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( grad==null )
        throw new alglib.exception("ALGLIB: error in 'minlbfgsoptimize()' (grad is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "minlbfgs");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minlbfgs_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minlbfgs_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minlbfgsiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minlbfgsiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minlbfgsiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_minlbfgs, state.get_ptr());
                buffers.resize(request);
                if( request.request==2 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_2(request, qidx, grad, null, null, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minlbfgsoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    private static native int _jni_rcv2_minlbfgs_set_protocol_v2(mut_string error_msg, long obj, long _xparams);
    private static native int _jni_rcv2_fetch_minlbfgs(_rcommv2_request request, long obj);

    public static void minlbfgsoptguardgradient(minlbfgsstate state, double teststep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardgradient(error_msg, state.get_ptr(), teststep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardgradient");
    }
    public static void minlbfgsoptguardgradient(minlbfgsstate state, double teststep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardgradient(error_msg, state.get_ptr(), teststep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardgradient");
    }
    private static native int _jni_minlbfgsoptguardgradient(mut_string error_msg, long state, double teststep, long _xparams);

    public static void minlbfgsoptguardsmoothness(minlbfgsstate state, int level, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardsmoothness(error_msg, state.get_ptr(), level, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardsmoothness");
    }
    public static void minlbfgsoptguardsmoothness(minlbfgsstate state, int level) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardsmoothness(error_msg, state.get_ptr(), level, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardsmoothness");
    }
            
    public static void minlbfgsoptguardsmoothness(minlbfgsstate state, alglib.xparams _params) throws alglib.exception
    {
        int level;
    
        level = 1;
        minlbfgsoptguardsmoothness(state, level, _params);
    
    }
    
    public static void minlbfgsoptguardsmoothness(minlbfgsstate state) throws alglib.exception
    {
        alglib.xparams _params = null;
        int level;
    
        level = 1;
        minlbfgsoptguardsmoothness(state, level, _params);
    
    }
    private static native int _jni_minlbfgsoptguardsmoothness(mut_string error_msg, long state, int level, long _xparams);

    public static optguardreport minlbfgsoptguardresults(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardresults(error_msg, state.get_ptr(), lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    public static optguardreport minlbfgsoptguardresults(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardresults(error_msg, state.get_ptr(), lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    private static native int _jni_minlbfgsoptguardresults(mut_string error_msg, long state, mut_object rep, long _xparams);

    public static class minlbfgsoptguardnonc1test0results_results
    {
        public optguardnonc1test0report strrep;
        public optguardnonc1test0report lngrep;
    }
    public static minlbfgsoptguardnonc1test0results_results minlbfgsoptguardnonc1test0results(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardnonc1test0results");
        minlbfgsoptguardnonc1test0results_results ret_tuple = new minlbfgsoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static minlbfgsoptguardnonc1test0results_results minlbfgsoptguardnonc1test0results(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardnonc1test0results");
        minlbfgsoptguardnonc1test0results_results ret_tuple = new minlbfgsoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_minlbfgsoptguardnonc1test0results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class minlbfgsoptguardnonc1test1results_results
    {
        public optguardnonc1test1report strrep;
        public optguardnonc1test1report lngrep;
    }
    public static minlbfgsoptguardnonc1test1results_results minlbfgsoptguardnonc1test1results(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardnonc1test1results");
        minlbfgsoptguardnonc1test1results_results ret_tuple = new minlbfgsoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static minlbfgsoptguardnonc1test1results_results minlbfgsoptguardnonc1test1results(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsoptguardnonc1test1results");
        minlbfgsoptguardnonc1test1results_results ret_tuple = new minlbfgsoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_minlbfgsoptguardnonc1test1results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class minlbfgsresults_results
    {
        public double[] x;
        public minlbfgsreport rep;
    }
    public static minlbfgsresults_results minlbfgsresults(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsresults");
        minlbfgsresults_results ret_tuple = new minlbfgsresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minlbfgsreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minlbfgsresults_results minlbfgsresults(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsresults");
        minlbfgsresults_results ret_tuple = new minlbfgsresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minlbfgsreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minlbfgsresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minlbfgsresultsbuf(minlbfgsstate state, double[] x, minlbfgsreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsresultsbuf");
        return lcl_x.val;
    }
    public static double[] minlbfgsresultsbuf(minlbfgsstate state, double[] x, minlbfgsreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minlbfgsresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void minlbfgsrestartfrom(minlbfgsstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsrestartfrom");
    }
    public static void minlbfgsrestartfrom(minlbfgsstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsrestartfrom");
    }
    private static native int _jni_minlbfgsrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    public static void minlbfgsrequesttermination(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsrequesttermination");
    }
    public static void minlbfgsrequesttermination(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgsrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgsrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgsrequesttermination");
    }
    private static native int _jni_minlbfgsrequesttermination(mut_string error_msg, long state, long _xparams);

    
    
    //
    // Subpackage cqmodels
    //
    
    
    
    //
    // Subpackage lpqpserv
    //
    
    
    
    //
    // Subpackage snnls
    //
    
    
    
    //
    // Subpackage sactivesets
    //
    
    
    
    //
    // Subpackage qqpsolver
    //
    
    
    
    //
    // Subpackage qpdenseaulsolver
    //
    
    
    
    //
    // Subpackage minbleic
    //
    

    public static class minbleicstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minbleicstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minbleicstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minbleicstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minbleicstate(0);
            return new minbleicstate(_jni_x_obj_copy_minbleicstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minbleicstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minbleicstate(long x);
    private static native void _jni_x_obj_free_minbleicstate(long x);
    private static native boolean _jni_minbleicstate_get_needf(long x);
    private static native void _jni_minbleicstate_set_needf(long x, boolean v);
    private static native boolean _jni_minbleicstate_get_needfg(long x);
    private static native void _jni_minbleicstate_set_needfg(long x, boolean v);
    private static native boolean _jni_minbleicstate_get_xupdated(long x);
    private static native void _jni_minbleicstate_set_xupdated(long x, boolean v);
    private static native double _jni_minbleicstate_get_f(long x);
    private static native void _jni_minbleicstate_set_f(long x, double v);
    private static native long _jni_minbleicstate_get_g(long obj);
    private static native long _jni_minbleicstate_get_x(long obj);


        public static class minbleicreport extends alglibobject
        {
            public int iterationscount;
            public int nfev;
            public int varidx;
            public int terminationtype;
            public double debugeqerr;
            public double debugfs;
            public double debugff;
            public double debugdx;
            public int debugfeasqpits;
            public int debugfeasgpaits;
            public int inneriterationscount;
            public int outeriterationscount;
            public alglibobject make_copy()
            {
                minbleicreport dst = new minbleicreport();
                dst.iterationscount = iterationscount;
                dst.nfev = nfev;
                dst.varidx = varidx;
                dst.terminationtype = terminationtype;
                dst.debugeqerr = debugeqerr;
                dst.debugfs = debugfs;
                dst.debugff = debugff;
                dst.debugdx = debugdx;
                dst.debugfeasqpits = debugfeasqpits;
                dst.debugfeasgpaits = debugfeasgpaits;
                dst.inneriterationscount = inneriterationscount;
                dst.outeriterationscount = outeriterationscount;
                return dst;
            }
        }

    public static minbleicstate minbleiccreate(int n, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleiccreate(error_msg, n, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleiccreate");
        return new minbleicstate(lcl_state.val);
    }
    public static minbleicstate minbleiccreate(int n, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleiccreate(error_msg, n, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleiccreate");
        return new minbleicstate(lcl_state.val);
    }
            
    public static minbleicstate minbleiccreate(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minbleiccreate(n, x, _params);
    
    }
    
    public static minbleicstate minbleiccreate(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minbleiccreate(n, x, _params);
    
    }
    private static native int _jni_minbleiccreate(mut_string error_msg, int n, double[] x, mut_long state, long _xparams);

    public static minbleicstate minbleiccreatef(int n, double[] x, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleiccreatef(error_msg, n, x, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleiccreatef");
        return new minbleicstate(lcl_state.val);
    }
    public static minbleicstate minbleiccreatef(int n, double[] x, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleiccreatef(error_msg, n, x, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleiccreatef");
        return new minbleicstate(lcl_state.val);
    }
            
    public static minbleicstate minbleiccreatef(double[] x, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minbleiccreatef(n, x, diffstep, _params);
    
    }
    
    public static minbleicstate minbleiccreatef(double[] x, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minbleiccreatef(n, x, diffstep, _params);
    
    }
    private static native int _jni_minbleiccreatef(mut_string error_msg, int n, double[] x, double diffstep, mut_long state, long _xparams);

    public static void minbleicsetbc(minbleicstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetbc");
    }
    public static void minbleicsetbc(minbleicstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetbc");
    }
    private static native int _jni_minbleicsetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void minbleicsetlc(minbleicstate state, double[][] c, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetlc(error_msg, state.get_ptr(), c, ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetlc");
    }
    public static void minbleicsetlc(minbleicstate state, double[][] c, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetlc(error_msg, state.get_ptr(), c, ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetlc");
    }
            
    public static void minbleicsetlc(minbleicstate state, double[][] c, int[] ct, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minbleicsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minbleicsetlc(state, c, ct, k, _params);
    
    }
    
    public static void minbleicsetlc(minbleicstate state, double[][] c, int[] ct) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minbleicsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minbleicsetlc(state, c, ct, k, _params);
    
    }
    private static native int _jni_minbleicsetlc(mut_string error_msg, long state, double[][] c, int[] ct, int k, long _xparams);

    public static void minbleicsetcond(minbleicstate state, double epsg, double epsf, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetcond");
    }
    public static void minbleicsetcond(minbleicstate state, double epsg, double epsf, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetcond");
    }
    private static native int _jni_minbleicsetcond(mut_string error_msg, long state, double epsg, double epsf, double epsx, int maxits, long _xparams);

    public static void minbleicsetscale(minbleicstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetscale");
    }
    public static void minbleicsetscale(minbleicstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetscale");
    }
    private static native int _jni_minbleicsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minbleicsetprecdefault(minbleicstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecdefault() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecdefault() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetprecdefault(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetprecdefault");
    }
    public static void minbleicsetprecdefault(minbleicstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecdefault() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecdefault() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetprecdefault(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetprecdefault");
    }
    private static native int _jni_minbleicsetprecdefault(mut_string error_msg, long state, long _xparams);

    public static void minbleicsetprecdiag(minbleicstate state, double[] d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetprecdiag(error_msg, state.get_ptr(), d, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetprecdiag");
    }
    public static void minbleicsetprecdiag(minbleicstate state, double[] d) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetprecdiag(error_msg, state.get_ptr(), d, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetprecdiag");
    }
    private static native int _jni_minbleicsetprecdiag(mut_string error_msg, long state, double[] d, long _xparams);

    public static void minbleicsetprecscale(minbleicstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetprecscale(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetprecscale");
    }
    public static void minbleicsetprecscale(minbleicstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetprecscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetprecscale(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetprecscale");
    }
    private static native int _jni_minbleicsetprecscale(mut_string error_msg, long state, long _xparams);

    public static void minbleicsetxrep(minbleicstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetxrep");
    }
    public static void minbleicsetxrep(minbleicstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetxrep");
    }
    private static native int _jni_minbleicsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void minbleicsetstpmax(minbleicstate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetstpmax");
    }
    public static void minbleicsetstpmax(minbleicstate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetstpmax");
    }
    private static native int _jni_minbleicsetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static boolean minbleiciteration(minbleicstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleiciteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleiciteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleiciteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleiciteration");
        return lcl_result.val;
    }
    public static boolean minbleiciteration(minbleicstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleiciteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleiciteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleiciteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleiciteration");
        return lcl_result.val;
    }
    private static native int _jni_minbleiciteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void minbleicoptimize(minbleicstate state, ndimensional_func func, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minbleicoptimize(state, func, rep, obj, null);
    }
    
    public static void minbleicoptimize(minbleicstate state, ndimensional_func func, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        double lcl_f = 0;
        boolean xc_needf;
    
        //
        // Check correctness of interfaces
        //
        if( func==null )
            throw new alglib.exception("ALGLIB: error in 'minbleicoptimize()' (func is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minbleicstate_get_x(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minbleic_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minbleic_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minbleiciteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minbleiciteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minbleiciteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minbleicstate_get_xupdated(lcl_state);
                xc_needf = _jni_minbleicstate_get_needf(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needf )
                {
                    lcl_f = func.calc(rlc_arg.val, obj);
                    _jni_minbleicstate_set_f(lcl_state, lcl_f);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minbleicstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minbleicoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        }
    }
    public static void minbleicoptimize(minbleicstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minbleicoptimize(state, grad, rep, obj, null);
    }
    
    public static void minbleicoptimize(minbleicstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        double lcl_f = 0;
        long xv_g = 0;
        rlc_double1d rlc_g = new rlc_double1d();
        boolean xc_needfg;
    
        //
        // Check correctness of interfaces
        //
        if( grad==null )
            throw new alglib.exception("ALGLIB: error in 'minbleicoptimize()' (grad is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minbleicstate_get_x(lcl_state);
            xv_g = _jni_minbleicstate_get_g(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_g, rlc_g);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minbleic_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minbleic_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minbleiciteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minbleiciteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minbleiciteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minbleicstate_get_xupdated(lcl_state);
                xc_needfg = _jni_minbleicstate_get_needfg(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needfg )
                {
                    lcl_f = grad.calc(rlc_arg.val, rlc_g.val, obj);
                    _jni_minbleicstate_set_f(lcl_state, lcl_f);
                    _jni_x_vector_from_array(xv_g, rlc_g.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minbleicstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minbleicoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_g);
        }
    }
    private static native int _jni_rcv2_minbleic_set_protocol_v1(mut_string error_msg, long obj, long _xparams);

    public static void minbleicoptguardgradient(minbleicstate state, double teststep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardgradient(error_msg, state.get_ptr(), teststep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardgradient");
    }
    public static void minbleicoptguardgradient(minbleicstate state, double teststep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardgradient(error_msg, state.get_ptr(), teststep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardgradient");
    }
    private static native int _jni_minbleicoptguardgradient(mut_string error_msg, long state, double teststep, long _xparams);

    public static void minbleicoptguardsmoothness(minbleicstate state, int level, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardsmoothness(error_msg, state.get_ptr(), level, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardsmoothness");
    }
    public static void minbleicoptguardsmoothness(minbleicstate state, int level) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardsmoothness(error_msg, state.get_ptr(), level, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardsmoothness");
    }
            
    public static void minbleicoptguardsmoothness(minbleicstate state, alglib.xparams _params) throws alglib.exception
    {
        int level;
    
        level = 1;
        minbleicoptguardsmoothness(state, level, _params);
    
    }
    
    public static void minbleicoptguardsmoothness(minbleicstate state) throws alglib.exception
    {
        alglib.xparams _params = null;
        int level;
    
        level = 1;
        minbleicoptguardsmoothness(state, level, _params);
    
    }
    private static native int _jni_minbleicoptguardsmoothness(mut_string error_msg, long state, int level, long _xparams);

    public static optguardreport minbleicoptguardresults(minbleicstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardresults(error_msg, state.get_ptr(), lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    public static optguardreport minbleicoptguardresults(minbleicstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardresults(error_msg, state.get_ptr(), lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    private static native int _jni_minbleicoptguardresults(mut_string error_msg, long state, mut_object rep, long _xparams);

    public static class minbleicoptguardnonc1test0results_results
    {
        public optguardnonc1test0report strrep;
        public optguardnonc1test0report lngrep;
    }
    public static minbleicoptguardnonc1test0results_results minbleicoptguardnonc1test0results(minbleicstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardnonc1test0results");
        minbleicoptguardnonc1test0results_results ret_tuple = new minbleicoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static minbleicoptguardnonc1test0results_results minbleicoptguardnonc1test0results(minbleicstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardnonc1test0results");
        minbleicoptguardnonc1test0results_results ret_tuple = new minbleicoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_minbleicoptguardnonc1test0results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class minbleicoptguardnonc1test1results_results
    {
        public optguardnonc1test1report strrep;
        public optguardnonc1test1report lngrep;
    }
    public static minbleicoptguardnonc1test1results_results minbleicoptguardnonc1test1results(minbleicstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardnonc1test1results");
        minbleicoptguardnonc1test1results_results ret_tuple = new minbleicoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static minbleicoptguardnonc1test1results_results minbleicoptguardnonc1test1results(minbleicstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicoptguardnonc1test1results");
        minbleicoptguardnonc1test1results_results ret_tuple = new minbleicoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_minbleicoptguardnonc1test1results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class minbleicresults_results
    {
        public double[] x;
        public minbleicreport rep;
    }
    public static minbleicresults_results minbleicresults(minbleicstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicresults");
        minbleicresults_results ret_tuple = new minbleicresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minbleicreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minbleicresults_results minbleicresults(minbleicstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicresults");
        minbleicresults_results ret_tuple = new minbleicresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minbleicreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minbleicresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minbleicresultsbuf(minbleicstate state, double[] x, minbleicreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicresultsbuf");
        return lcl_x.val;
    }
    public static double[] minbleicresultsbuf(minbleicstate state, double[] x, minbleicreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minbleicresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void minbleicrestartfrom(minbleicstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicrestartfrom");
    }
    public static void minbleicrestartfrom(minbleicstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicrestartfrom");
    }
    private static native int _jni_minbleicrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    public static void minbleicrequesttermination(minbleicstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicrequesttermination");
    }
    public static void minbleicrequesttermination(minbleicstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicrequesttermination");
    }
    private static native int _jni_minbleicrequesttermination(mut_string error_msg, long state, long _xparams);

    
    
    //
    // Subpackage qpbleicsolver
    //
    
    
    
    //
    // Subpackage vipmsolver
    //
    
    
    
    //
    // Subpackage ipm2solver
    //
    
    
    
    //
    // Subpackage minqp
    //
    

    public static class minqpstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minqpstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minqpstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minqpstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minqpstate(0);
            return new minqpstate(_jni_x_obj_copy_minqpstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minqpstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minqpstate(long x);
    private static native void _jni_x_obj_free_minqpstate(long x);


        public static class minqpreport extends alglibobject
        {
            public int inneriterationscount;
            public int outeriterationscount;
            public int nmv;
            public int ncholesky;
            public int terminationtype;
            public double[] lagbc;
            public double[] laglc;
            public alglibobject make_copy()
            {
                minqpreport dst = new minqpreport();
                dst.inneriterationscount = inneriterationscount;
                dst.outeriterationscount = outeriterationscount;
                dst.nmv = nmv;
                dst.ncholesky = ncholesky;
                dst.terminationtype = terminationtype;
                dst.lagbc = alglib.make_copy(lagbc);
                dst.laglc = alglib.make_copy(laglc);
                return dst;
            }
        }

    public static minqpstate minqpcreate(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpcreate(error_msg, n, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpcreate");
        return new minqpstate(lcl_state.val);
    }
    public static minqpstate minqpcreate(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpcreate(error_msg, n, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpcreate");
        return new minqpstate(lcl_state.val);
    }
    private static native int _jni_minqpcreate(mut_string error_msg, int n, mut_long state, long _xparams);

    public static void minqpsetlinearterm(minqpstate state, double[] b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlinearterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlinearterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlinearterm(error_msg, state.get_ptr(), b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlinearterm");
    }
    public static void minqpsetlinearterm(minqpstate state, double[] b) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlinearterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlinearterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlinearterm(error_msg, state.get_ptr(), b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlinearterm");
    }
    private static native int _jni_minqpsetlinearterm(mut_string error_msg, long state, double[] b, long _xparams);

    public static void minqpsetquadraticterm(minqpstate state, double[][] a, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetquadraticterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetquadraticterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetquadraticterm(error_msg, state.get_ptr(), a, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetquadraticterm");
    }
    public static void minqpsetquadraticterm(minqpstate state, double[][] a, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetquadraticterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetquadraticterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetquadraticterm(error_msg, state.get_ptr(), a, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetquadraticterm");
    }
    private static native int _jni_minqpsetquadraticterm(mut_string error_msg, long state, double[][] a, boolean isupper, long _xparams);

    public static void minqpsetquadratictermsparse(minqpstate state, sparsematrix a, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetquadratictermsparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetquadratictermsparse() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minqpsetquadratictermsparse() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minqpsetquadratictermsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetquadratictermsparse(error_msg, state.get_ptr(), a.get_ptr(), isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetquadratictermsparse");
    }
    public static void minqpsetquadratictermsparse(minqpstate state, sparsematrix a, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetquadratictermsparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetquadratictermsparse() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minqpsetquadratictermsparse() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minqpsetquadratictermsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetquadratictermsparse(error_msg, state.get_ptr(), a.get_ptr(), isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetquadratictermsparse");
    }
    private static native int _jni_minqpsetquadratictermsparse(mut_string error_msg, long state, long a, boolean isupper, long _xparams);

    public static void minqpsetstartingpoint(minqpstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetstartingpoint() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetstartingpoint() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetstartingpoint(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetstartingpoint");
    }
    public static void minqpsetstartingpoint(minqpstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetstartingpoint() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetstartingpoint() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetstartingpoint(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetstartingpoint");
    }
    private static native int _jni_minqpsetstartingpoint(mut_string error_msg, long state, double[] x, long _xparams);

    public static void minqpsetorigin(minqpstate state, double[] xorigin, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetorigin() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetorigin() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetorigin(error_msg, state.get_ptr(), xorigin, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetorigin");
    }
    public static void minqpsetorigin(minqpstate state, double[] xorigin) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetorigin() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetorigin() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetorigin(error_msg, state.get_ptr(), xorigin, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetorigin");
    }
    private static native int _jni_minqpsetorigin(mut_string error_msg, long state, double[] xorigin, long _xparams);

    public static void minqpsetscale(minqpstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetscale");
    }
    public static void minqpsetscale(minqpstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetscale");
    }
    private static native int _jni_minqpsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minqpsetscaleautodiag(minqpstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetscaleautodiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetscaleautodiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetscaleautodiag(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetscaleautodiag");
    }
    public static void minqpsetscaleautodiag(minqpstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetscaleautodiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetscaleautodiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetscaleautodiag(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetscaleautodiag");
    }
    private static native int _jni_minqpsetscaleautodiag(mut_string error_msg, long state, long _xparams);

    public static void minqpsetalgobleic(minqpstate state, double epsg, double epsf, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgobleic() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgobleic() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgobleic(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgobleic");
    }
    public static void minqpsetalgobleic(minqpstate state, double epsg, double epsf, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgobleic() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgobleic() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgobleic(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgobleic");
    }
    private static native int _jni_minqpsetalgobleic(mut_string error_msg, long state, double epsg, double epsf, double epsx, int maxits, long _xparams);

    public static void minqpsetalgodenseaul(minqpstate state, double epsx, double rho, int itscnt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgodenseaul() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgodenseaul() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgodenseaul(error_msg, state.get_ptr(), epsx, rho, itscnt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgodenseaul");
    }
    public static void minqpsetalgodenseaul(minqpstate state, double epsx, double rho, int itscnt) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgodenseaul() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgodenseaul() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgodenseaul(error_msg, state.get_ptr(), epsx, rho, itscnt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgodenseaul");
    }
    private static native int _jni_minqpsetalgodenseaul(mut_string error_msg, long state, double epsx, double rho, int itscnt, long _xparams);

    public static void minqpsetalgodenseipm(minqpstate state, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgodenseipm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgodenseipm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgodenseipm(error_msg, state.get_ptr(), eps, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgodenseipm");
    }
    public static void minqpsetalgodenseipm(minqpstate state, double eps) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgodenseipm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgodenseipm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgodenseipm(error_msg, state.get_ptr(), eps, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgodenseipm");
    }
    private static native int _jni_minqpsetalgodenseipm(mut_string error_msg, long state, double eps, long _xparams);

    public static void minqpsetalgosparseipm(minqpstate state, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgosparseipm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgosparseipm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgosparseipm(error_msg, state.get_ptr(), eps, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgosparseipm");
    }
    public static void minqpsetalgosparseipm(minqpstate state, double eps) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgosparseipm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgosparseipm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgosparseipm(error_msg, state.get_ptr(), eps, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgosparseipm");
    }
    private static native int _jni_minqpsetalgosparseipm(mut_string error_msg, long state, double eps, long _xparams);

    public static void minqpsetalgoquickqp(minqpstate state, double epsg, double epsf, double epsx, int maxouterits, boolean usenewton, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgoquickqp() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgoquickqp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgoquickqp(error_msg, state.get_ptr(), epsg, epsf, epsx, maxouterits, usenewton, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgoquickqp");
    }
    public static void minqpsetalgoquickqp(minqpstate state, double epsg, double epsf, double epsx, int maxouterits, boolean usenewton) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgoquickqp() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetalgoquickqp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetalgoquickqp(error_msg, state.get_ptr(), epsg, epsf, epsx, maxouterits, usenewton, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetalgoquickqp");
    }
    private static native int _jni_minqpsetalgoquickqp(mut_string error_msg, long state, double epsg, double epsf, double epsx, int maxouterits, boolean usenewton, long _xparams);

    public static void minqpsetbc(minqpstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetbc");
    }
    public static void minqpsetbc(minqpstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetbc");
    }
    private static native int _jni_minqpsetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void minqpsetbcall(minqpstate state, double bndl, double bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbcall() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbcall() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetbcall(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetbcall");
    }
    public static void minqpsetbcall(minqpstate state, double bndl, double bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbcall() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbcall() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetbcall(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetbcall");
    }
    private static native int _jni_minqpsetbcall(mut_string error_msg, long state, double bndl, double bndu, long _xparams);

    public static void minqpsetbci(minqpstate state, int i, double bndl, double bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbci() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbci() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetbci(error_msg, state.get_ptr(), i, bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetbci");
    }
    public static void minqpsetbci(minqpstate state, int i, double bndl, double bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbci() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetbci() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetbci(error_msg, state.get_ptr(), i, bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetbci");
    }
    private static native int _jni_minqpsetbci(mut_string error_msg, long state, int i, double bndl, double bndu, long _xparams);

    public static void minqpsetlc(minqpstate state, double[][] c, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlc(error_msg, state.get_ptr(), c, ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlc");
    }
    public static void minqpsetlc(minqpstate state, double[][] c, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlc(error_msg, state.get_ptr(), c, ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlc");
    }
            
    public static void minqpsetlc(minqpstate state, double[][] c, int[] ct, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minqpsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minqpsetlc(state, c, ct, k, _params);
    
    }
    
    public static void minqpsetlc(minqpstate state, double[][] c, int[] ct) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minqpsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minqpsetlc(state, c, ct, k, _params);
    
    }
    private static native int _jni_minqpsetlc(mut_string error_msg, long state, double[][] c, int[] ct, int k, long _xparams);

    public static void minqpsetlcsparse(minqpstate state, sparsematrix c, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcsparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcsparse() points to deallocated ALGLIB object");
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of minqpsetlcsparse() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of minqpsetlcsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlcsparse(error_msg, state.get_ptr(), c.get_ptr(), ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlcsparse");
    }
    public static void minqpsetlcsparse(minqpstate state, sparsematrix c, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcsparse() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcsparse() points to deallocated ALGLIB object");
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of minqpsetlcsparse() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of minqpsetlcsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlcsparse(error_msg, state.get_ptr(), c.get_ptr(), ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlcsparse");
    }
    private static native int _jni_minqpsetlcsparse(mut_string error_msg, long state, long c, int[] ct, int k, long _xparams);

    public static void minqpsetlcmixed(minqpstate state, sparsematrix sparsec, int[] sparsect, int sparsek, double[][] densec, int[] densect, int densek, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcmixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcmixed() points to deallocated ALGLIB object");
        if( sparsec==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsec' of minqpsetlcmixed() is null");
        if( sparsec.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsec' of minqpsetlcmixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlcmixed(error_msg, state.get_ptr(), sparsec.get_ptr(), sparsect, sparsek, densec, densect, densek, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlcmixed");
    }
    public static void minqpsetlcmixed(minqpstate state, sparsematrix sparsec, int[] sparsect, int sparsek, double[][] densec, int[] densect, int densek) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcmixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcmixed() points to deallocated ALGLIB object");
        if( sparsec==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsec' of minqpsetlcmixed() is null");
        if( sparsec.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsec' of minqpsetlcmixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlcmixed(error_msg, state.get_ptr(), sparsec.get_ptr(), sparsect, sparsek, densec, densect, densek, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlcmixed");
    }
    private static native int _jni_minqpsetlcmixed(mut_string error_msg, long state, long sparsec, int[] sparsect, int sparsek, double[][] densec, int[] densect, int densek, long _xparams);

    public static void minqpsetlcmixedlegacy(minqpstate state, double[][] densec, int[] densect, int densek, sparsematrix sparsec, int[] sparsect, int sparsek, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcmixedlegacy() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcmixedlegacy() points to deallocated ALGLIB object");
        if( sparsec==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsec' of minqpsetlcmixedlegacy() is null");
        if( sparsec.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsec' of minqpsetlcmixedlegacy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlcmixedlegacy(error_msg, state.get_ptr(), densec, densect, densek, sparsec.get_ptr(), sparsect, sparsek, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlcmixedlegacy");
    }
    public static void minqpsetlcmixedlegacy(minqpstate state, double[][] densec, int[] densect, int densek, sparsematrix sparsec, int[] sparsect, int sparsek) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcmixedlegacy() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlcmixedlegacy() points to deallocated ALGLIB object");
        if( sparsec==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsec' of minqpsetlcmixedlegacy() is null");
        if( sparsec.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsec' of minqpsetlcmixedlegacy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlcmixedlegacy(error_msg, state.get_ptr(), densec, densect, densek, sparsec.get_ptr(), sparsect, sparsek, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlcmixedlegacy");
    }
    private static native int _jni_minqpsetlcmixedlegacy(mut_string error_msg, long state, double[][] densec, int[] densect, int densek, long sparsec, int[] sparsect, int sparsek, long _xparams);

    public static void minqpsetlc2dense(minqpstate state, double[][] a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlc2dense(error_msg, state.get_ptr(), a, al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlc2dense");
    }
    public static void minqpsetlc2dense(minqpstate state, double[][] a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlc2dense(error_msg, state.get_ptr(), a, al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlc2dense");
    }
            
    public static void minqpsetlc2dense(minqpstate state, double[][] a, double[] al, double[] au, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling minqpsetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minqpsetlc2dense(state, a, al, au, k, _params);
    
    }
    
    public static void minqpsetlc2dense(minqpstate state, double[][] a, double[] al, double[] au) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling minqpsetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minqpsetlc2dense(state, a, al, au, k, _params);
    
    }
    private static native int _jni_minqpsetlc2dense(mut_string error_msg, long state, double[][] a, double[] al, double[] au, int k, long _xparams);

    public static void minqpsetlc2(minqpstate state, sparsematrix a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minqpsetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minqpsetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlc2(error_msg, state.get_ptr(), a.get_ptr(), al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlc2");
    }
    public static void minqpsetlc2(minqpstate state, sparsematrix a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minqpsetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minqpsetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlc2(error_msg, state.get_ptr(), a.get_ptr(), al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlc2");
    }
    private static native int _jni_minqpsetlc2(mut_string error_msg, long state, long a, double[] al, double[] au, int k, long _xparams);

    public static void minqpsetlc2mixed(minqpstate state, sparsematrix sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2mixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2mixed() points to deallocated ALGLIB object");
        if( sparsea==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minqpsetlc2mixed() is null");
        if( sparsea.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minqpsetlc2mixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlc2mixed(error_msg, state.get_ptr(), sparsea.get_ptr(), ksparse, densea, kdense, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlc2mixed");
    }
    public static void minqpsetlc2mixed(minqpstate state, sparsematrix sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2mixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpsetlc2mixed() points to deallocated ALGLIB object");
        if( sparsea==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minqpsetlc2mixed() is null");
        if( sparsea.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minqpsetlc2mixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpsetlc2mixed(error_msg, state.get_ptr(), sparsea.get_ptr(), ksparse, densea, kdense, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpsetlc2mixed");
    }
    private static native int _jni_minqpsetlc2mixed(mut_string error_msg, long state, long sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au, long _xparams);

    public static void minqpaddlc2dense(minqpstate state, double[] a, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpaddlc2dense(error_msg, state.get_ptr(), a, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpaddlc2dense");
    }
    public static void minqpaddlc2dense(minqpstate state, double[] a, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpaddlc2dense(error_msg, state.get_ptr(), a, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpaddlc2dense");
    }
    private static native int _jni_minqpaddlc2dense(mut_string error_msg, long state, double[] a, double al, double au, long _xparams);

    public static void minqpaddlc2(minqpstate state, int[] idxa, double[] vala, int nnz, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpaddlc2(error_msg, state.get_ptr(), idxa, vala, nnz, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpaddlc2");
    }
    public static void minqpaddlc2(minqpstate state, int[] idxa, double[] vala, int nnz, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpaddlc2(error_msg, state.get_ptr(), idxa, vala, nnz, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpaddlc2");
    }
    private static native int _jni_minqpaddlc2(mut_string error_msg, long state, int[] idxa, double[] vala, int nnz, double al, double au, long _xparams);

    public static void minqpaddlc2sparsefromdense(minqpstate state, double[] da, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2sparsefromdense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2sparsefromdense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpaddlc2sparsefromdense(error_msg, state.get_ptr(), da, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpaddlc2sparsefromdense");
    }
    public static void minqpaddlc2sparsefromdense(minqpstate state, double[] da, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2sparsefromdense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpaddlc2sparsefromdense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpaddlc2sparsefromdense(error_msg, state.get_ptr(), da, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpaddlc2sparsefromdense");
    }
    private static native int _jni_minqpaddlc2sparsefromdense(mut_string error_msg, long state, double[] da, double al, double au, long _xparams);

    public static void minqpoptimize(minqpstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpoptimize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpoptimize(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpoptimize");
    }
    public static void minqpoptimize(minqpstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpoptimize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpoptimize(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpoptimize");
    }
    private static native int _jni_minqpoptimize(mut_string error_msg, long state, long _xparams);

    public static class minqpresults_results
    {
        public double[] x;
        public minqpreport rep;
    }
    public static minqpresults_results minqpresults(minqpstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpresults");
        minqpresults_results ret_tuple = new minqpresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minqpreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minqpresults_results minqpresults(minqpstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpresults");
        minqpresults_results ret_tuple = new minqpresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minqpreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minqpresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minqpresultsbuf(minqpstate state, double[] x, minqpreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpresultsbuf");
        return lcl_x.val;
    }
    public static double[] minqpresultsbuf(minqpstate state, double[] x, minqpreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minqpresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minqpresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minqpresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minqpresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    
    
    //
    // Subpackage nlcfsqp
    //
    
    
    
    //
    // Subpackage minlm
    //
    

    public static class minlmstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minlmstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minlmstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minlmstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minlmstate(0);
            return new minlmstate(_jni_x_obj_copy_minlmstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minlmstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minlmstate(long x);
    private static native void _jni_x_obj_free_minlmstate(long x);


        public static class minlmreport extends alglibobject
        {
            public int iterationscount;
            public int terminationtype;
            public int nfunc;
            public int njac;
            public int ngrad;
            public int nhess;
            public int ncholesky;
            public alglibobject make_copy()
            {
                minlmreport dst = new minlmreport();
                dst.iterationscount = iterationscount;
                dst.terminationtype = terminationtype;
                dst.nfunc = nfunc;
                dst.njac = njac;
                dst.ngrad = ngrad;
                dst.nhess = nhess;
                dst.ncholesky = ncholesky;
                return dst;
            }
        }

    public static minlmstate minlmcreatevj(int n, int m, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmcreatevj(error_msg, n, m, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmcreatevj");
        return new minlmstate(lcl_state.val);
    }
    public static minlmstate minlmcreatevj(int n, int m, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmcreatevj(error_msg, n, m, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmcreatevj");
        return new minlmstate(lcl_state.val);
    }
            
    public static minlmstate minlmcreatevj(int m, double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minlmcreatevj(n, m, x, _params);
    
    }
    
    public static minlmstate minlmcreatevj(int m, double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minlmcreatevj(n, m, x, _params);
    
    }
    private static native int _jni_minlmcreatevj(mut_string error_msg, int n, int m, double[] x, mut_long state, long _xparams);

    public static minlmstate minlmcreatev(int n, int m, double[] x, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmcreatev(error_msg, n, m, x, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmcreatev");
        return new minlmstate(lcl_state.val);
    }
    public static minlmstate minlmcreatev(int n, int m, double[] x, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmcreatev(error_msg, n, m, x, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmcreatev");
        return new minlmstate(lcl_state.val);
    }
            
    public static minlmstate minlmcreatev(int m, double[] x, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minlmcreatev(n, m, x, diffstep, _params);
    
    }
    
    public static minlmstate minlmcreatev(int m, double[] x, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minlmcreatev(n, m, x, diffstep, _params);
    
    }
    private static native int _jni_minlmcreatev(mut_string error_msg, int n, int m, double[] x, double diffstep, mut_long state, long _xparams);

    public static void minlmsetcond(minlmstate state, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetcond(error_msg, state.get_ptr(), epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetcond");
    }
    public static void minlmsetcond(minlmstate state, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetcond(error_msg, state.get_ptr(), epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetcond");
    }
    private static native int _jni_minlmsetcond(mut_string error_msg, long state, double epsx, int maxits, long _xparams);

    public static void minlmsetxrep(minlmstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetxrep");
    }
    public static void minlmsetxrep(minlmstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetxrep");
    }
    private static native int _jni_minlmsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void minlmsetstpmax(minlmstate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetstpmax");
    }
    public static void minlmsetstpmax(minlmstate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetstpmax");
    }
    private static native int _jni_minlmsetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static void minlmsetscale(minlmstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetscale");
    }
    public static void minlmsetscale(minlmstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetscale");
    }
    private static native int _jni_minlmsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minlmsetbc(minlmstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetbc");
    }
    public static void minlmsetbc(minlmstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetbc");
    }
    private static native int _jni_minlmsetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void minlmsetlc(minlmstate state, double[][] c, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetlc(error_msg, state.get_ptr(), c, ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetlc");
    }
    public static void minlmsetlc(minlmstate state, double[][] c, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetlc(error_msg, state.get_ptr(), c, ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetlc");
    }
            
    public static void minlmsetlc(minlmstate state, double[][] c, int[] ct, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minlmsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minlmsetlc(state, c, ct, k, _params);
    
    }
    
    public static void minlmsetlc(minlmstate state, double[][] c, int[] ct) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minlmsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minlmsetlc(state, c, ct, k, _params);
    
    }
    private static native int _jni_minlmsetlc(mut_string error_msg, long state, double[][] c, int[] ct, int k, long _xparams);

    public static void minlmsetacctype(minlmstate state, int acctype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetacctype() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetacctype() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetacctype(error_msg, state.get_ptr(), acctype, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetacctype");
    }
    public static void minlmsetacctype(minlmstate state, int acctype) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetacctype() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetacctype() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetacctype(error_msg, state.get_ptr(), acctype, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetacctype");
    }
    private static native int _jni_minlmsetacctype(mut_string error_msg, long state, int acctype, long _xparams);

    public static void minlmsetnonmonotonicsteps(minlmstate state, int cnt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetnonmonotonicsteps() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetnonmonotonicsteps() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetnonmonotonicsteps(error_msg, state.get_ptr(), cnt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetnonmonotonicsteps");
    }
    public static void minlmsetnonmonotonicsteps(minlmstate state, int cnt) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetnonmonotonicsteps() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmsetnonmonotonicsteps() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmsetnonmonotonicsteps(error_msg, state.get_ptr(), cnt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmsetnonmonotonicsteps");
    }
    private static native int _jni_minlmsetnonmonotonicsteps(mut_string error_msg, long state, int cnt, long _xparams);

    public static boolean minlmiteration(minlmstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmiteration");
        return lcl_result.val;
    }
    public static boolean minlmiteration(minlmstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmiteration");
        return lcl_result.val;
    }
    private static native int _jni_minlmiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void minlmoptimize(minlmstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minlmoptimize(state, fvec, rep, obj, null);
    }
    
    public static void minlmoptimize(minlmstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( fvec==null )
        throw new alglib.exception("ALGLIB: error in 'minlmoptimize()' (fvec is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "minlm");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minlm_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minlm_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minlmiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minlmiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minlmiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_minlm, state.get_ptr());
                buffers.resize(request);
                if( request.request==3 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_3phase0(request, job_idx, null, null, fvec, null, buffers);
                    _process_v2request_3phase1(request);
                    request.send_reply();
                    continue;
                }
                if( request.request==5 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_5phase0(request, job_idx, null, null, fvec, null, buffers);
                    _process_v2request_5phase1(request);
                    request.send_reply();
                    continue;
                }if( request.request==4 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_4(request, qidx, null, null, fvec, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minlmoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    public static void minlmoptimize(minlmstate state, ndimensional_fvec fvec, ndimensional_jac jac, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minlmoptimize(state, fvec, jac, rep, obj, null);
    }
    
    public static void minlmoptimize(minlmstate state, ndimensional_fvec fvec, ndimensional_jac jac, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( fvec==null )
        throw new alglib.exception("ALGLIB: error in 'minlmoptimize()' (fvec is null)");
    if( jac==null )
        throw new alglib.exception("ALGLIB: error in 'minlmoptimize()' (jac is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "minlm");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minlm_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minlm_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minlmiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minlmiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minlmiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_minlm, state.get_ptr());
                buffers.resize(request);
                if( request.request==2 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_2(request, qidx, null, null, jac, null, buffers);
                    request.send_reply();
                    continue;
                }if( request.request==4 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_4(request, qidx, null, null, fvec, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minlmoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    private static native int _jni_rcv2_minlm_set_protocol_v2(mut_string error_msg, long obj, long _xparams);
    private static native int _jni_rcv2_fetch_minlm(_rcommv2_request request, long obj);

    public static void minlmoptguardgradient(minlmstate state, double teststep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmoptguardgradient(error_msg, state.get_ptr(), teststep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmoptguardgradient");
    }
    public static void minlmoptguardgradient(minlmstate state, double teststep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmoptguardgradient(error_msg, state.get_ptr(), teststep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmoptguardgradient");
    }
    private static native int _jni_minlmoptguardgradient(mut_string error_msg, long state, double teststep, long _xparams);

    public static optguardreport minlmoptguardresults(minlmstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmoptguardresults(error_msg, state.get_ptr(), lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    public static optguardreport minlmoptguardresults(minlmstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmoptguardresults(error_msg, state.get_ptr(), lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    private static native int _jni_minlmoptguardresults(mut_string error_msg, long state, mut_object rep, long _xparams);

    public static class minlmresults_results
    {
        public double[] x;
        public minlmreport rep;
    }
    public static minlmresults_results minlmresults(minlmstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmresults");
        minlmresults_results ret_tuple = new minlmresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minlmreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minlmresults_results minlmresults(minlmstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmresults");
        minlmresults_results ret_tuple = new minlmresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minlmreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minlmresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minlmresultsbuf(minlmstate state, double[] x, minlmreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmresultsbuf");
        return lcl_x.val;
    }
    public static double[] minlmresultsbuf(minlmstate state, double[] x, minlmreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minlmresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void minlmrestartfrom(minlmstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmrestartfrom");
    }
    public static void minlmrestartfrom(minlmstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmrestartfrom");
    }
    private static native int _jni_minlmrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    public static void minlmrequesttermination(minlmstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmrequesttermination");
    }
    public static void minlmrequesttermination(minlmstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlmrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlmrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlmrequesttermination");
    }
    private static native int _jni_minlmrequesttermination(mut_string error_msg, long state, long _xparams);

    
    
    //
    // Subpackage nlcaul
    //
    
    
    
    //
    // Subpackage mincg
    //
    

    public static class mincgstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected mincgstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected mincgstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected mincgstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new mincgstate(0);
            return new mincgstate(_jni_x_obj_copy_mincgstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_mincgstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_mincgstate(long x);
    private static native void _jni_x_obj_free_mincgstate(long x);
    private static native boolean _jni_mincgstate_get_needf(long x);
    private static native void _jni_mincgstate_set_needf(long x, boolean v);
    private static native boolean _jni_mincgstate_get_needfg(long x);
    private static native void _jni_mincgstate_set_needfg(long x, boolean v);
    private static native boolean _jni_mincgstate_get_xupdated(long x);
    private static native void _jni_mincgstate_set_xupdated(long x, boolean v);
    private static native double _jni_mincgstate_get_f(long x);
    private static native void _jni_mincgstate_set_f(long x, double v);
    private static native long _jni_mincgstate_get_g(long obj);
    private static native long _jni_mincgstate_get_x(long obj);


        public static class mincgreport extends alglibobject
        {
            public int iterationscount;
            public int nfev;
            public int terminationtype;
            public alglibobject make_copy()
            {
                mincgreport dst = new mincgreport();
                dst.iterationscount = iterationscount;
                dst.nfev = nfev;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static mincgstate mincgcreate(int n, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgcreate(error_msg, n, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgcreate");
        return new mincgstate(lcl_state.val);
    }
    public static mincgstate mincgcreate(int n, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgcreate(error_msg, n, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgcreate");
        return new mincgstate(lcl_state.val);
    }
            
    public static mincgstate mincgcreate(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return mincgcreate(n, x, _params);
    
    }
    
    public static mincgstate mincgcreate(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return mincgcreate(n, x, _params);
    
    }
    private static native int _jni_mincgcreate(mut_string error_msg, int n, double[] x, mut_long state, long _xparams);

    public static mincgstate mincgcreatef(int n, double[] x, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgcreatef(error_msg, n, x, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgcreatef");
        return new mincgstate(lcl_state.val);
    }
    public static mincgstate mincgcreatef(int n, double[] x, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgcreatef(error_msg, n, x, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgcreatef");
        return new mincgstate(lcl_state.val);
    }
            
    public static mincgstate mincgcreatef(double[] x, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return mincgcreatef(n, x, diffstep, _params);
    
    }
    
    public static mincgstate mincgcreatef(double[] x, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return mincgcreatef(n, x, diffstep, _params);
    
    }
    private static native int _jni_mincgcreatef(mut_string error_msg, int n, double[] x, double diffstep, mut_long state, long _xparams);

    public static void mincgsetcond(mincgstate state, double epsg, double epsf, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetcond");
    }
    public static void mincgsetcond(mincgstate state, double epsg, double epsf, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetcond");
    }
    private static native int _jni_mincgsetcond(mut_string error_msg, long state, double epsg, double epsf, double epsx, int maxits, long _xparams);

    public static void mincgsetscale(mincgstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetscale");
    }
    public static void mincgsetscale(mincgstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetscale");
    }
    private static native int _jni_mincgsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void mincgsetxrep(mincgstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetxrep");
    }
    public static void mincgsetxrep(mincgstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetxrep");
    }
    private static native int _jni_mincgsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void mincgsetcgtype(mincgstate state, int cgtype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetcgtype() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetcgtype() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetcgtype(error_msg, state.get_ptr(), cgtype, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetcgtype");
    }
    public static void mincgsetcgtype(mincgstate state, int cgtype) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetcgtype() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetcgtype() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetcgtype(error_msg, state.get_ptr(), cgtype, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetcgtype");
    }
    private static native int _jni_mincgsetcgtype(mut_string error_msg, long state, int cgtype, long _xparams);

    public static void mincgsetstpmax(mincgstate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetstpmax");
    }
    public static void mincgsetstpmax(mincgstate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetstpmax");
    }
    private static native int _jni_mincgsetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static void mincgsuggeststep(mincgstate state, double stp, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsuggeststep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsuggeststep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsuggeststep(error_msg, state.get_ptr(), stp, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsuggeststep");
    }
    public static void mincgsuggeststep(mincgstate state, double stp) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsuggeststep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsuggeststep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsuggeststep(error_msg, state.get_ptr(), stp, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsuggeststep");
    }
    private static native int _jni_mincgsuggeststep(mut_string error_msg, long state, double stp, long _xparams);

    public static void mincgsetprecdefault(mincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecdefault() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecdefault() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetprecdefault(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetprecdefault");
    }
    public static void mincgsetprecdefault(mincgstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecdefault() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecdefault() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetprecdefault(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetprecdefault");
    }
    private static native int _jni_mincgsetprecdefault(mut_string error_msg, long state, long _xparams);

    public static void mincgsetprecdiag(mincgstate state, double[] d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetprecdiag(error_msg, state.get_ptr(), d, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetprecdiag");
    }
    public static void mincgsetprecdiag(mincgstate state, double[] d) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetprecdiag(error_msg, state.get_ptr(), d, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetprecdiag");
    }
    private static native int _jni_mincgsetprecdiag(mut_string error_msg, long state, double[] d, long _xparams);

    public static void mincgsetprecscale(mincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetprecscale(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetprecscale");
    }
    public static void mincgsetprecscale(mincgstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgsetprecscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgsetprecscale(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgsetprecscale");
    }
    private static native int _jni_mincgsetprecscale(mut_string error_msg, long state, long _xparams);

    public static boolean mincgiteration(mincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgiteration");
        return lcl_result.val;
    }
    public static boolean mincgiteration(mincgstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgiteration");
        return lcl_result.val;
    }
    private static native int _jni_mincgiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void mincgoptimize(mincgstate state, ndimensional_func func, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        mincgoptimize(state, func, rep, obj, null);
    }
    
    public static void mincgoptimize(mincgstate state, ndimensional_func func, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        double lcl_f = 0;
        boolean xc_needf;
    
        //
        // Check correctness of interfaces
        //
        if( func==null )
            throw new alglib.exception("ALGLIB: error in 'mincgoptimize()' (func is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_mincgstate_get_x(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_mincg_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "mincg_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "mincgiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_mincgiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "mincgiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_mincgstate_get_xupdated(lcl_state);
                xc_needf = _jni_mincgstate_get_needf(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needf )
                {
                    lcl_f = func.calc(rlc_arg.val, obj);
                    _jni_mincgstate_set_f(lcl_state, lcl_f);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_mincgstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'mincgoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        }
    }
    public static void mincgoptimize(mincgstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        mincgoptimize(state, grad, rep, obj, null);
    }
    
    public static void mincgoptimize(mincgstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        double lcl_f = 0;
        long xv_g = 0;
        rlc_double1d rlc_g = new rlc_double1d();
        boolean xc_needfg;
    
        //
        // Check correctness of interfaces
        //
        if( grad==null )
            throw new alglib.exception("ALGLIB: error in 'mincgoptimize()' (grad is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_mincgstate_get_x(lcl_state);
            xv_g = _jni_mincgstate_get_g(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_g, rlc_g);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_mincg_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "mincg_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "mincgiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_mincgiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "mincgiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_mincgstate_get_xupdated(lcl_state);
                xc_needfg = _jni_mincgstate_get_needfg(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needfg )
                {
                    lcl_f = grad.calc(rlc_arg.val, rlc_g.val, obj);
                    _jni_mincgstate_set_f(lcl_state, lcl_f);
                    _jni_x_vector_from_array(xv_g, rlc_g.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_mincgstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'mincgoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_g);
        }
    }
    private static native int _jni_rcv2_mincg_set_protocol_v1(mut_string error_msg, long obj, long _xparams);

    public static void mincgoptguardgradient(mincgstate state, double teststep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardgradient(error_msg, state.get_ptr(), teststep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardgradient");
    }
    public static void mincgoptguardgradient(mincgstate state, double teststep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardgradient(error_msg, state.get_ptr(), teststep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardgradient");
    }
    private static native int _jni_mincgoptguardgradient(mut_string error_msg, long state, double teststep, long _xparams);

    public static void mincgoptguardsmoothness(mincgstate state, int level, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardsmoothness(error_msg, state.get_ptr(), level, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardsmoothness");
    }
    public static void mincgoptguardsmoothness(mincgstate state, int level) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardsmoothness(error_msg, state.get_ptr(), level, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardsmoothness");
    }
            
    public static void mincgoptguardsmoothness(mincgstate state, alglib.xparams _params) throws alglib.exception
    {
        int level;
    
        level = 1;
        mincgoptguardsmoothness(state, level, _params);
    
    }
    
    public static void mincgoptguardsmoothness(mincgstate state) throws alglib.exception
    {
        alglib.xparams _params = null;
        int level;
    
        level = 1;
        mincgoptguardsmoothness(state, level, _params);
    
    }
    private static native int _jni_mincgoptguardsmoothness(mut_string error_msg, long state, int level, long _xparams);

    public static optguardreport mincgoptguardresults(mincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardresults(error_msg, state.get_ptr(), lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    public static optguardreport mincgoptguardresults(mincgstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardresults(error_msg, state.get_ptr(), lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    private static native int _jni_mincgoptguardresults(mut_string error_msg, long state, mut_object rep, long _xparams);

    public static class mincgoptguardnonc1test0results_results
    {
        public optguardnonc1test0report strrep;
        public optguardnonc1test0report lngrep;
    }
    public static mincgoptguardnonc1test0results_results mincgoptguardnonc1test0results(mincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardnonc1test0results");
        mincgoptguardnonc1test0results_results ret_tuple = new mincgoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static mincgoptguardnonc1test0results_results mincgoptguardnonc1test0results(mincgstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardnonc1test0results");
        mincgoptguardnonc1test0results_results ret_tuple = new mincgoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_mincgoptguardnonc1test0results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class mincgoptguardnonc1test1results_results
    {
        public optguardnonc1test1report strrep;
        public optguardnonc1test1report lngrep;
    }
    public static mincgoptguardnonc1test1results_results mincgoptguardnonc1test1results(mincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardnonc1test1results");
        mincgoptguardnonc1test1results_results ret_tuple = new mincgoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static mincgoptguardnonc1test1results_results mincgoptguardnonc1test1results(mincgstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgoptguardnonc1test1results");
        mincgoptguardnonc1test1results_results ret_tuple = new mincgoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_mincgoptguardnonc1test1results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class mincgresults_results
    {
        public double[] x;
        public mincgreport rep;
    }
    public static mincgresults_results mincgresults(mincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgresults");
        mincgresults_results ret_tuple = new mincgresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (mincgreport)lcl_rep.val;
        return ret_tuple;
    }
    public static mincgresults_results mincgresults(mincgstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgresults");
        mincgresults_results ret_tuple = new mincgresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (mincgreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_mincgresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] mincgresultsbuf(mincgstate state, double[] x, mincgreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgresultsbuf");
        return lcl_x.val;
    }
    public static double[] mincgresultsbuf(mincgstate state, double[] x, mincgreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_mincgresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void mincgrestartfrom(mincgstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgrestartfrom");
    }
    public static void mincgrestartfrom(mincgstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgrestartfrom");
    }
    private static native int _jni_mincgrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    public static void mincgrequesttermination(mincgstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgrequesttermination");
    }
    public static void mincgrequesttermination(mincgstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mincgrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mincgrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mincgrequesttermination");
    }
    private static native int _jni_mincgrequesttermination(mut_string error_msg, long state, long _xparams);

    
    
    //
    // Subpackage dfgenmod
    //
    
    
    
    //
    // Subpackage nlcsqp
    //
    
    
    
    //
    // Subpackage ssgd
    //
    
    
    
    //
    // Subpackage diffevo
    //
    
    
    
    //
    // Subpackage mindf
    //
    

    public static class mindfstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected mindfstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected mindfstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected mindfstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new mindfstate(0);
            return new mindfstate(_jni_x_obj_copy_mindfstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_mindfstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_mindfstate(long x);
    private static native void _jni_x_obj_free_mindfstate(long x);


        public static class mindfreport extends alglibobject
        {
            public int iterationscount;
            public int nfev;
            public double bcerr;
            public double lcerr;
            public double nlcerr;
            public int terminationtype;
            public alglibobject make_copy()
            {
                mindfreport dst = new mindfreport();
                dst.iterationscount = iterationscount;
                dst.nfev = nfev;
                dst.bcerr = bcerr;
                dst.lcerr = lcerr;
                dst.nlcerr = nlcerr;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static mindfstate mindfcreate(int n, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfcreate(error_msg, n, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfcreate");
        return new mindfstate(lcl_state.val);
    }
    public static mindfstate mindfcreate(int n, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfcreate(error_msg, n, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfcreate");
        return new mindfstate(lcl_state.val);
    }
            
    public static mindfstate mindfcreate(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return mindfcreate(n, x, _params);
    
    }
    
    public static mindfstate mindfcreate(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return mindfcreate(n, x, _params);
    
    }
    private static native int _jni_mindfcreate(mut_string error_msg, int n, double[] x, mut_long state, long _xparams);

    public static void mindfsetbc(mindfstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetbc");
    }
    public static void mindfsetbc(mindfstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetbc");
    }
    private static native int _jni_mindfsetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void mindfsetlc2dense(mindfstate state, double[][] a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetlc2dense(error_msg, state.get_ptr(), a, al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetlc2dense");
    }
    public static void mindfsetlc2dense(mindfstate state, double[][] a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetlc2dense(error_msg, state.get_ptr(), a, al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetlc2dense");
    }
            
    public static void mindfsetlc2dense(mindfstate state, double[][] a, double[] al, double[] au, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling mindfsetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        mindfsetlc2dense(state, a, al, au, k, _params);
    
    }
    
    public static void mindfsetlc2dense(mindfstate state, double[][] a, double[] al, double[] au) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling mindfsetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        mindfsetlc2dense(state, a, al, au, k, _params);
    
    }
    private static native int _jni_mindfsetlc2dense(mut_string error_msg, long state, double[][] a, double[] al, double[] au, int k, long _xparams);

    public static void mindfsetnlc2(mindfstate state, double[] nl, double[] nu, int nnlc, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetnlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetnlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetnlc2(error_msg, state.get_ptr(), nl, nu, nnlc, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetnlc2");
    }
    public static void mindfsetnlc2(mindfstate state, double[] nl, double[] nu, int nnlc) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetnlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetnlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetnlc2(error_msg, state.get_ptr(), nl, nu, nnlc, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetnlc2");
    }
            
    public static void mindfsetnlc2(mindfstate state, double[] nl, double[] nu, alglib.xparams _params) throws alglib.exception
    {
        int nnlc;
        if( (nl.length!=nu.length))
            throw new exception("Error while calling mindfsetnlc2(): looks like one of arguments has wrong size");
        nnlc = nl.length;
        mindfsetnlc2(state, nl, nu, nnlc, _params);
    
    }
    
    public static void mindfsetnlc2(mindfstate state, double[] nl, double[] nu) throws alglib.exception
    {
        alglib.xparams _params = null;
        int nnlc;
        if( (nl.length!=nu.length))
            throw new exception("Error while calling mindfsetnlc2(): looks like one of arguments has wrong size");
        nnlc = nl.length;
        mindfsetnlc2(state, nl, nu, nnlc, _params);
    
    }
    private static native int _jni_mindfsetnlc2(mut_string error_msg, long state, double[] nl, double[] nu, int nnlc, long _xparams);

    public static void mindfsetcondfx(mindfstate state, double epsf, double epsx, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetcondfx() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetcondfx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetcondfx(error_msg, state.get_ptr(), epsf, epsx, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetcondfx");
    }
    public static void mindfsetcondfx(mindfstate state, double epsf, double epsx) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetcondfx() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetcondfx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetcondfx(error_msg, state.get_ptr(), epsf, epsx, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetcondfx");
    }
    private static native int _jni_mindfsetcondfx(mut_string error_msg, long state, double epsf, double epsx, long _xparams);

    public static void mindfsetcondf(mindfstate state, double epsf, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetcondf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetcondf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetcondf(error_msg, state.get_ptr(), epsf, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetcondf");
    }
    public static void mindfsetcondf(mindfstate state, double epsf) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetcondf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetcondf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetcondf(error_msg, state.get_ptr(), epsf, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetcondf");
    }
    private static native int _jni_mindfsetcondf(mut_string error_msg, long state, double epsf, long _xparams);

    public static void mindfsetscale(mindfstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetscale");
    }
    public static void mindfsetscale(mindfstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetscale");
    }
    private static native int _jni_mindfsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void mindfrequesttermination(mindfstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfrequesttermination");
    }
    public static void mindfrequesttermination(mindfstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfrequesttermination");
    }
    private static native int _jni_mindfrequesttermination(mut_string error_msg, long state, long _xparams);

    public static void mindfsetseed(mindfstate s, int seedval, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mindfsetseed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mindfsetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetseed(error_msg, s.get_ptr(), seedval, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetseed");
    }
    public static void mindfsetseed(mindfstate s, int seedval) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mindfsetseed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mindfsetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetseed(error_msg, s.get_ptr(), seedval, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetseed");
    }
    private static native int _jni_mindfsetseed(mut_string error_msg, long s, int seedval, long _xparams);

    public static void mindfsetalgogdemo(mindfstate state, int epochscnt, int popsize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetalgogdemo() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetalgogdemo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetalgogdemo(error_msg, state.get_ptr(), epochscnt, popsize, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetalgogdemo");
    }
    public static void mindfsetalgogdemo(mindfstate state, int epochscnt, int popsize) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetalgogdemo() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetalgogdemo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetalgogdemo(error_msg, state.get_ptr(), epochscnt, popsize, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetalgogdemo");
    }
            
    public static void mindfsetalgogdemo(mindfstate state, int epochscnt, alglib.xparams _params) throws alglib.exception
    {
        int popsize;
    
        popsize = 0;
        mindfsetalgogdemo(state, epochscnt, popsize, _params);
    
    }
    
    public static void mindfsetalgogdemo(mindfstate state, int epochscnt) throws alglib.exception
    {
        alglib.xparams _params = null;
        int popsize;
    
        popsize = 0;
        mindfsetalgogdemo(state, epochscnt, popsize, _params);
    
    }
    private static native int _jni_mindfsetalgogdemo(mut_string error_msg, long state, int epochscnt, int popsize, long _xparams);

    public static void mindfsetgdemoprofilerobust(mindfstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemoprofilerobust() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemoprofilerobust() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetgdemoprofilerobust(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetgdemoprofilerobust");
    }
    public static void mindfsetgdemoprofilerobust(mindfstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemoprofilerobust() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemoprofilerobust() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetgdemoprofilerobust(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetgdemoprofilerobust");
    }
    private static native int _jni_mindfsetgdemoprofilerobust(mut_string error_msg, long state, long _xparams);

    public static void mindfsetgdemoprofilequick(mindfstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemoprofilequick() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemoprofilequick() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetgdemoprofilequick(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetgdemoprofilequick");
    }
    public static void mindfsetgdemoprofilequick(mindfstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemoprofilequick() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemoprofilequick() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetgdemoprofilequick(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetgdemoprofilequick");
    }
    private static native int _jni_mindfsetgdemoprofilequick(mut_string error_msg, long state, long _xparams);

    public static void mindfsetgdemopenalty(mindfstate state, double rho1, double rho2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemopenalty() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemopenalty() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetgdemopenalty(error_msg, state.get_ptr(), rho1, rho2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetgdemopenalty");
    }
    public static void mindfsetgdemopenalty(mindfstate state, double rho1, double rho2) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemopenalty() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetgdemopenalty() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetgdemopenalty(error_msg, state.get_ptr(), rho1, rho2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetgdemopenalty");
    }
    private static native int _jni_mindfsetgdemopenalty(mut_string error_msg, long state, double rho1, double rho2, long _xparams);

    public static void mindfsetalgogdemofixed(mindfstate state, int epochscnt, int strategy, double crossoverprob, double differentialweight, int popsize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetalgogdemofixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetalgogdemofixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetalgogdemofixed(error_msg, state.get_ptr(), epochscnt, strategy, crossoverprob, differentialweight, popsize, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetalgogdemofixed");
    }
    public static void mindfsetalgogdemofixed(mindfstate state, int epochscnt, int strategy, double crossoverprob, double differentialweight, int popsize) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetalgogdemofixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfsetalgogdemofixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfsetalgogdemofixed(error_msg, state.get_ptr(), epochscnt, strategy, crossoverprob, differentialweight, popsize, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfsetalgogdemofixed");
    }
    private static native int _jni_mindfsetalgogdemofixed(mut_string error_msg, long state, int epochscnt, int strategy, double crossoverprob, double differentialweight, int popsize, long _xparams);

    public static boolean mindfiteration(mindfstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfiteration");
        return lcl_result.val;
    }
    public static boolean mindfiteration(mindfstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfiteration");
        return lcl_result.val;
    }
    private static native int _jni_mindfiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void mindfoptimize(mindfstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        mindfoptimize(state, fvec, rep, obj, null);
    }
    
    public static void mindfoptimize(mindfstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( fvec==null )
        throw new alglib.exception("ALGLIB: error in 'mindfoptimize()' (fvec is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "mindf");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_mindf_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "mindf_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "mindfiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_mindfiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "mindfiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_mindf, state.get_ptr());
                buffers.resize(request);
                if( request.request==3 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_3phase0(request, job_idx, null, null, fvec, null, buffers);
                    _process_v2request_3phase1(request);
                    request.send_reply();
                    continue;
                }
                if( request.request==5 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_5phase0(request, job_idx, null, null, fvec, null, buffers);
                    _process_v2request_5phase1(request);
                    request.send_reply();
                    continue;
                }if( request.request==4 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_4(request, qidx, null, null, fvec, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'mindfoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    private static native int _jni_rcv2_mindf_set_protocol_v2(mut_string error_msg, long obj, long _xparams);
    private static native int _jni_rcv2_fetch_mindf(_rcommv2_request request, long obj);

    public static class mindfresults_results
    {
        public double[] x;
        public mindfreport rep;
    }
    public static mindfresults_results mindfresults(mindfstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfresults");
        mindfresults_results ret_tuple = new mindfresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (mindfreport)lcl_rep.val;
        return ret_tuple;
    }
    public static mindfresults_results mindfresults(mindfstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfresults");
        mindfresults_results ret_tuple = new mindfresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (mindfreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_mindfresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] mindfresultsbuf(mindfstate state, double[] x, mindfreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfresultsbuf");
        return lcl_x.val;
    }
    public static double[] mindfresultsbuf(mindfstate state, double[] x, mindfreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of mindfresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mindfresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mindfresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_mindfresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    
    
    //
    // Subpackage lpqppresolve
    //
    
    
    
    //
    // Subpackage reviseddualsimplex
    //
    
    
    
    //
    // Subpackage minlp
    //
    

    public static class minlpstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minlpstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minlpstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minlpstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minlpstate(0);
            return new minlpstate(_jni_x_obj_copy_minlpstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minlpstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minlpstate(long x);
    private static native void _jni_x_obj_free_minlpstate(long x);


        public static class minlpreport extends alglibobject
        {
            public double f;
            public double[] lagbc;
            public double[] laglc;
            public double[] y;
            public int[] stats;
            public double primalerror;
            public double dualerror;
            public double slackerror;
            public int iterationscount;
            public int terminationtype;
            public alglibobject make_copy()
            {
                minlpreport dst = new minlpreport();
                dst.f = f;
                dst.lagbc = alglib.make_copy(lagbc);
                dst.laglc = alglib.make_copy(laglc);
                dst.y = alglib.make_copy(y);
                dst.stats = alglib.make_copy(stats);
                dst.primalerror = primalerror;
                dst.dualerror = dualerror;
                dst.slackerror = slackerror;
                dst.iterationscount = iterationscount;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static minlpstate minlpcreate(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpcreate(error_msg, n, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpcreate");
        return new minlpstate(lcl_state.val);
    }
    public static minlpstate minlpcreate(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpcreate(error_msg, n, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpcreate");
        return new minlpstate(lcl_state.val);
    }
    private static native int _jni_minlpcreate(mut_string error_msg, int n, mut_long state, long _xparams);

    public static void minlpsetalgodss(minlpstate state, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetalgodss() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetalgodss() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetalgodss(error_msg, state.get_ptr(), eps, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetalgodss");
    }
    public static void minlpsetalgodss(minlpstate state, double eps) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetalgodss() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetalgodss() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetalgodss(error_msg, state.get_ptr(), eps, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetalgodss");
    }
    private static native int _jni_minlpsetalgodss(mut_string error_msg, long state, double eps, long _xparams);

    public static void minlpsetalgoipm(minlpstate state, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetalgoipm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetalgoipm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetalgoipm(error_msg, state.get_ptr(), eps, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetalgoipm");
    }
    public static void minlpsetalgoipm(minlpstate state, double eps) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetalgoipm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetalgoipm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetalgoipm(error_msg, state.get_ptr(), eps, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetalgoipm");
    }
            
    public static void minlpsetalgoipm(minlpstate state, alglib.xparams _params) throws alglib.exception
    {
        double eps;
    
        eps = 0.0;
        minlpsetalgoipm(state, eps, _params);
    
    }
    
    public static void minlpsetalgoipm(minlpstate state) throws alglib.exception
    {
        alglib.xparams _params = null;
        double eps;
    
        eps = 0.0;
        minlpsetalgoipm(state, eps, _params);
    
    }
    private static native int _jni_minlpsetalgoipm(mut_string error_msg, long state, double eps, long _xparams);

    public static void minlpsetcost(minlpstate state, double[] c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetcost() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetcost() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetcost(error_msg, state.get_ptr(), c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetcost");
    }
    public static void minlpsetcost(minlpstate state, double[] c) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetcost() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetcost() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetcost(error_msg, state.get_ptr(), c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetcost");
    }
    private static native int _jni_minlpsetcost(mut_string error_msg, long state, double[] c, long _xparams);

    public static void minlpsetscale(minlpstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetscale");
    }
    public static void minlpsetscale(minlpstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetscale");
    }
    private static native int _jni_minlpsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minlpsetbc(minlpstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetbc");
    }
    public static void minlpsetbc(minlpstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetbc");
    }
    private static native int _jni_minlpsetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void minlpsetbcall(minlpstate state, double bndl, double bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbcall() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbcall() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetbcall(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetbcall");
    }
    public static void minlpsetbcall(minlpstate state, double bndl, double bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbcall() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbcall() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetbcall(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetbcall");
    }
    private static native int _jni_minlpsetbcall(mut_string error_msg, long state, double bndl, double bndu, long _xparams);

    public static void minlpsetbci(minlpstate state, int i, double bndl, double bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbci() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbci() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetbci(error_msg, state.get_ptr(), i, bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetbci");
    }
    public static void minlpsetbci(minlpstate state, int i, double bndl, double bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbci() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetbci() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetbci(error_msg, state.get_ptr(), i, bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetbci");
    }
    private static native int _jni_minlpsetbci(mut_string error_msg, long state, int i, double bndl, double bndu, long _xparams);

    public static void minlpsetlc(minlpstate state, double[][] a, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetlc(error_msg, state.get_ptr(), a, ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetlc");
    }
    public static void minlpsetlc(minlpstate state, double[][] a, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetlc(error_msg, state.get_ptr(), a, ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetlc");
    }
            
    public static void minlpsetlc(minlpstate state, double[][] a, int[] ct, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(a)!=ct.length))
            throw new exception("Error while calling minlpsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minlpsetlc(state, a, ct, k, _params);
    
    }
    
    public static void minlpsetlc(minlpstate state, double[][] a, int[] ct) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(a)!=ct.length))
            throw new exception("Error while calling minlpsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minlpsetlc(state, a, ct, k, _params);
    
    }
    private static native int _jni_minlpsetlc(mut_string error_msg, long state, double[][] a, int[] ct, int k, long _xparams);

    public static void minlpsetlc2dense(minlpstate state, double[][] a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetlc2dense(error_msg, state.get_ptr(), a, al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetlc2dense");
    }
    public static void minlpsetlc2dense(minlpstate state, double[][] a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetlc2dense(error_msg, state.get_ptr(), a, al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetlc2dense");
    }
            
    public static void minlpsetlc2dense(minlpstate state, double[][] a, double[] al, double[] au, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling minlpsetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minlpsetlc2dense(state, a, al, au, k, _params);
    
    }
    
    public static void minlpsetlc2dense(minlpstate state, double[][] a, double[] al, double[] au) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling minlpsetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minlpsetlc2dense(state, a, al, au, k, _params);
    
    }
    private static native int _jni_minlpsetlc2dense(mut_string error_msg, long state, double[][] a, double[] al, double[] au, int k, long _xparams);

    public static void minlpsetlc2(minlpstate state, sparsematrix a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minlpsetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minlpsetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetlc2(error_msg, state.get_ptr(), a.get_ptr(), al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetlc2");
    }
    public static void minlpsetlc2(minlpstate state, sparsematrix a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpsetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minlpsetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minlpsetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpsetlc2(error_msg, state.get_ptr(), a.get_ptr(), al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpsetlc2");
    }
    private static native int _jni_minlpsetlc2(mut_string error_msg, long state, long a, double[] al, double[] au, int k, long _xparams);

    public static void minlpaddlc2dense(minlpstate state, double[] a, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpaddlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpaddlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpaddlc2dense(error_msg, state.get_ptr(), a, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpaddlc2dense");
    }
    public static void minlpaddlc2dense(minlpstate state, double[] a, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpaddlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpaddlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpaddlc2dense(error_msg, state.get_ptr(), a, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpaddlc2dense");
    }
    private static native int _jni_minlpaddlc2dense(mut_string error_msg, long state, double[] a, double al, double au, long _xparams);

    public static void minlpaddlc2(minlpstate state, int[] idxa, double[] vala, int nnz, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpaddlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpaddlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpaddlc2(error_msg, state.get_ptr(), idxa, vala, nnz, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpaddlc2");
    }
    public static void minlpaddlc2(minlpstate state, int[] idxa, double[] vala, int nnz, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpaddlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpaddlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpaddlc2(error_msg, state.get_ptr(), idxa, vala, nnz, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpaddlc2");
    }
    private static native int _jni_minlpaddlc2(mut_string error_msg, long state, int[] idxa, double[] vala, int nnz, double al, double au, long _xparams);

    public static void minlpoptimize(minlpstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpoptimize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpoptimize(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpoptimize");
    }
    public static void minlpoptimize(minlpstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpoptimize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpoptimize(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpoptimize");
    }
    private static native int _jni_minlpoptimize(mut_string error_msg, long state, long _xparams);

    public static class minlpresults_results
    {
        public double[] x;
        public minlpreport rep;
    }
    public static minlpresults_results minlpresults(minlpstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpresults");
        minlpresults_results ret_tuple = new minlpresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minlpreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minlpresults_results minlpresults(minlpstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpresults");
        minlpresults_results ret_tuple = new minlpresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minlpreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minlpresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minlpresultsbuf(minlpstate state, double[] x, minlpreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpresultsbuf");
        return lcl_x.val;
    }
    public static double[] minlpresultsbuf(minlpstate state, double[] x, minlpreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlpresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlpresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlpresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minlpresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    
    
    //
    // Subpackage nls
    //
    

    public static class nlsstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected nlsstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected nlsstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected nlsstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new nlsstate(0);
            return new nlsstate(_jni_x_obj_copy_nlsstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_nlsstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_nlsstate(long x);
    private static native void _jni_x_obj_free_nlsstate(long x);


        public static class nlsreport extends alglibobject
        {
            public int iterationscount;
            public int terminationtype;
            public int nfunc;
            public alglibobject make_copy()
            {
                nlsreport dst = new nlsreport();
                dst.iterationscount = iterationscount;
                dst.terminationtype = terminationtype;
                dst.nfunc = nfunc;
                return dst;
            }
        }

    public static nlsstate nlscreatedfo(int n, int m, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlscreatedfo(error_msg, n, m, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlscreatedfo");
        return new nlsstate(lcl_state.val);
    }
    public static nlsstate nlscreatedfo(int n, int m, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlscreatedfo(error_msg, n, m, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlscreatedfo");
        return new nlsstate(lcl_state.val);
    }
            
    public static nlsstate nlscreatedfo(int m, double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return nlscreatedfo(n, m, x, _params);
    
    }
    
    public static nlsstate nlscreatedfo(int m, double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return nlscreatedfo(n, m, x, _params);
    
    }
    private static native int _jni_nlscreatedfo(mut_string error_msg, int n, int m, double[] x, mut_long state, long _xparams);

    public static void nlssetalgo2ps(nlsstate state, int nnoisyrestarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetalgo2ps() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetalgo2ps() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetalgo2ps(error_msg, state.get_ptr(), nnoisyrestarts, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetalgo2ps");
    }
    public static void nlssetalgo2ps(nlsstate state, int nnoisyrestarts) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetalgo2ps() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetalgo2ps() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetalgo2ps(error_msg, state.get_ptr(), nnoisyrestarts, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetalgo2ps");
    }
            
    public static void nlssetalgo2ps(nlsstate state, alglib.xparams _params) throws alglib.exception
    {
        int nnoisyrestarts;
    
        nnoisyrestarts = 0;
        nlssetalgo2ps(state, nnoisyrestarts, _params);
    
    }
    
    public static void nlssetalgo2ps(nlsstate state) throws alglib.exception
    {
        alglib.xparams _params = null;
        int nnoisyrestarts;
    
        nnoisyrestarts = 0;
        nlssetalgo2ps(state, nnoisyrestarts, _params);
    
    }
    private static native int _jni_nlssetalgo2ps(mut_string error_msg, long state, int nnoisyrestarts, long _xparams);

    public static void nlssetalgodfolsa(nlsstate state, int nnoisyrestarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetalgodfolsa() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetalgodfolsa() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetalgodfolsa(error_msg, state.get_ptr(), nnoisyrestarts, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetalgodfolsa");
    }
    public static void nlssetalgodfolsa(nlsstate state, int nnoisyrestarts) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetalgodfolsa() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetalgodfolsa() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetalgodfolsa(error_msg, state.get_ptr(), nnoisyrestarts, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetalgodfolsa");
    }
            
    public static void nlssetalgodfolsa(nlsstate state, alglib.xparams _params) throws alglib.exception
    {
        int nnoisyrestarts;
    
        nnoisyrestarts = 0;
        nlssetalgodfolsa(state, nnoisyrestarts, _params);
    
    }
    
    public static void nlssetalgodfolsa(nlsstate state) throws alglib.exception
    {
        alglib.xparams _params = null;
        int nnoisyrestarts;
    
        nnoisyrestarts = 0;
        nlssetalgodfolsa(state, nnoisyrestarts, _params);
    
    }
    private static native int _jni_nlssetalgodfolsa(mut_string error_msg, long state, int nnoisyrestarts, long _xparams);

    public static void nlssetcond(nlsstate state, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetcond(error_msg, state.get_ptr(), epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetcond");
    }
    public static void nlssetcond(nlsstate state, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetcond(error_msg, state.get_ptr(), epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetcond");
    }
    private static native int _jni_nlssetcond(mut_string error_msg, long state, double epsx, int maxits, long _xparams);

    public static void nlssetxrep(nlsstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetxrep");
    }
    public static void nlssetxrep(nlsstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetxrep");
    }
    private static native int _jni_nlssetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void nlssetscale(nlsstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetscale");
    }
    public static void nlssetscale(nlsstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetscale");
    }
    private static native int _jni_nlssetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void nlssetbc(nlsstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetbc");
    }
    public static void nlssetbc(nlsstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlssetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlssetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlssetbc");
    }
    private static native int _jni_nlssetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static boolean nlsiteration(nlsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsiteration");
        return lcl_result.val;
    }
    public static boolean nlsiteration(nlsstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsiteration");
        return lcl_result.val;
    }
    private static native int _jni_nlsiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void nlsoptimize(nlsstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        nlsoptimize(state, fvec, rep, obj, null);
    }
    
    public static void nlsoptimize(nlsstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( fvec==null )
        throw new alglib.exception("ALGLIB: error in 'nlsoptimize()' (fvec is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "nls");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_nls_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "nls_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "nlsiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_nlsiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "nlsiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_nls, state.get_ptr());
                buffers.resize(request);
                if( request.request==3 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_3phase0(request, job_idx, null, null, fvec, null, buffers);
                    _process_v2request_3phase1(request);
                    request.send_reply();
                    continue;
                }
                if( request.request==5 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_5phase0(request, job_idx, null, null, fvec, null, buffers);
                    _process_v2request_5phase1(request);
                    request.send_reply();
                    continue;
                }if( request.request==4 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_4(request, qidx, null, null, fvec, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'nlsoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    public static void nlsoptimize(nlsstate state, ndimensional_fvec fvec, ndimensional_jac jac, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        nlsoptimize(state, fvec, jac, rep, obj, null);
    }
    
    public static void nlsoptimize(nlsstate state, ndimensional_fvec fvec, ndimensional_jac jac, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( fvec==null )
        throw new alglib.exception("ALGLIB: error in 'nlsoptimize()' (fvec is null)");
    if( jac==null )
        throw new alglib.exception("ALGLIB: error in 'nlsoptimize()' (jac is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "nls");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_nls_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "nls_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "nlsiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_nlsiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "nlsiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_nls, state.get_ptr());
                buffers.resize(request);
                if( request.request==2 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_2(request, qidx, null, null, jac, null, buffers);
                    request.send_reply();
                    continue;
                }if( request.request==4 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_4(request, qidx, null, null, fvec, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'nlsoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    private static native int _jni_rcv2_nls_set_protocol_v2(mut_string error_msg, long obj, long _xparams);
    private static native int _jni_rcv2_fetch_nls(_rcommv2_request request, long obj);

    public static class nlsresults_results
    {
        public double[] x;
        public nlsreport rep;
    }
    public static nlsresults_results nlsresults(nlsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsresults");
        nlsresults_results ret_tuple = new nlsresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (nlsreport)lcl_rep.val;
        return ret_tuple;
    }
    public static nlsresults_results nlsresults(nlsstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsresults");
        nlsresults_results ret_tuple = new nlsresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (nlsreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_nlsresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] nlsresultsbuf(nlsstate state, double[] x, nlsreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsresultsbuf");
        return lcl_x.val;
    }
    public static double[] nlsresultsbuf(nlsstate state, double[] x, nlsreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_nlsresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void nlsrestartfrom(nlsstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsrestartfrom");
    }
    public static void nlsrestartfrom(nlsstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsrestartfrom");
    }
    private static native int _jni_nlsrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    public static void nlsrequesttermination(nlsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsrequesttermination");
    }
    public static void nlsrequesttermination(nlsstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of nlsrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nlsrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nlsrequesttermination");
    }
    private static native int _jni_nlsrequesttermination(mut_string error_msg, long state, long _xparams);

    
    
    //
    // Subpackage nlcslp
    //
    
    
    
    //
    // Subpackage minnlc
    //
    

    public static class minnlcstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minnlcstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minnlcstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minnlcstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minnlcstate(0);
            return new minnlcstate(_jni_x_obj_copy_minnlcstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minnlcstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minnlcstate(long x);
    private static native void _jni_x_obj_free_minnlcstate(long x);


        public static class minnlcreport extends alglibobject
        {
            public int iterationscount;
            public int nfev;
            public int terminationtype;
            public double bcerr;
            public int bcidx;
            public double lcerr;
            public int lcidx;
            public double nlcerr;
            public int nlcidx;
            public double[] lagbc;
            public double[] lagbcnz;
            public double[] laglc;
            public double[] lagnlc;
            public int dbgphase0its;
            public alglibobject make_copy()
            {
                minnlcreport dst = new minnlcreport();
                dst.iterationscount = iterationscount;
                dst.nfev = nfev;
                dst.terminationtype = terminationtype;
                dst.bcerr = bcerr;
                dst.bcidx = bcidx;
                dst.lcerr = lcerr;
                dst.lcidx = lcidx;
                dst.nlcerr = nlcerr;
                dst.nlcidx = nlcidx;
                dst.lagbc = alglib.make_copy(lagbc);
                dst.lagbcnz = alglib.make_copy(lagbcnz);
                dst.laglc = alglib.make_copy(laglc);
                dst.lagnlc = alglib.make_copy(lagnlc);
                dst.dbgphase0its = dbgphase0its;
                return dst;
            }
        }

    public static minnlcstate minnlccreate(int n, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlccreate(error_msg, n, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlccreate");
        return new minnlcstate(lcl_state.val);
    }
    public static minnlcstate minnlccreate(int n, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlccreate(error_msg, n, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlccreate");
        return new minnlcstate(lcl_state.val);
    }
            
    public static minnlcstate minnlccreate(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minnlccreate(n, x, _params);
    
    }
    
    public static minnlcstate minnlccreate(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minnlccreate(n, x, _params);
    
    }
    private static native int _jni_minnlccreate(mut_string error_msg, int n, double[] x, mut_long state, long _xparams);

    public static minnlcstate minnlccreatef(int n, double[] x, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlccreatef(error_msg, n, x, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlccreatef");
        return new minnlcstate(lcl_state.val);
    }
    public static minnlcstate minnlccreatef(int n, double[] x, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlccreatef(error_msg, n, x, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlccreatef");
        return new minnlcstate(lcl_state.val);
    }
            
    public static minnlcstate minnlccreatef(double[] x, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minnlccreatef(n, x, diffstep, _params);
    
    }
    
    public static minnlcstate minnlccreatef(double[] x, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minnlccreatef(n, x, diffstep, _params);
    
    }
    private static native int _jni_minnlccreatef(mut_string error_msg, int n, double[] x, double diffstep, mut_long state, long _xparams);

    public static void minnlcsetbc(minnlcstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetbc");
    }
    public static void minnlcsetbc(minnlcstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetbc");
    }
    private static native int _jni_minnlcsetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void minnlcsetlc(minnlcstate state, double[][] c, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetlc(error_msg, state.get_ptr(), c, ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetlc");
    }
    public static void minnlcsetlc(minnlcstate state, double[][] c, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetlc(error_msg, state.get_ptr(), c, ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetlc");
    }
            
    public static void minnlcsetlc(minnlcstate state, double[][] c, int[] ct, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minnlcsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minnlcsetlc(state, c, ct, k, _params);
    
    }
    
    public static void minnlcsetlc(minnlcstate state, double[][] c, int[] ct) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minnlcsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minnlcsetlc(state, c, ct, k, _params);
    
    }
    private static native int _jni_minnlcsetlc(mut_string error_msg, long state, double[][] c, int[] ct, int k, long _xparams);

    public static void minnlcsetlc2dense(minnlcstate state, double[][] a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetlc2dense(error_msg, state.get_ptr(), a, al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetlc2dense");
    }
    public static void minnlcsetlc2dense(minnlcstate state, double[][] a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetlc2dense(error_msg, state.get_ptr(), a, al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetlc2dense");
    }
            
    public static void minnlcsetlc2dense(minnlcstate state, double[][] a, double[] al, double[] au, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling minnlcsetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minnlcsetlc2dense(state, a, al, au, k, _params);
    
    }
    
    public static void minnlcsetlc2dense(minnlcstate state, double[][] a, double[] al, double[] au) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling minnlcsetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minnlcsetlc2dense(state, a, al, au, k, _params);
    
    }
    private static native int _jni_minnlcsetlc2dense(mut_string error_msg, long state, double[][] a, double[] al, double[] au, int k, long _xparams);

    public static void minnlcsetlc2(minnlcstate state, sparsematrix a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minnlcsetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minnlcsetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetlc2(error_msg, state.get_ptr(), a.get_ptr(), al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetlc2");
    }
    public static void minnlcsetlc2(minnlcstate state, sparsematrix a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minnlcsetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minnlcsetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetlc2(error_msg, state.get_ptr(), a.get_ptr(), al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetlc2");
    }
    private static native int _jni_minnlcsetlc2(mut_string error_msg, long state, long a, double[] al, double[] au, int k, long _xparams);

    public static void minnlcsetlc2mixed(minnlcstate state, sparsematrix sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2mixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2mixed() points to deallocated ALGLIB object");
        if( sparsea==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minnlcsetlc2mixed() is null");
        if( sparsea.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minnlcsetlc2mixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetlc2mixed(error_msg, state.get_ptr(), sparsea.get_ptr(), ksparse, densea, kdense, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetlc2mixed");
    }
    public static void minnlcsetlc2mixed(minnlcstate state, sparsematrix sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2mixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetlc2mixed() points to deallocated ALGLIB object");
        if( sparsea==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minnlcsetlc2mixed() is null");
        if( sparsea.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minnlcsetlc2mixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetlc2mixed(error_msg, state.get_ptr(), sparsea.get_ptr(), ksparse, densea, kdense, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetlc2mixed");
    }
    private static native int _jni_minnlcsetlc2mixed(mut_string error_msg, long state, long sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au, long _xparams);

    public static void minnlcaddlc2dense(minnlcstate state, double[] a, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcaddlc2dense(error_msg, state.get_ptr(), a, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcaddlc2dense");
    }
    public static void minnlcaddlc2dense(minnlcstate state, double[] a, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcaddlc2dense(error_msg, state.get_ptr(), a, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcaddlc2dense");
    }
    private static native int _jni_minnlcaddlc2dense(mut_string error_msg, long state, double[] a, double al, double au, long _xparams);

    public static void minnlcaddlc2(minnlcstate state, int[] idxa, double[] vala, int nnz, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcaddlc2(error_msg, state.get_ptr(), idxa, vala, nnz, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcaddlc2");
    }
    public static void minnlcaddlc2(minnlcstate state, int[] idxa, double[] vala, int nnz, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcaddlc2(error_msg, state.get_ptr(), idxa, vala, nnz, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcaddlc2");
    }
    private static native int _jni_minnlcaddlc2(mut_string error_msg, long state, int[] idxa, double[] vala, int nnz, double al, double au, long _xparams);

    public static void minnlcaddlc2sparsefromdense(minnlcstate state, double[] da, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2sparsefromdense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2sparsefromdense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcaddlc2sparsefromdense(error_msg, state.get_ptr(), da, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcaddlc2sparsefromdense");
    }
    public static void minnlcaddlc2sparsefromdense(minnlcstate state, double[] da, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2sparsefromdense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcaddlc2sparsefromdense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcaddlc2sparsefromdense(error_msg, state.get_ptr(), da, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcaddlc2sparsefromdense");
    }
    private static native int _jni_minnlcaddlc2sparsefromdense(mut_string error_msg, long state, double[] da, double al, double au, long _xparams);

    public static void minnlcsetnlc(minnlcstate state, int nlec, int nlic, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetnlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetnlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetnlc(error_msg, state.get_ptr(), nlec, nlic, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetnlc");
    }
    public static void minnlcsetnlc(minnlcstate state, int nlec, int nlic) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetnlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetnlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetnlc(error_msg, state.get_ptr(), nlec, nlic, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetnlc");
    }
    private static native int _jni_minnlcsetnlc(mut_string error_msg, long state, int nlec, int nlic, long _xparams);

    public static void minnlcsetnlc2(minnlcstate state, double[] nl, double[] nu, int nnlc, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetnlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetnlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetnlc2(error_msg, state.get_ptr(), nl, nu, nnlc, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetnlc2");
    }
    public static void minnlcsetnlc2(minnlcstate state, double[] nl, double[] nu, int nnlc) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetnlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetnlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetnlc2(error_msg, state.get_ptr(), nl, nu, nnlc, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetnlc2");
    }
            
    public static void minnlcsetnlc2(minnlcstate state, double[] nl, double[] nu, alglib.xparams _params) throws alglib.exception
    {
        int nnlc;
        if( (nl.length!=nu.length))
            throw new exception("Error while calling minnlcsetnlc2(): looks like one of arguments has wrong size");
        nnlc = nl.length;
        minnlcsetnlc2(state, nl, nu, nnlc, _params);
    
    }
    
    public static void minnlcsetnlc2(minnlcstate state, double[] nl, double[] nu) throws alglib.exception
    {
        alglib.xparams _params = null;
        int nnlc;
        if( (nl.length!=nu.length))
            throw new exception("Error while calling minnlcsetnlc2(): looks like one of arguments has wrong size");
        nnlc = nl.length;
        minnlcsetnlc2(state, nl, nu, nnlc, _params);
    
    }
    private static native int _jni_minnlcsetnlc2(mut_string error_msg, long state, double[] nl, double[] nu, int nnlc, long _xparams);

    public static void minnlcsetcond(minnlcstate state, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetcond(error_msg, state.get_ptr(), epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetcond");
    }
    public static void minnlcsetcond(minnlcstate state, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetcond(error_msg, state.get_ptr(), epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetcond");
    }
    private static native int _jni_minnlcsetcond(mut_string error_msg, long state, double epsx, int maxits, long _xparams);

    public static void minnlcsetcond3(minnlcstate state, double epsf, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetcond3() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetcond3() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetcond3(error_msg, state.get_ptr(), epsf, epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetcond3");
    }
    public static void minnlcsetcond3(minnlcstate state, double epsf, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetcond3() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetcond3() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetcond3(error_msg, state.get_ptr(), epsf, epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetcond3");
    }
    private static native int _jni_minnlcsetcond3(mut_string error_msg, long state, double epsf, double epsx, int maxits, long _xparams);

    public static void minnlcsetscale(minnlcstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetscale");
    }
    public static void minnlcsetscale(minnlcstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetscale");
    }
    private static native int _jni_minnlcsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minnlcsetstpmax(minnlcstate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetstpmax");
    }
    public static void minnlcsetstpmax(minnlcstate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetstpmax");
    }
    private static native int _jni_minnlcsetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static void minnlcsetalgoaul2(minnlcstate state, int maxouterits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgoaul2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgoaul2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgoaul2(error_msg, state.get_ptr(), maxouterits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgoaul2");
    }
    public static void minnlcsetalgoaul2(minnlcstate state, int maxouterits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgoaul2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgoaul2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgoaul2(error_msg, state.get_ptr(), maxouterits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgoaul2");
    }
    private static native int _jni_minnlcsetalgoaul2(mut_string error_msg, long state, int maxouterits, long _xparams);

    public static void minnlcsetalgoslp(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgoslp() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgoslp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgoslp(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgoslp");
    }
    public static void minnlcsetalgoslp(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgoslp() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgoslp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgoslp(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgoslp");
    }
    private static native int _jni_minnlcsetalgoslp(mut_string error_msg, long state, long _xparams);

    public static void minnlcsetalgosl1qp(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosl1qp() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosl1qp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgosl1qp(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgosl1qp");
    }
    public static void minnlcsetalgosl1qp(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosl1qp() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosl1qp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgosl1qp(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgosl1qp");
    }
    private static native int _jni_minnlcsetalgosl1qp(mut_string error_msg, long state, long _xparams);

    public static void minnlcsetalgosl1qpbfgs(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosl1qpbfgs() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosl1qpbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgosl1qpbfgs(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgosl1qpbfgs");
    }
    public static void minnlcsetalgosl1qpbfgs(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosl1qpbfgs() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosl1qpbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgosl1qpbfgs(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgosl1qpbfgs");
    }
    private static native int _jni_minnlcsetalgosl1qpbfgs(mut_string error_msg, long state, long _xparams);

    public static void minnlcsetalgosqp(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosqp() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosqp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgosqp(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgosqp");
    }
    public static void minnlcsetalgosqp(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosqp() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosqp() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgosqp(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgosqp");
    }
    private static native int _jni_minnlcsetalgosqp(mut_string error_msg, long state, long _xparams);

    public static void minnlcsetalgosqpbfgs(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosqpbfgs() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosqpbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgosqpbfgs(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgosqpbfgs");
    }
    public static void minnlcsetalgosqpbfgs(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosqpbfgs() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetalgosqpbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetalgosqpbfgs(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetalgosqpbfgs");
    }
    private static native int _jni_minnlcsetalgosqpbfgs(mut_string error_msg, long state, long _xparams);

    public static void minnlcsetxrep(minnlcstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetxrep");
    }
    public static void minnlcsetxrep(minnlcstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcsetxrep");
    }
    private static native int _jni_minnlcsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static boolean minnlciteration(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlciteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlciteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlciteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlciteration");
        return lcl_result.val;
    }
    public static boolean minnlciteration(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlciteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlciteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlciteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlciteration");
        return lcl_result.val;
    }
    private static native int _jni_minnlciteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void minnlcoptimize(minnlcstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minnlcoptimize(state, fvec, rep, obj, null);
    }
    
    public static void minnlcoptimize(minnlcstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( fvec==null )
        throw new alglib.exception("ALGLIB: error in 'minnlcoptimize()' (fvec is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "minnlc");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minnlc_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minnlc_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnlciteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minnlciteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnlciteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_minnlc, state.get_ptr());
                buffers.resize(request);
                if( request.request==3 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_3phase0(request, job_idx, null, null, fvec, null, buffers);
                    _process_v2request_3phase1(request);
                    request.send_reply();
                    continue;
                }
                if( request.request==5 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_5phase0(request, job_idx, null, null, fvec, null, buffers);
                    _process_v2request_5phase1(request);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minnlcoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    public static void minnlcoptimize(minnlcstate state, ndimensional_jac jac, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minnlcoptimize(state, jac, rep, obj, null);
    }
    
    public static void minnlcoptimize(minnlcstate state, ndimensional_jac jac, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( jac==null )
        throw new alglib.exception("ALGLIB: error in 'minnlcoptimize()' (jac is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "minnlc");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minnlc_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minnlc_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnlciteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minnlciteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnlciteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_minnlc, state.get_ptr());
                buffers.resize(request);
                if( request.request==2 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_2(request, qidx, null, null, jac, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minnlcoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    public static void minnlcoptimize(minnlcstate state, ndimensional_sjac sjac, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minnlcoptimize(state, sjac, rep, obj, null);
    }
    
    public static void minnlcoptimize(minnlcstate state, ndimensional_sjac sjac, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( sjac==null )
        throw new alglib.exception("ALGLIB: error in 'minnlcoptimize()' (sjac is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "minnlc");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minnlc_set_protocol_v2s(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minnlc_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnlciteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minnlciteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnlciteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_minnlc, state.get_ptr());
                buffers.resize(request);
                if( request.request==1 )
                { 
                    sparsecreatecrsemptybuf(request.vars, request.replysj);
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_1(request, qidx, sjac, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minnlcoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    private static native int _jni_rcv2_minnlc_set_protocol_v2(mut_string error_msg, long obj, long _xparams);
    private static native int _jni_rcv2_fetch_minnlc(_rcommv2_request request, long obj);
    private static native int _jni_rcv2_minnlc_set_protocol_v2s(mut_string error_msg, long obj, long _xparams);

    public static void minnlcoptguardgradient(minnlcstate state, double teststep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardgradient(error_msg, state.get_ptr(), teststep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardgradient");
    }
    public static void minnlcoptguardgradient(minnlcstate state, double teststep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardgradient(error_msg, state.get_ptr(), teststep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardgradient");
    }
    private static native int _jni_minnlcoptguardgradient(mut_string error_msg, long state, double teststep, long _xparams);

    public static void minnlcoptguardsmoothness(minnlcstate state, int level, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardsmoothness(error_msg, state.get_ptr(), level, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardsmoothness");
    }
    public static void minnlcoptguardsmoothness(minnlcstate state, int level) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardsmoothness(error_msg, state.get_ptr(), level, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardsmoothness");
    }
            
    public static void minnlcoptguardsmoothness(minnlcstate state, alglib.xparams _params) throws alglib.exception
    {
        int level;
    
        level = 1;
        minnlcoptguardsmoothness(state, level, _params);
    
    }
    
    public static void minnlcoptguardsmoothness(minnlcstate state) throws alglib.exception
    {
        alglib.xparams _params = null;
        int level;
    
        level = 1;
        minnlcoptguardsmoothness(state, level, _params);
    
    }
    private static native int _jni_minnlcoptguardsmoothness(mut_string error_msg, long state, int level, long _xparams);

    public static optguardreport minnlcoptguardresults(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardresults(error_msg, state.get_ptr(), lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    public static optguardreport minnlcoptguardresults(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardresults(error_msg, state.get_ptr(), lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    private static native int _jni_minnlcoptguardresults(mut_string error_msg, long state, mut_object rep, long _xparams);

    public static class minnlcoptguardnonc1test0results_results
    {
        public optguardnonc1test0report strrep;
        public optguardnonc1test0report lngrep;
    }
    public static minnlcoptguardnonc1test0results_results minnlcoptguardnonc1test0results(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardnonc1test0results");
        minnlcoptguardnonc1test0results_results ret_tuple = new minnlcoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static minnlcoptguardnonc1test0results_results minnlcoptguardnonc1test0results(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardnonc1test0results");
        minnlcoptguardnonc1test0results_results ret_tuple = new minnlcoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_minnlcoptguardnonc1test0results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class minnlcoptguardnonc1test1results_results
    {
        public optguardnonc1test1report strrep;
        public optguardnonc1test1report lngrep;
    }
    public static minnlcoptguardnonc1test1results_results minnlcoptguardnonc1test1results(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardnonc1test1results");
        minnlcoptguardnonc1test1results_results ret_tuple = new minnlcoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static minnlcoptguardnonc1test1results_results minnlcoptguardnonc1test1results(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcoptguardnonc1test1results");
        minnlcoptguardnonc1test1results_results ret_tuple = new minnlcoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_minnlcoptguardnonc1test1results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class minnlcresults_results
    {
        public double[] x;
        public minnlcreport rep;
    }
    public static minnlcresults_results minnlcresults(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcresults");
        minnlcresults_results ret_tuple = new minnlcresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minnlcreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minnlcresults_results minnlcresults(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcresults");
        minnlcresults_results ret_tuple = new minnlcresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minnlcreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minnlcresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minnlcresultsbuf(minnlcstate state, double[] x, minnlcreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcresultsbuf");
        return lcl_x.val;
    }
    public static double[] minnlcresultsbuf(minnlcstate state, double[] x, minnlcreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minnlcresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void minnlcrequesttermination(minnlcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcrequesttermination");
    }
    public static void minnlcrequesttermination(minnlcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcrequesttermination");
    }
    private static native int _jni_minnlcrequesttermination(mut_string error_msg, long state, long _xparams);

    public static void minnlcrestartfrom(minnlcstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcrestartfrom");
    }
    public static void minnlcrestartfrom(minnlcstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnlcrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnlcrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnlcrestartfrom");
    }
    private static native int _jni_minnlcrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    
    
    //
    // Subpackage monbi
    //
    
    
    
    //
    // Subpackage minmo
    //
    

    public static class minmostate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minmostate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minmostate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minmostate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minmostate(0);
            return new minmostate(_jni_x_obj_copy_minmostate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minmostate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minmostate(long x);
    private static native void _jni_x_obj_free_minmostate(long x);
    private static native boolean _jni_minmostate_get_needfi(long x);
    private static native void _jni_minmostate_set_needfi(long x, boolean v);
    private static native boolean _jni_minmostate_get_needfij(long x);
    private static native void _jni_minmostate_set_needfij(long x, boolean v);
    private static native boolean _jni_minmostate_get_xupdated(long x);
    private static native void _jni_minmostate_set_xupdated(long x, boolean v);
    private static native double _jni_minmostate_get_f(long x);
    private static native void _jni_minmostate_set_f(long x, double v);
    private static native long _jni_minmostate_get_fi(long obj);
    private static native long _jni_minmostate_get_j(long obj);
    private static native long _jni_minmostate_get_x(long obj);


        public static class minmoreport extends alglibobject
        {
            public int inneriterationscount;
            public int outeriterationscount;
            public int nfev;
            public int terminationtype;
            public double bcerr;
            public int bcidx;
            public double lcerr;
            public int lcidx;
            public double nlcerr;
            public int nlcidx;
            public alglibobject make_copy()
            {
                minmoreport dst = new minmoreport();
                dst.inneriterationscount = inneriterationscount;
                dst.outeriterationscount = outeriterationscount;
                dst.nfev = nfev;
                dst.terminationtype = terminationtype;
                dst.bcerr = bcerr;
                dst.bcidx = bcidx;
                dst.lcerr = lcerr;
                dst.lcidx = lcidx;
                dst.nlcerr = nlcerr;
                dst.nlcidx = nlcidx;
                return dst;
            }
        }

    public static minmostate minmocreate(int n, int m, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmocreate(error_msg, n, m, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmocreate");
        return new minmostate(lcl_state.val);
    }
    public static minmostate minmocreate(int n, int m, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmocreate(error_msg, n, m, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmocreate");
        return new minmostate(lcl_state.val);
    }
            
    public static minmostate minmocreate(int m, double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minmocreate(n, m, x, _params);
    
    }
    
    public static minmostate minmocreate(int m, double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minmocreate(n, m, x, _params);
    
    }
    private static native int _jni_minmocreate(mut_string error_msg, int n, int m, double[] x, mut_long state, long _xparams);

    public static minmostate minmocreatef(int n, int m, double[] x, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmocreatef(error_msg, n, m, x, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmocreatef");
        return new minmostate(lcl_state.val);
    }
    public static minmostate minmocreatef(int n, int m, double[] x, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmocreatef(error_msg, n, m, x, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmocreatef");
        return new minmostate(lcl_state.val);
    }
            
    public static minmostate minmocreatef(int m, double[] x, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minmocreatef(n, m, x, diffstep, _params);
    
    }
    
    public static minmostate minmocreatef(int m, double[] x, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minmocreatef(n, m, x, diffstep, _params);
    
    }
    private static native int _jni_minmocreatef(mut_string error_msg, int n, int m, double[] x, double diffstep, mut_long state, long _xparams);

    public static void minmosetalgonbi(minmostate state, int frontsize, boolean polishsolutions, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetalgonbi() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetalgonbi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetalgonbi(error_msg, state.get_ptr(), frontsize, polishsolutions, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetalgonbi");
    }
    public static void minmosetalgonbi(minmostate state, int frontsize, boolean polishsolutions) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetalgonbi() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetalgonbi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetalgonbi(error_msg, state.get_ptr(), frontsize, polishsolutions, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetalgonbi");
    }
    private static native int _jni_minmosetalgonbi(mut_string error_msg, long state, int frontsize, boolean polishsolutions, long _xparams);

    public static void minmosetbc(minmostate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetbc");
    }
    public static void minmosetbc(minmostate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetbc");
    }
    private static native int _jni_minmosetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void minmosetlc2dense(minmostate state, double[][] a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetlc2dense(error_msg, state.get_ptr(), a, al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetlc2dense");
    }
    public static void minmosetlc2dense(minmostate state, double[][] a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetlc2dense(error_msg, state.get_ptr(), a, al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetlc2dense");
    }
            
    public static void minmosetlc2dense(minmostate state, double[][] a, double[] al, double[] au, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling minmosetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minmosetlc2dense(state, a, al, au, k, _params);
    
    }
    
    public static void minmosetlc2dense(minmostate state, double[][] a, double[] al, double[] au) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(a)!=al.length) || (ap.rows(a)!=au.length))
            throw new exception("Error while calling minmosetlc2dense(): looks like one of arguments has wrong size");
        k = ap.rows(a);
        minmosetlc2dense(state, a, al, au, k, _params);
    
    }
    private static native int _jni_minmosetlc2dense(mut_string error_msg, long state, double[][] a, double[] al, double[] au, int k, long _xparams);

    public static void minmosetlc2(minmostate state, sparsematrix a, double[] al, double[] au, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minmosetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minmosetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetlc2(error_msg, state.get_ptr(), a.get_ptr(), al, au, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetlc2");
    }
    public static void minmosetlc2(minmostate state, sparsematrix a, double[] al, double[] au, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of minmosetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of minmosetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetlc2(error_msg, state.get_ptr(), a.get_ptr(), al, au, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetlc2");
    }
    private static native int _jni_minmosetlc2(mut_string error_msg, long state, long a, double[] al, double[] au, int k, long _xparams);

    public static void minmosetlc2mixed(minmostate state, sparsematrix sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2mixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2mixed() points to deallocated ALGLIB object");
        if( sparsea==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minmosetlc2mixed() is null");
        if( sparsea.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minmosetlc2mixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetlc2mixed(error_msg, state.get_ptr(), sparsea.get_ptr(), ksparse, densea, kdense, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetlc2mixed");
    }
    public static void minmosetlc2mixed(minmostate state, sparsematrix sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2mixed() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetlc2mixed() points to deallocated ALGLIB object");
        if( sparsea==null )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minmosetlc2mixed() is null");
        if( sparsea.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'sparsea' of minmosetlc2mixed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetlc2mixed(error_msg, state.get_ptr(), sparsea.get_ptr(), ksparse, densea, kdense, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetlc2mixed");
    }
    private static native int _jni_minmosetlc2mixed(mut_string error_msg, long state, long sparsea, int ksparse, double[][] densea, int kdense, double[] al, double[] au, long _xparams);

    public static void minmoaddlc2dense(minmostate state, double[] a, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoaddlc2dense(error_msg, state.get_ptr(), a, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoaddlc2dense");
    }
    public static void minmoaddlc2dense(minmostate state, double[] a, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2dense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2dense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoaddlc2dense(error_msg, state.get_ptr(), a, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoaddlc2dense");
    }
    private static native int _jni_minmoaddlc2dense(mut_string error_msg, long state, double[] a, double al, double au, long _xparams);

    public static void minmoaddlc2(minmostate state, int[] idxa, double[] vala, int nnz, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoaddlc2(error_msg, state.get_ptr(), idxa, vala, nnz, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoaddlc2");
    }
    public static void minmoaddlc2(minmostate state, int[] idxa, double[] vala, int nnz, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoaddlc2(error_msg, state.get_ptr(), idxa, vala, nnz, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoaddlc2");
    }
    private static native int _jni_minmoaddlc2(mut_string error_msg, long state, int[] idxa, double[] vala, int nnz, double al, double au, long _xparams);

    public static void minmoaddlc2sparsefromdense(minmostate state, double[] da, double al, double au, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2sparsefromdense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2sparsefromdense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoaddlc2sparsefromdense(error_msg, state.get_ptr(), da, al, au, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoaddlc2sparsefromdense");
    }
    public static void minmoaddlc2sparsefromdense(minmostate state, double[] da, double al, double au) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2sparsefromdense() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoaddlc2sparsefromdense() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoaddlc2sparsefromdense(error_msg, state.get_ptr(), da, al, au, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoaddlc2sparsefromdense");
    }
    private static native int _jni_minmoaddlc2sparsefromdense(mut_string error_msg, long state, double[] da, double al, double au, long _xparams);

    public static void minmosetnlc2(minmostate state, double[] nl, double[] nu, int nnlc, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetnlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetnlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetnlc2(error_msg, state.get_ptr(), nl, nu, nnlc, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetnlc2");
    }
    public static void minmosetnlc2(minmostate state, double[] nl, double[] nu, int nnlc) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetnlc2() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetnlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetnlc2(error_msg, state.get_ptr(), nl, nu, nnlc, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetnlc2");
    }
    private static native int _jni_minmosetnlc2(mut_string error_msg, long state, double[] nl, double[] nu, int nnlc, long _xparams);

    public static void minmosetcond(minmostate state, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetcond(error_msg, state.get_ptr(), epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetcond");
    }
    public static void minmosetcond(minmostate state, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetcond(error_msg, state.get_ptr(), epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetcond");
    }
    private static native int _jni_minmosetcond(mut_string error_msg, long state, double epsx, int maxits, long _xparams);

    public static void minmosetscale(minmostate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetscale");
    }
    public static void minmosetscale(minmostate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetscale");
    }
    private static native int _jni_minmosetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minmosetxrep(minmostate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetxrep");
    }
    public static void minmosetxrep(minmostate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmosetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmosetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmosetxrep");
    }
    private static native int _jni_minmosetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static boolean minmoiteration(minmostate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoiteration");
        return lcl_result.val;
    }
    public static boolean minmoiteration(minmostate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoiteration");
        return lcl_result.val;
    }
    private static native int _jni_minmoiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void minmooptimize(minmostate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minmooptimize(state, fvec, rep, obj, null);
    }
    
    public static void minmooptimize(minmostate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmooptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmooptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        long xv_fi = 0;
        rlc_double1d rlc_fi = new rlc_double1d();
        boolean xc_needfi;
    
        //
        // Check correctness of interfaces
        //
        if( fvec==null )
            throw new alglib.exception("ALGLIB: error in 'minmooptimize()' (fvec is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minmostate_get_x(lcl_state);
            xv_fi = _jni_minmostate_get_fi(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_fi, rlc_fi);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minmo_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minmo_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minmoiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minmoiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minmoiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minmostate_get_xupdated(lcl_state);
                xc_needfi = _jni_minmostate_get_needfi(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needfi )
                {
                    fvec.calc(rlc_arg.val, rlc_fi.val, obj);
                    _jni_x_vector_from_array(xv_fi, rlc_fi.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minmostate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minmooptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_fi);
        }
    }
    public static void minmooptimize(minmostate state, ndimensional_jac jac, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minmooptimize(state, jac, rep, obj, null);
    }
    
    public static void minmooptimize(minmostate state, ndimensional_jac jac, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmooptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmooptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        long xv_fi = 0;
        rlc_double1d rlc_fi = new rlc_double1d();
        long xm_j = 0;
        rlc_double2d rlc_j = new rlc_double2d();
        boolean xc_needfij;
    
        //
        // Check correctness of interfaces
        //
        if( jac==null )
            throw new alglib.exception("ALGLIB: error in 'minmooptimize()' (jac is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minmostate_get_x(lcl_state);
            xv_fi = _jni_minmostate_get_fi(lcl_state);
            xm_j = _jni_minmostate_get_j(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_fi, rlc_fi);
            _jni_x_matrix_to_double_array(xm_j, rlc_j);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minmo_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minmo_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minmoiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minmoiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minmoiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minmostate_get_xupdated(lcl_state);
                xc_needfij = _jni_minmostate_get_needfij(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needfij )
                {
                    jac.calc(rlc_arg.val, rlc_fi.val, rlc_j.val, obj);
                    _jni_x_vector_from_array(xv_fi, rlc_fi.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    _jni_x_matrix_from_array(xm_j,  rlc_j.val,  DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minmostate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minmooptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_fi);
        _jni_x_matrix_clear_and_free(xm_j);
        }
    }
    private static native int _jni_rcv2_minmo_set_protocol_v1(mut_string error_msg, long obj, long _xparams);

    public static class minmoresults_results
    {
        public double[][] paretofront;
        public int frontsize;
        public minmoreport rep;
    }
    public static minmoresults_results minmoresults(minmostate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_paretofront = new rlc_double2d();
        mut_int lcl_frontsize = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoresults(error_msg, state.get_ptr(), lcl_paretofront, lcl_frontsize, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoresults");
        minmoresults_results ret_tuple = new minmoresults_results();
        ret_tuple.paretofront = lcl_paretofront.val;
        ret_tuple.frontsize = lcl_frontsize.val;
        ret_tuple.rep = (minmoreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minmoresults_results minmoresults(minmostate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_paretofront = new rlc_double2d();
        mut_int lcl_frontsize = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmoresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmoresults(error_msg, state.get_ptr(), lcl_paretofront, lcl_frontsize, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmoresults");
        minmoresults_results ret_tuple = new minmoresults_results();
        ret_tuple.paretofront = lcl_paretofront.val;
        ret_tuple.frontsize = lcl_frontsize.val;
        ret_tuple.rep = (minmoreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minmoresults(mut_string error_msg, long state, rlc_double2d paretofront, mut_int frontsize, mut_object rep, long _xparams);

    public static void minmorequesttermination(minmostate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmorequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmorequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmorequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmorequesttermination");
    }
    public static void minmorequesttermination(minmostate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmorequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmorequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmorequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmorequesttermination");
    }
    private static native int _jni_minmorequesttermination(mut_string error_msg, long state, long _xparams);

    public static void minmorestartfrom(minmostate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmorestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmorestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmorestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmorestartfrom");
    }
    public static void minmorestartfrom(minmostate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmorestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minmorestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minmorestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minmorestartfrom");
    }
    private static native int _jni_minmorestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    
    
    //
    // Subpackage minns
    //
    

    public static class minnsstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minnsstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minnsstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minnsstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minnsstate(0);
            return new minnsstate(_jni_x_obj_copy_minnsstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minnsstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minnsstate(long x);
    private static native void _jni_x_obj_free_minnsstate(long x);
    private static native boolean _jni_minnsstate_get_needfi(long x);
    private static native void _jni_minnsstate_set_needfi(long x, boolean v);
    private static native boolean _jni_minnsstate_get_needfij(long x);
    private static native void _jni_minnsstate_set_needfij(long x, boolean v);
    private static native boolean _jni_minnsstate_get_xupdated(long x);
    private static native void _jni_minnsstate_set_xupdated(long x, boolean v);
    private static native double _jni_minnsstate_get_f(long x);
    private static native void _jni_minnsstate_set_f(long x, double v);
    private static native long _jni_minnsstate_get_fi(long obj);
    private static native long _jni_minnsstate_get_j(long obj);
    private static native long _jni_minnsstate_get_x(long obj);


        public static class minnsreport extends alglibobject
        {
            public int iterationscount;
            public int nfev;
            public double cerr;
            public double lcerr;
            public double nlcerr;
            public int terminationtype;
            public int varidx;
            public int funcidx;
            public alglibobject make_copy()
            {
                minnsreport dst = new minnsreport();
                dst.iterationscount = iterationscount;
                dst.nfev = nfev;
                dst.cerr = cerr;
                dst.lcerr = lcerr;
                dst.nlcerr = nlcerr;
                dst.terminationtype = terminationtype;
                dst.varidx = varidx;
                dst.funcidx = funcidx;
                return dst;
            }
        }

    public static minnsstate minnscreate(int n, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnscreate(error_msg, n, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnscreate");
        return new minnsstate(lcl_state.val);
    }
    public static minnsstate minnscreate(int n, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnscreate(error_msg, n, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnscreate");
        return new minnsstate(lcl_state.val);
    }
            
    public static minnsstate minnscreate(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minnscreate(n, x, _params);
    
    }
    
    public static minnsstate minnscreate(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minnscreate(n, x, _params);
    
    }
    private static native int _jni_minnscreate(mut_string error_msg, int n, double[] x, mut_long state, long _xparams);

    public static minnsstate minnscreatef(int n, double[] x, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnscreatef(error_msg, n, x, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnscreatef");
        return new minnsstate(lcl_state.val);
    }
    public static minnsstate minnscreatef(int n, double[] x, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnscreatef(error_msg, n, x, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnscreatef");
        return new minnsstate(lcl_state.val);
    }
            
    public static minnsstate minnscreatef(double[] x, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minnscreatef(n, x, diffstep, _params);
    
    }
    
    public static minnsstate minnscreatef(double[] x, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minnscreatef(n, x, diffstep, _params);
    
    }
    private static native int _jni_minnscreatef(mut_string error_msg, int n, double[] x, double diffstep, mut_long state, long _xparams);

    public static void minnssetbc(minnsstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetbc");
    }
    public static void minnssetbc(minnsstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetbc");
    }
    private static native int _jni_minnssetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void minnssetlc(minnsstate state, double[][] c, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetlc(error_msg, state.get_ptr(), c, ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetlc");
    }
    public static void minnssetlc(minnsstate state, double[][] c, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetlc(error_msg, state.get_ptr(), c, ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetlc");
    }
            
    public static void minnssetlc(minnsstate state, double[][] c, int[] ct, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minnssetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minnssetlc(state, c, ct, k, _params);
    
    }
    
    public static void minnssetlc(minnsstate state, double[][] c, int[] ct) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling minnssetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        minnssetlc(state, c, ct, k, _params);
    
    }
    private static native int _jni_minnssetlc(mut_string error_msg, long state, double[][] c, int[] ct, int k, long _xparams);

    public static void minnssetnlc(minnsstate state, int nlec, int nlic, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetnlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetnlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetnlc(error_msg, state.get_ptr(), nlec, nlic, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetnlc");
    }
    public static void minnssetnlc(minnsstate state, int nlec, int nlic) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetnlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetnlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetnlc(error_msg, state.get_ptr(), nlec, nlic, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetnlc");
    }
    private static native int _jni_minnssetnlc(mut_string error_msg, long state, int nlec, int nlic, long _xparams);

    public static void minnssetcond(minnsstate state, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetcond(error_msg, state.get_ptr(), epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetcond");
    }
    public static void minnssetcond(minnsstate state, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetcond(error_msg, state.get_ptr(), epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetcond");
    }
    private static native int _jni_minnssetcond(mut_string error_msg, long state, double epsx, int maxits, long _xparams);

    public static void minnssetscale(minnsstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetscale");
    }
    public static void minnssetscale(minnsstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetscale");
    }
    private static native int _jni_minnssetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minnssetalgoags(minnsstate state, double radius, double penalty, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetalgoags() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetalgoags() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetalgoags(error_msg, state.get_ptr(), radius, penalty, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetalgoags");
    }
    public static void minnssetalgoags(minnsstate state, double radius, double penalty) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetalgoags() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetalgoags() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetalgoags(error_msg, state.get_ptr(), radius, penalty, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetalgoags");
    }
    private static native int _jni_minnssetalgoags(mut_string error_msg, long state, double radius, double penalty, long _xparams);

    public static void minnssetxrep(minnsstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetxrep");
    }
    public static void minnssetxrep(minnsstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnssetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnssetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnssetxrep");
    }
    private static native int _jni_minnssetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void minnsrequesttermination(minnsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsrequesttermination");
    }
    public static void minnsrequesttermination(minnsstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsrequesttermination");
    }
    private static native int _jni_minnsrequesttermination(mut_string error_msg, long state, long _xparams);

    public static boolean minnsiteration(minnsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsiteration");
        return lcl_result.val;
    }
    public static boolean minnsiteration(minnsstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsiteration");
        return lcl_result.val;
    }
    private static native int _jni_minnsiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void minnsoptimize(minnsstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minnsoptimize(state, fvec, rep, obj, null);
    }
    
    public static void minnsoptimize(minnsstate state, ndimensional_fvec fvec, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        long xv_fi = 0;
        rlc_double1d rlc_fi = new rlc_double1d();
        boolean xc_needfi;
    
        //
        // Check correctness of interfaces
        //
        if( fvec==null )
            throw new alglib.exception("ALGLIB: error in 'minnsoptimize()' (fvec is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minnsstate_get_x(lcl_state);
            xv_fi = _jni_minnsstate_get_fi(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_fi, rlc_fi);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minns_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minns_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnsiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minnsiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnsiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minnsstate_get_xupdated(lcl_state);
                xc_needfi = _jni_minnsstate_get_needfi(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needfi )
                {
                    fvec.calc(rlc_arg.val, rlc_fi.val, obj);
                    _jni_x_vector_from_array(xv_fi, rlc_fi.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minnsstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minnsoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_fi);
        }
    }
    public static void minnsoptimize(minnsstate state, ndimensional_jac jac, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minnsoptimize(state, jac, rep, obj, null);
    }
    
    public static void minnsoptimize(minnsstate state, ndimensional_jac jac, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        long xv_fi = 0;
        rlc_double1d rlc_fi = new rlc_double1d();
        long xm_j = 0;
        rlc_double2d rlc_j = new rlc_double2d();
        boolean xc_needfij;
    
        //
        // Check correctness of interfaces
        //
        if( jac==null )
            throw new alglib.exception("ALGLIB: error in 'minnsoptimize()' (jac is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minnsstate_get_x(lcl_state);
            xv_fi = _jni_minnsstate_get_fi(lcl_state);
            xm_j = _jni_minnsstate_get_j(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_fi, rlc_fi);
            _jni_x_matrix_to_double_array(xm_j, rlc_j);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minns_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minns_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnsiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minnsiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minnsiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minnsstate_get_xupdated(lcl_state);
                xc_needfij = _jni_minnsstate_get_needfij(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needfij )
                {
                    jac.calc(rlc_arg.val, rlc_fi.val, rlc_j.val, obj);
                    _jni_x_vector_from_array(xv_fi, rlc_fi.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    _jni_x_matrix_from_array(xm_j,  rlc_j.val,  DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minnsstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minnsoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_fi);
        _jni_x_matrix_clear_and_free(xm_j);
        }
    }
    private static native int _jni_rcv2_minns_set_protocol_v1(mut_string error_msg, long obj, long _xparams);

    public static class minnsresults_results
    {
        public double[] x;
        public minnsreport rep;
    }
    public static minnsresults_results minnsresults(minnsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsresults");
        minnsresults_results ret_tuple = new minnsresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minnsreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minnsresults_results minnsresults(minnsstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsresults");
        minnsresults_results ret_tuple = new minnsresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minnsreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minnsresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minnsresultsbuf(minnsstate state, double[] x, minnsreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsresultsbuf");
        return lcl_x.val;
    }
    public static double[] minnsresultsbuf(minnsstate state, double[] x, minnsreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minnsresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void minnsrestartfrom(minnsstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsrestartfrom");
    }
    public static void minnsrestartfrom(minnsstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minnsrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minnsrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minnsrestartfrom");
    }
    private static native int _jni_minnsrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    
    
    //
    // Subpackage mincomp
    //
    

    public static class minasastate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minasastate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minasastate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minasastate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minasastate(0);
            return new minasastate(_jni_x_obj_copy_minasastate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minasastate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minasastate(long x);
    private static native void _jni_x_obj_free_minasastate(long x);
    private static native boolean _jni_minasastate_get_needfg(long x);
    private static native void _jni_minasastate_set_needfg(long x, boolean v);
    private static native boolean _jni_minasastate_get_xupdated(long x);
    private static native void _jni_minasastate_set_xupdated(long x, boolean v);
    private static native double _jni_minasastate_get_f(long x);
    private static native void _jni_minasastate_set_f(long x, double v);
    private static native long _jni_minasastate_get_g(long obj);
    private static native long _jni_minasastate_get_x(long obj);


        public static class minasareport extends alglibobject
        {
            public int iterationscount;
            public int nfev;
            public int terminationtype;
            public int activeconstraints;
            public alglibobject make_copy()
            {
                minasareport dst = new minasareport();
                dst.iterationscount = iterationscount;
                dst.nfev = nfev;
                dst.terminationtype = terminationtype;
                dst.activeconstraints = activeconstraints;
                return dst;
            }
        }

    public static void minlbfgssetdefaultpreconditioner(minlbfgsstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetdefaultpreconditioner() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetdefaultpreconditioner() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetdefaultpreconditioner(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetdefaultpreconditioner");
    }
    public static void minlbfgssetdefaultpreconditioner(minlbfgsstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetdefaultpreconditioner() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetdefaultpreconditioner() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetdefaultpreconditioner(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetdefaultpreconditioner");
    }
    private static native int _jni_minlbfgssetdefaultpreconditioner(mut_string error_msg, long state, long _xparams);

    public static void minlbfgssetcholeskypreconditioner(minlbfgsstate state, double[][] p, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetcholeskypreconditioner() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetcholeskypreconditioner() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetcholeskypreconditioner(error_msg, state.get_ptr(), p, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetcholeskypreconditioner");
    }
    public static void minlbfgssetcholeskypreconditioner(minlbfgsstate state, double[][] p, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetcholeskypreconditioner() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minlbfgssetcholeskypreconditioner() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minlbfgssetcholeskypreconditioner(error_msg, state.get_ptr(), p, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minlbfgssetcholeskypreconditioner");
    }
    private static native int _jni_minlbfgssetcholeskypreconditioner(mut_string error_msg, long state, double[][] p, boolean isupper, long _xparams);

    public static void minbleicsetbarrierwidth(minbleicstate state, double mu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbarrierwidth() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbarrierwidth() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetbarrierwidth(error_msg, state.get_ptr(), mu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetbarrierwidth");
    }
    public static void minbleicsetbarrierwidth(minbleicstate state, double mu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbarrierwidth() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbarrierwidth() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetbarrierwidth(error_msg, state.get_ptr(), mu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetbarrierwidth");
    }
    private static native int _jni_minbleicsetbarrierwidth(mut_string error_msg, long state, double mu, long _xparams);

    public static void minbleicsetbarrierdecay(minbleicstate state, double mudecay, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbarrierdecay() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbarrierdecay() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetbarrierdecay(error_msg, state.get_ptr(), mudecay, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetbarrierdecay");
    }
    public static void minbleicsetbarrierdecay(minbleicstate state, double mudecay) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbarrierdecay() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbleicsetbarrierdecay() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbleicsetbarrierdecay(error_msg, state.get_ptr(), mudecay, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbleicsetbarrierdecay");
    }
    private static native int _jni_minbleicsetbarrierdecay(mut_string error_msg, long state, double mudecay, long _xparams);

    public static minasastate minasacreate(int n, double[] x, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasacreate(error_msg, n, x, bndl, bndu, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasacreate");
        return new minasastate(lcl_state.val);
    }
    public static minasastate minasacreate(int n, double[] x, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasacreate(error_msg, n, x, bndl, bndu, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasacreate");
        return new minasastate(lcl_state.val);
    }
            
    public static minasastate minasacreate(double[] x, double[] bndl, double[] bndu, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=bndl.length) || (x.length!=bndu.length))
            throw new exception("Error while calling minasacreate(): looks like one of arguments has wrong size");
        n = x.length;
        return minasacreate(n, x, bndl, bndu, _params);
    
    }
    
    public static minasastate minasacreate(double[] x, double[] bndl, double[] bndu) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=bndl.length) || (x.length!=bndu.length))
            throw new exception("Error while calling minasacreate(): looks like one of arguments has wrong size");
        n = x.length;
        return minasacreate(n, x, bndl, bndu, _params);
    
    }
    private static native int _jni_minasacreate(mut_string error_msg, int n, double[] x, double[] bndl, double[] bndu, mut_long state, long _xparams);

    public static void minasasetcond(minasastate state, double epsg, double epsf, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasasetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasasetcond");
    }
    public static void minasasetcond(minasastate state, double epsg, double epsf, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasasetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasasetcond");
    }
    private static native int _jni_minasasetcond(mut_string error_msg, long state, double epsg, double epsf, double epsx, int maxits, long _xparams);

    public static void minasasetxrep(minasastate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasasetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasasetxrep");
    }
    public static void minasasetxrep(minasastate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasasetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasasetxrep");
    }
    private static native int _jni_minasasetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void minasasetalgorithm(minasastate state, int algotype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetalgorithm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetalgorithm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasasetalgorithm(error_msg, state.get_ptr(), algotype, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasasetalgorithm");
    }
    public static void minasasetalgorithm(minasastate state, int algotype) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetalgorithm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetalgorithm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasasetalgorithm(error_msg, state.get_ptr(), algotype, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasasetalgorithm");
    }
    private static native int _jni_minasasetalgorithm(mut_string error_msg, long state, int algotype, long _xparams);

    public static void minasasetstpmax(minasastate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasasetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasasetstpmax");
    }
    public static void minasasetstpmax(minasastate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasasetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasasetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasasetstpmax");
    }
    private static native int _jni_minasasetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static boolean minasaiteration(minasastate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasaiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasaiteration");
        return lcl_result.val;
    }
    public static boolean minasaiteration(minasastate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasaiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasaiteration");
        return lcl_result.val;
    }
    private static native int _jni_minasaiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void minasaoptimize(minasastate state, ndimensional_grad grad, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minasaoptimize(state, grad, rep, obj, null);
    }
    
    public static void minasaoptimize(minasastate state, ndimensional_grad grad, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        double lcl_f = 0;
        long xv_g = 0;
        rlc_double1d rlc_g = new rlc_double1d();
        boolean xc_needfg;
    
        //
        // Check correctness of interfaces
        //
        if( grad==null )
            throw new alglib.exception("ALGLIB: error in 'minasaoptimize()' (grad is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minasastate_get_x(lcl_state);
            xv_g = _jni_minasastate_get_g(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_g, rlc_g);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minasa_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minasa_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minasaiteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minasaiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minasaiteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minasastate_get_xupdated(lcl_state);
                xc_needfg = _jni_minasastate_get_needfg(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needfg )
                {
                    lcl_f = grad.calc(rlc_arg.val, rlc_g.val, obj);
                    _jni_minasastate_set_f(lcl_state, lcl_f);
                    _jni_x_vector_from_array(xv_g, rlc_g.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minasastate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minasaoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_g);
        }
    }
    private static native int _jni_rcv2_minasa_set_protocol_v1(mut_string error_msg, long obj, long _xparams);

    public static class minasaresults_results
    {
        public double[] x;
        public minasareport rep;
    }
    public static minasaresults_results minasaresults(minasastate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasaresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasaresults");
        minasaresults_results ret_tuple = new minasaresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minasareport)lcl_rep.val;
        return ret_tuple;
    }
    public static minasaresults_results minasaresults(minasastate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasaresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasaresults");
        minasaresults_results ret_tuple = new minasaresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minasareport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minasaresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minasaresultsbuf(minasastate state, double[] x, minasareport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasaresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasaresultsbuf");
        return lcl_x.val;
    }
    public static double[] minasaresultsbuf(minasastate state, double[] x, minasareport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasaresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasaresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasaresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minasaresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void minasarestartfrom(minasastate state, double[] x, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasarestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasarestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasarestartfrom(error_msg, state.get_ptr(), x, bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasarestartfrom");
    }
    public static void minasarestartfrom(minasastate state, double[] x, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasarestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minasarestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minasarestartfrom(error_msg, state.get_ptr(), x, bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minasarestartfrom");
    }
    private static native int _jni_minasarestartfrom(mut_string error_msg, long state, double[] x, double[] bndl, double[] bndu, long _xparams);

    
    
    //
    // Subpackage minbc
    //
    

    public static class minbcstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected minbcstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected minbcstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected minbcstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new minbcstate(0);
            return new minbcstate(_jni_x_obj_copy_minbcstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_minbcstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_minbcstate(long x);
    private static native void _jni_x_obj_free_minbcstate(long x);
    private static native boolean _jni_minbcstate_get_needf(long x);
    private static native void _jni_minbcstate_set_needf(long x, boolean v);
    private static native boolean _jni_minbcstate_get_needfg(long x);
    private static native void _jni_minbcstate_set_needfg(long x, boolean v);
    private static native boolean _jni_minbcstate_get_xupdated(long x);
    private static native void _jni_minbcstate_set_xupdated(long x, boolean v);
    private static native double _jni_minbcstate_get_f(long x);
    private static native void _jni_minbcstate_set_f(long x, double v);
    private static native long _jni_minbcstate_get_g(long obj);
    private static native long _jni_minbcstate_get_x(long obj);


        public static class minbcreport extends alglibobject
        {
            public int iterationscount;
            public int nfev;
            public int varidx;
            public int terminationtype;
            public alglibobject make_copy()
            {
                minbcreport dst = new minbcreport();
                dst.iterationscount = iterationscount;
                dst.nfev = nfev;
                dst.varidx = varidx;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static minbcstate minbccreate(int n, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbccreate(error_msg, n, x, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbccreate");
        return new minbcstate(lcl_state.val);
    }
    public static minbcstate minbccreate(int n, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbccreate(error_msg, n, x, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbccreate");
        return new minbcstate(lcl_state.val);
    }
            
    public static minbcstate minbccreate(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minbccreate(n, x, _params);
    
    }
    
    public static minbcstate minbccreate(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minbccreate(n, x, _params);
    
    }
    private static native int _jni_minbccreate(mut_string error_msg, int n, double[] x, mut_long state, long _xparams);

    public static minbcstate minbccreatef(int n, double[] x, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbccreatef(error_msg, n, x, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbccreatef");
        return new minbcstate(lcl_state.val);
    }
    public static minbcstate minbccreatef(int n, double[] x, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbccreatef(error_msg, n, x, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbccreatef");
        return new minbcstate(lcl_state.val);
    }
            
    public static minbcstate minbccreatef(double[] x, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return minbccreatef(n, x, diffstep, _params);
    
    }
    
    public static minbcstate minbccreatef(double[] x, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return minbccreatef(n, x, diffstep, _params);
    
    }
    private static native int _jni_minbccreatef(mut_string error_msg, int n, double[] x, double diffstep, mut_long state, long _xparams);

    public static void minbcsetbc(minbcstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetbc");
    }
    public static void minbcsetbc(minbcstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetbc");
    }
    private static native int _jni_minbcsetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void minbcsetcond(minbcstate state, double epsg, double epsf, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetcond");
    }
    public static void minbcsetcond(minbcstate state, double epsg, double epsf, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetcond(error_msg, state.get_ptr(), epsg, epsf, epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetcond");
    }
    private static native int _jni_minbcsetcond(mut_string error_msg, long state, double epsg, double epsf, double epsx, int maxits, long _xparams);

    public static void minbcsetscale(minbcstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetscale");
    }
    public static void minbcsetscale(minbcstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetscale");
    }
    private static native int _jni_minbcsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void minbcsetprecdefault(minbcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecdefault() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecdefault() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetprecdefault(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetprecdefault");
    }
    public static void minbcsetprecdefault(minbcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecdefault() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecdefault() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetprecdefault(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetprecdefault");
    }
    private static native int _jni_minbcsetprecdefault(mut_string error_msg, long state, long _xparams);

    public static void minbcsetprecdiag(minbcstate state, double[] d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetprecdiag(error_msg, state.get_ptr(), d, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetprecdiag");
    }
    public static void minbcsetprecdiag(minbcstate state, double[] d) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecdiag() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecdiag() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetprecdiag(error_msg, state.get_ptr(), d, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetprecdiag");
    }
    private static native int _jni_minbcsetprecdiag(mut_string error_msg, long state, double[] d, long _xparams);

    public static void minbcsetprecscale(minbcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetprecscale(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetprecscale");
    }
    public static void minbcsetprecscale(minbcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetprecscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetprecscale(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetprecscale");
    }
    private static native int _jni_minbcsetprecscale(mut_string error_msg, long state, long _xparams);

    public static void minbcsetxrep(minbcstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetxrep");
    }
    public static void minbcsetxrep(minbcstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetxrep");
    }
    private static native int _jni_minbcsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void minbcsetstpmax(minbcstate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetstpmax");
    }
    public static void minbcsetstpmax(minbcstate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcsetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcsetstpmax");
    }
    private static native int _jni_minbcsetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static boolean minbciteration(minbcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbciteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbciteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbciteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbciteration");
        return lcl_result.val;
    }
    public static boolean minbciteration(minbcstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbciteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbciteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbciteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbciteration");
        return lcl_result.val;
    }
    private static native int _jni_minbciteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void minbcoptimize(minbcstate state, ndimensional_func func, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minbcoptimize(state, func, rep, obj, null);
    }
    
    public static void minbcoptimize(minbcstate state, ndimensional_func func, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        double lcl_f = 0;
        boolean xc_needf;
    
        //
        // Check correctness of interfaces
        //
        if( func==null )
            throw new alglib.exception("ALGLIB: error in 'minbcoptimize()' (func is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minbcstate_get_x(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minbc_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minbc_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minbciteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minbciteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minbciteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minbcstate_get_xupdated(lcl_state);
                xc_needf = _jni_minbcstate_get_needf(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needf )
                {
                    lcl_f = func.calc(rlc_arg.val, obj);
                    _jni_minbcstate_set_f(lcl_state, lcl_f);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minbcstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minbcoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        }
    }
    public static void minbcoptimize(minbcstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        minbcoptimize(state, grad, rep, obj, null);
    }
    
    public static void minbcoptimize(minbcstate state, ndimensional_grad grad, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptimize() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptimize() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        boolean xc_xupdated;
        long xv_arg = 0;
        rlc_double1d rlc_arg = new rlc_double1d();
        double lcl_f = 0;
        long xv_g = 0;
        rlc_double1d rlc_g = new rlc_double1d();
        boolean xc_needfg;
    
        //
        // Check correctness of interfaces
        //
        if( grad==null )
            throw new alglib.exception("ALGLIB: error in 'minbcoptimize()' (grad is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_arg = _jni_minbcstate_get_x(lcl_state);
            xv_g = _jni_minbcstate_get_g(lcl_state);
            _jni_x_vector_to_double_array(xv_arg, rlc_arg);
            _jni_x_vector_to_double_array(xv_g, rlc_g);
    
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_minbc_set_protocol_v1(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "minbc_set_protocol_v1 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minbciteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_minbciteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "minbciteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_xupdated = _jni_minbcstate_get_xupdated(lcl_state);
                xc_needfg = _jni_minbcstate_get_needfg(lcl_state);
                _jni_x_vector_to_double_array(xv_arg, rlc_arg);
                if( xc_needfg )
                {
                    lcl_f = grad.calc(rlc_arg.val, rlc_g.val, obj);
                    _jni_minbcstate_set_f(lcl_state, lcl_f);
                    _jni_x_vector_from_array(xv_g, rlc_g.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                if( xc_xupdated )
                {
                    if( rep!=null )
                        rep.report(rlc_arg.val, _jni_minbcstate_get_f(lcl_state), obj);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'minbcoptimize' (some derivatives were not provided?)");
            }
        }
        finally
        {
        _jni_x_vector_clear_and_free(xv_arg);
        _jni_x_vector_clear_and_free(xv_g);
        }
    }
    private static native int _jni_rcv2_minbc_set_protocol_v1(mut_string error_msg, long obj, long _xparams);

    public static void minbcoptguardgradient(minbcstate state, double teststep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardgradient(error_msg, state.get_ptr(), teststep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardgradient");
    }
    public static void minbcoptguardgradient(minbcstate state, double teststep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardgradient() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardgradient() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardgradient(error_msg, state.get_ptr(), teststep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardgradient");
    }
    private static native int _jni_minbcoptguardgradient(mut_string error_msg, long state, double teststep, long _xparams);

    public static void minbcoptguardsmoothness(minbcstate state, int level, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardsmoothness(error_msg, state.get_ptr(), level, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardsmoothness");
    }
    public static void minbcoptguardsmoothness(minbcstate state, int level) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardsmoothness() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardsmoothness() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardsmoothness(error_msg, state.get_ptr(), level, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardsmoothness");
    }
            
    public static void minbcoptguardsmoothness(minbcstate state, alglib.xparams _params) throws alglib.exception
    {
        int level;
    
        level = 1;
        minbcoptguardsmoothness(state, level, _params);
    
    }
    
    public static void minbcoptguardsmoothness(minbcstate state) throws alglib.exception
    {
        alglib.xparams _params = null;
        int level;
    
        level = 1;
        minbcoptguardsmoothness(state, level, _params);
    
    }
    private static native int _jni_minbcoptguardsmoothness(mut_string error_msg, long state, int level, long _xparams);

    public static optguardreport minbcoptguardresults(minbcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardresults(error_msg, state.get_ptr(), lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    public static optguardreport minbcoptguardresults(minbcstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardresults(error_msg, state.get_ptr(), lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardresults");
        return (optguardreport)lcl_rep.val;
    }
    private static native int _jni_minbcoptguardresults(mut_string error_msg, long state, mut_object rep, long _xparams);

    public static class minbcoptguardnonc1test0results_results
    {
        public optguardnonc1test0report strrep;
        public optguardnonc1test0report lngrep;
    }
    public static minbcoptguardnonc1test0results_results minbcoptguardnonc1test0results(minbcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardnonc1test0results");
        minbcoptguardnonc1test0results_results ret_tuple = new minbcoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static minbcoptguardnonc1test0results_results minbcoptguardnonc1test0results(minbcstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardnonc1test0results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardnonc1test0results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardnonc1test0results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardnonc1test0results");
        minbcoptguardnonc1test0results_results ret_tuple = new minbcoptguardnonc1test0results_results();
        ret_tuple.strrep = (optguardnonc1test0report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test0report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_minbcoptguardnonc1test0results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class minbcoptguardnonc1test1results_results
    {
        public optguardnonc1test1report strrep;
        public optguardnonc1test1report lngrep;
    }
    public static minbcoptguardnonc1test1results_results minbcoptguardnonc1test1results(minbcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardnonc1test1results");
        minbcoptguardnonc1test1results_results ret_tuple = new minbcoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    public static minbcoptguardnonc1test1results_results minbcoptguardnonc1test1results(minbcstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_strrep = new mut_object();
        mut_object lcl_lngrep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardnonc1test1results() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcoptguardnonc1test1results() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcoptguardnonc1test1results(error_msg, state.get_ptr(), lcl_strrep, lcl_lngrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcoptguardnonc1test1results");
        minbcoptguardnonc1test1results_results ret_tuple = new minbcoptguardnonc1test1results_results();
        ret_tuple.strrep = (optguardnonc1test1report)lcl_strrep.val;
        ret_tuple.lngrep = (optguardnonc1test1report)lcl_lngrep.val;
        return ret_tuple;
    }
    private static native int _jni_minbcoptguardnonc1test1results(mut_string error_msg, long state, mut_object strrep, mut_object lngrep, long _xparams);

    public static class minbcresults_results
    {
        public double[] x;
        public minbcreport rep;
    }
    public static minbcresults_results minbcresults(minbcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcresults");
        minbcresults_results ret_tuple = new minbcresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minbcreport)lcl_rep.val;
        return ret_tuple;
    }
    public static minbcresults_results minbcresults(minbcstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcresults(error_msg, state.get_ptr(), lcl_x, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcresults");
        minbcresults_results ret_tuple = new minbcresults_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.rep = (minbcreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_minbcresults(mut_string error_msg, long state, rlc_double1d x, mut_object rep, long _xparams);

    public static double[] minbcresultsbuf(minbcstate state, double[] x, minbcreport rep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcresultsbuf");
        return lcl_x.val;
    }
    public static double[] minbcresultsbuf(minbcstate state, double[] x, minbcreport rep) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d(x);
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcresultsbuf() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcresultsbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcresultsbuf(error_msg, state.get_ptr(), lcl_x, rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcresultsbuf");
        return lcl_x.val;
    }
    private static native int _jni_minbcresultsbuf(mut_string error_msg, long state, rlc_double1d x, Object rep, long _xparams);

    public static void minbcrestartfrom(minbcstate state, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcrestartfrom(error_msg, state.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcrestartfrom");
    }
    public static void minbcrestartfrom(minbcstate state, double[] x) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcrestartfrom() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcrestartfrom() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcrestartfrom(error_msg, state.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcrestartfrom");
    }
    private static native int _jni_minbcrestartfrom(mut_string error_msg, long state, double[] x, long _xparams);

    public static void minbcrequesttermination(minbcstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcrequesttermination(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcrequesttermination");
    }
    public static void minbcrequesttermination(minbcstate state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcrequesttermination() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of minbcrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_minbcrequesttermination(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "minbcrequesttermination");
    }
    private static native int _jni_minbcrequesttermination(mut_string error_msg, long state, long _xparams);

    
    
    //
    // Subpackage opts
    //
    

    public static class lptestproblem extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected lptestproblem()
        {
            _ptr = 0;
            own  = false;
        }
        protected lptestproblem(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected lptestproblem(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new lptestproblem(0);
            return new lptestproblem(_jni_x_obj_copy_lptestproblem(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_lptestproblem(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_lptestproblem(long x);
    private static native void _jni_x_obj_free_lptestproblem(long x);

    private static native int _jni_lptestproblemserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String lptestproblemserialize(lptestproblem obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of lptestproblemserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of lptestproblemserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_lptestproblemserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_lptestproblemunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static lptestproblem lptestproblemunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of lptestproblemunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_lptestproblemunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemunserialize");
        return new lptestproblem(lcl_result.val);
    }

    public static lptestproblem lptestproblemcreate(int n, boolean hasknowntarget, double targetf, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemcreate(error_msg, n, hasknowntarget, targetf, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemcreate");
        return new lptestproblem(lcl_p.val);
    }
    public static lptestproblem lptestproblemcreate(int n, boolean hasknowntarget, double targetf) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemcreate(error_msg, n, hasknowntarget, targetf, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemcreate");
        return new lptestproblem(lcl_p.val);
    }
    private static native int _jni_lptestproblemcreate(mut_string error_msg, int n, boolean hasknowntarget, double targetf, mut_long p, long _xparams);

    public static boolean lptestproblemhasknowntarget(lptestproblem p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemhasknowntarget() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemhasknowntarget() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemhasknowntarget(error_msg, lcl_result, p.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemhasknowntarget");
        return lcl_result.val;
    }
    public static boolean lptestproblemhasknowntarget(lptestproblem p) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemhasknowntarget() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemhasknowntarget() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemhasknowntarget(error_msg, lcl_result, p.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemhasknowntarget");
        return lcl_result.val;
    }
    private static native int _jni_lptestproblemhasknowntarget(mut_string error_msg, mut_boolean result, long p, long _xparams);

    public static double lptestproblemgettargetf(lptestproblem p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgettargetf() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgettargetf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemgettargetf(error_msg, lcl_result, p.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemgettargetf");
        return lcl_result.val;
    }
    public static double lptestproblemgettargetf(lptestproblem p) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgettargetf() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgettargetf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemgettargetf(error_msg, lcl_result, p.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemgettargetf");
        return lcl_result.val;
    }
    private static native int _jni_lptestproblemgettargetf(mut_string error_msg, mut_double result, long p, long _xparams);

    public static int lptestproblemgetn(lptestproblem p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgetn() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgetn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemgetn(error_msg, lcl_result, p.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemgetn");
        return lcl_result.val;
    }
    public static int lptestproblemgetn(lptestproblem p) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgetn() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgetn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemgetn(error_msg, lcl_result, p.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemgetn");
        return lcl_result.val;
    }
    private static native int _jni_lptestproblemgetn(mut_string error_msg, mut_int result, long p, long _xparams);

    public static int lptestproblemgetm(lptestproblem p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgetm() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgetm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemgetm(error_msg, lcl_result, p.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemgetm");
        return lcl_result.val;
    }
    public static int lptestproblemgetm(lptestproblem p) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgetm() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemgetm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemgetm(error_msg, lcl_result, p.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemgetm");
        return lcl_result.val;
    }
    private static native int _jni_lptestproblemgetm(mut_string error_msg, mut_int result, long p, long _xparams);

    public static void lptestproblemsetscale(lptestproblem p, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetscale() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemsetscale(error_msg, p.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemsetscale");
    }
    public static void lptestproblemsetscale(lptestproblem p, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetscale() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemsetscale(error_msg, p.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemsetscale");
    }
    private static native int _jni_lptestproblemsetscale(mut_string error_msg, long p, double[] s, long _xparams);

    public static void lptestproblemsetcost(lptestproblem p, double[] c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetcost() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetcost() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemsetcost(error_msg, p.get_ptr(), c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemsetcost");
    }
    public static void lptestproblemsetcost(lptestproblem p, double[] c) throws alglib.exception
    {
        activatealglibcore();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetcost() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetcost() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemsetcost(error_msg, p.get_ptr(), c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemsetcost");
    }
    private static native int _jni_lptestproblemsetcost(mut_string error_msg, long p, double[] c, long _xparams);

    public static void lptestproblemsetbc(lptestproblem p, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetbc() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemsetbc(error_msg, p.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemsetbc");
    }
    public static void lptestproblemsetbc(lptestproblem p, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetbc() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemsetbc(error_msg, p.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemsetbc");
    }
    private static native int _jni_lptestproblemsetbc(mut_string error_msg, long p, double[] bndl, double[] bndu, long _xparams);

    public static void lptestproblemsetlc2(lptestproblem p, sparsematrix a, double[] al, double[] au, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetlc2() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of lptestproblemsetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of lptestproblemsetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemsetlc2(error_msg, p.get_ptr(), a.get_ptr(), al, au, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemsetlc2");
    }
    public static void lptestproblemsetlc2(lptestproblem p, sparsematrix a, double[] al, double[] au, int m) throws alglib.exception
    {
        activatealglibcore();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetlc2() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of lptestproblemsetlc2() points to deallocated ALGLIB object");
        if( a==null )
            throw new alglib.exception("ALGLIB: parameter 'a' of lptestproblemsetlc2() is null");
        if( a.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'a' of lptestproblemsetlc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lptestproblemsetlc2(error_msg, p.get_ptr(), a.get_ptr(), al, au, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lptestproblemsetlc2");
    }
    private static native int _jni_lptestproblemsetlc2(mut_string error_msg, long p, long a, double[] al, double[] au, int m, long _xparams);

    public static minlpstate xdbgminlpcreatefromtestproblem(lptestproblem p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of xdbgminlpcreatefromtestproblem() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of xdbgminlpcreatefromtestproblem() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdbgminlpcreatefromtestproblem(error_msg, p.get_ptr(), lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdbgminlpcreatefromtestproblem");
        return new minlpstate(lcl_state.val);
    }
    public static minlpstate xdbgminlpcreatefromtestproblem(lptestproblem p) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of xdbgminlpcreatefromtestproblem() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of xdbgminlpcreatefromtestproblem() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_xdbgminlpcreatefromtestproblem(error_msg, p.get_ptr(), lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "xdbgminlpcreatefromtestproblem");
        return new minlpstate(lcl_state.val);
    }
    private static native int _jni_xdbgminlpcreatefromtestproblem(mut_string error_msg, long p, mut_long state, long _xparams);

    
    
    //
    // Subpackage nearestneighbor
    //
    

    public static class kdtreerequestbuffer extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected kdtreerequestbuffer()
        {
            _ptr = 0;
            own  = false;
        }
        protected kdtreerequestbuffer(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected kdtreerequestbuffer(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new kdtreerequestbuffer(0);
            return new kdtreerequestbuffer(_jni_x_obj_copy_kdtreerequestbuffer(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_kdtreerequestbuffer(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_kdtreerequestbuffer(long x);
    private static native void _jni_x_obj_free_kdtreerequestbuffer(long x);


    public static class kdtree extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected kdtree()
        {
            _ptr = 0;
            own  = false;
        }
        protected kdtree(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected kdtree(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new kdtree(0);
            return new kdtree(_jni_x_obj_copy_kdtree(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_kdtree(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_kdtree(long x);
    private static native void _jni_x_obj_free_kdtree(long x);

    private static native int _jni_kdtreeserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String kdtreeserialize(kdtree obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of kdtreeserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of kdtreeserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_kdtreeserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreeserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_kdtreeunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static kdtree kdtreeunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of kdtreeunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_kdtreeunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreeunserialize");
        return new kdtree(lcl_result.val);
    }

    public static kdtree kdtreebuild(double[][] xy, int n, int nx, int ny, int normtype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_kdt = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreebuild(error_msg, xy, n, nx, ny, normtype, lcl_kdt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreebuild");
        return new kdtree(lcl_kdt.val);
    }
    public static kdtree kdtreebuild(double[][] xy, int n, int nx, int ny, int normtype) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_kdt = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreebuild(error_msg, xy, n, nx, ny, normtype, lcl_kdt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreebuild");
        return new kdtree(lcl_kdt.val);
    }
            
    public static kdtree kdtreebuild(double[][] xy, int nx, int ny, int normtype, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = ap.rows(xy);
        return kdtreebuild(xy, n, nx, ny, normtype, _params);
    
    }
    
    public static kdtree kdtreebuild(double[][] xy, int nx, int ny, int normtype) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = ap.rows(xy);
        return kdtreebuild(xy, n, nx, ny, normtype, _params);
    
    }
    private static native int _jni_kdtreebuild(mut_string error_msg, double[][] xy, int n, int nx, int ny, int normtype, mut_long kdt, long _xparams);

    public static kdtree kdtreebuildtagged(double[][] xy, int[] tags, int n, int nx, int ny, int normtype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_kdt = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreebuildtagged(error_msg, xy, tags, n, nx, ny, normtype, lcl_kdt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreebuildtagged");
        return new kdtree(lcl_kdt.val);
    }
    public static kdtree kdtreebuildtagged(double[][] xy, int[] tags, int n, int nx, int ny, int normtype) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_kdt = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreebuildtagged(error_msg, xy, tags, n, nx, ny, normtype, lcl_kdt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreebuildtagged");
        return new kdtree(lcl_kdt.val);
    }
            
    public static kdtree kdtreebuildtagged(double[][] xy, int[] tags, int nx, int ny, int normtype, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(xy)!=tags.length))
            throw new exception("Error while calling kdtreebuildtagged(): looks like one of arguments has wrong size");
        n = ap.rows(xy);
        return kdtreebuildtagged(xy, tags, n, nx, ny, normtype, _params);
    
    }
    
    public static kdtree kdtreebuildtagged(double[][] xy, int[] tags, int nx, int ny, int normtype) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(xy)!=tags.length))
            throw new exception("Error while calling kdtreebuildtagged(): looks like one of arguments has wrong size");
        n = ap.rows(xy);
        return kdtreebuildtagged(xy, tags, n, nx, ny, normtype, _params);
    
    }
    private static native int _jni_kdtreebuildtagged(mut_string error_msg, double[][] xy, int[] tags, int n, int nx, int ny, int normtype, mut_long kdt, long _xparams);

    public static kdtreerequestbuffer kdtreecreaterequestbuffer(kdtree kdt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreecreaterequestbuffer() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreecreaterequestbuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreecreaterequestbuffer(error_msg, kdt.get_ptr(), lcl_buf, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreecreaterequestbuffer");
        return new kdtreerequestbuffer(lcl_buf.val);
    }
    public static kdtreerequestbuffer kdtreecreaterequestbuffer(kdtree kdt) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreecreaterequestbuffer() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreecreaterequestbuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreecreaterequestbuffer(error_msg, kdt.get_ptr(), lcl_buf, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreecreaterequestbuffer");
        return new kdtreerequestbuffer(lcl_buf.val);
    }
    private static native int _jni_kdtreecreaterequestbuffer(mut_string error_msg, long kdt, mut_long buf, long _xparams);

    public static int kdtreequeryknn(kdtree kdt, double[] x, int k, boolean selfmatch, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryknn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryknn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryknn(error_msg, lcl_result, kdt.get_ptr(), x, k, selfmatch, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryknn");
        return lcl_result.val;
    }
    public static int kdtreequeryknn(kdtree kdt, double[] x, int k, boolean selfmatch) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryknn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryknn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryknn(error_msg, lcl_result, kdt.get_ptr(), x, k, selfmatch, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryknn");
        return lcl_result.val;
    }
            
    public static int kdtreequeryknn(kdtree kdt, double[] x, int k, alglib.xparams _params) throws alglib.exception
    {
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreequeryknn(kdt, x, k, selfmatch, _params);
    
    }
    
    public static int kdtreequeryknn(kdtree kdt, double[] x, int k) throws alglib.exception
    {
        alglib.xparams _params = null;
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreequeryknn(kdt, x, k, selfmatch, _params);
    
    }
    private static native int _jni_kdtreequeryknn(mut_string error_msg, mut_int result, long kdt, double[] x, int k, boolean selfmatch, long _xparams);

    public static int kdtreetsqueryknn(kdtree kdt, kdtreerequestbuffer buf, double[] x, int k, boolean selfmatch, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryknn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryknn() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryknn() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryknn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryknn(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), x, k, selfmatch, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryknn");
        return lcl_result.val;
    }
    public static int kdtreetsqueryknn(kdtree kdt, kdtreerequestbuffer buf, double[] x, int k, boolean selfmatch) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryknn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryknn() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryknn() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryknn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryknn(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), x, k, selfmatch, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryknn");
        return lcl_result.val;
    }
            
    public static int kdtreetsqueryknn(kdtree kdt, kdtreerequestbuffer buf, double[] x, int k, alglib.xparams _params) throws alglib.exception
    {
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreetsqueryknn(kdt, buf, x, k, selfmatch, _params);
    
    }
    
    public static int kdtreetsqueryknn(kdtree kdt, kdtreerequestbuffer buf, double[] x, int k) throws alglib.exception
    {
        alglib.xparams _params = null;
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreetsqueryknn(kdt, buf, x, k, selfmatch, _params);
    
    }
    private static native int _jni_kdtreetsqueryknn(mut_string error_msg, mut_int result, long kdt, long buf, double[] x, int k, boolean selfmatch, long _xparams);

    public static int kdtreequeryrnn(kdtree kdt, double[] x, double r, boolean selfmatch, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryrnn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryrnn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryrnn(error_msg, lcl_result, kdt.get_ptr(), x, r, selfmatch, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryrnn");
        return lcl_result.val;
    }
    public static int kdtreequeryrnn(kdtree kdt, double[] x, double r, boolean selfmatch) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryrnn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryrnn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryrnn(error_msg, lcl_result, kdt.get_ptr(), x, r, selfmatch, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryrnn");
        return lcl_result.val;
    }
            
    public static int kdtreequeryrnn(kdtree kdt, double[] x, double r, alglib.xparams _params) throws alglib.exception
    {
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreequeryrnn(kdt, x, r, selfmatch, _params);
    
    }
    
    public static int kdtreequeryrnn(kdtree kdt, double[] x, double r) throws alglib.exception
    {
        alglib.xparams _params = null;
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreequeryrnn(kdt, x, r, selfmatch, _params);
    
    }
    private static native int _jni_kdtreequeryrnn(mut_string error_msg, mut_int result, long kdt, double[] x, double r, boolean selfmatch, long _xparams);

    public static int kdtreequeryrnnu(kdtree kdt, double[] x, double r, boolean selfmatch, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryrnnu() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryrnnu() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryrnnu(error_msg, lcl_result, kdt.get_ptr(), x, r, selfmatch, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryrnnu");
        return lcl_result.val;
    }
    public static int kdtreequeryrnnu(kdtree kdt, double[] x, double r, boolean selfmatch) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryrnnu() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryrnnu() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryrnnu(error_msg, lcl_result, kdt.get_ptr(), x, r, selfmatch, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryrnnu");
        return lcl_result.val;
    }
            
    public static int kdtreequeryrnnu(kdtree kdt, double[] x, double r, alglib.xparams _params) throws alglib.exception
    {
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreequeryrnnu(kdt, x, r, selfmatch, _params);
    
    }
    
    public static int kdtreequeryrnnu(kdtree kdt, double[] x, double r) throws alglib.exception
    {
        alglib.xparams _params = null;
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreequeryrnnu(kdt, x, r, selfmatch, _params);
    
    }
    private static native int _jni_kdtreequeryrnnu(mut_string error_msg, mut_int result, long kdt, double[] x, double r, boolean selfmatch, long _xparams);

    public static int kdtreetsqueryrnn(kdtree kdt, kdtreerequestbuffer buf, double[] x, double r, boolean selfmatch, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryrnn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryrnn() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryrnn() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryrnn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryrnn(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), x, r, selfmatch, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryrnn");
        return lcl_result.val;
    }
    public static int kdtreetsqueryrnn(kdtree kdt, kdtreerequestbuffer buf, double[] x, double r, boolean selfmatch) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryrnn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryrnn() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryrnn() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryrnn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryrnn(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), x, r, selfmatch, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryrnn");
        return lcl_result.val;
    }
            
    public static int kdtreetsqueryrnn(kdtree kdt, kdtreerequestbuffer buf, double[] x, double r, alglib.xparams _params) throws alglib.exception
    {
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreetsqueryrnn(kdt, buf, x, r, selfmatch, _params);
    
    }
    
    public static int kdtreetsqueryrnn(kdtree kdt, kdtreerequestbuffer buf, double[] x, double r) throws alglib.exception
    {
        alglib.xparams _params = null;
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreetsqueryrnn(kdt, buf, x, r, selfmatch, _params);
    
    }
    private static native int _jni_kdtreetsqueryrnn(mut_string error_msg, mut_int result, long kdt, long buf, double[] x, double r, boolean selfmatch, long _xparams);

    public static int kdtreetsqueryrnnu(kdtree kdt, kdtreerequestbuffer buf, double[] x, double r, boolean selfmatch, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryrnnu() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryrnnu() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryrnnu() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryrnnu() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryrnnu(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), x, r, selfmatch, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryrnnu");
        return lcl_result.val;
    }
    public static int kdtreetsqueryrnnu(kdtree kdt, kdtreerequestbuffer buf, double[] x, double r, boolean selfmatch) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryrnnu() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryrnnu() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryrnnu() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryrnnu() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryrnnu(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), x, r, selfmatch, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryrnnu");
        return lcl_result.val;
    }
            
    public static int kdtreetsqueryrnnu(kdtree kdt, kdtreerequestbuffer buf, double[] x, double r, alglib.xparams _params) throws alglib.exception
    {
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreetsqueryrnnu(kdt, buf, x, r, selfmatch, _params);
    
    }
    
    public static int kdtreetsqueryrnnu(kdtree kdt, kdtreerequestbuffer buf, double[] x, double r) throws alglib.exception
    {
        alglib.xparams _params = null;
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreetsqueryrnnu(kdt, buf, x, r, selfmatch, _params);
    
    }
    private static native int _jni_kdtreetsqueryrnnu(mut_string error_msg, mut_int result, long kdt, long buf, double[] x, double r, boolean selfmatch, long _xparams);

    public static int kdtreequeryaknn(kdtree kdt, double[] x, int k, boolean selfmatch, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryaknn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryaknn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryaknn(error_msg, lcl_result, kdt.get_ptr(), x, k, selfmatch, eps, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryaknn");
        return lcl_result.val;
    }
    public static int kdtreequeryaknn(kdtree kdt, double[] x, int k, boolean selfmatch, double eps) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryaknn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryaknn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryaknn(error_msg, lcl_result, kdt.get_ptr(), x, k, selfmatch, eps, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryaknn");
        return lcl_result.val;
    }
            
    public static int kdtreequeryaknn(kdtree kdt, double[] x, int k, double eps, alglib.xparams _params) throws alglib.exception
    {
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreequeryaknn(kdt, x, k, selfmatch, eps, _params);
    
    }
    
    public static int kdtreequeryaknn(kdtree kdt, double[] x, int k, double eps) throws alglib.exception
    {
        alglib.xparams _params = null;
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreequeryaknn(kdt, x, k, selfmatch, eps, _params);
    
    }
    private static native int _jni_kdtreequeryaknn(mut_string error_msg, mut_int result, long kdt, double[] x, int k, boolean selfmatch, double eps, long _xparams);

    public static int kdtreetsqueryaknn(kdtree kdt, kdtreerequestbuffer buf, double[] x, int k, boolean selfmatch, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryaknn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryaknn() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryaknn() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryaknn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryaknn(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), x, k, selfmatch, eps, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryaknn");
        return lcl_result.val;
    }
    public static int kdtreetsqueryaknn(kdtree kdt, kdtreerequestbuffer buf, double[] x, int k, boolean selfmatch, double eps) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryaknn() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryaknn() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryaknn() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryaknn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryaknn(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), x, k, selfmatch, eps, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryaknn");
        return lcl_result.val;
    }
            
    public static int kdtreetsqueryaknn(kdtree kdt, kdtreerequestbuffer buf, double[] x, int k, double eps, alglib.xparams _params) throws alglib.exception
    {
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreetsqueryaknn(kdt, buf, x, k, selfmatch, eps, _params);
    
    }
    
    public static int kdtreetsqueryaknn(kdtree kdt, kdtreerequestbuffer buf, double[] x, int k, double eps) throws alglib.exception
    {
        alglib.xparams _params = null;
        boolean selfmatch;
    
        selfmatch = true;
        return kdtreetsqueryaknn(kdt, buf, x, k, selfmatch, eps, _params);
    
    }
    private static native int _jni_kdtreetsqueryaknn(mut_string error_msg, mut_int result, long kdt, long buf, double[] x, int k, boolean selfmatch, double eps, long _xparams);

    public static int kdtreequerybox(kdtree kdt, double[] boxmin, double[] boxmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequerybox() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequerybox() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequerybox(error_msg, lcl_result, kdt.get_ptr(), boxmin, boxmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequerybox");
        return lcl_result.val;
    }
    public static int kdtreequerybox(kdtree kdt, double[] boxmin, double[] boxmax) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequerybox() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequerybox() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequerybox(error_msg, lcl_result, kdt.get_ptr(), boxmin, boxmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequerybox");
        return lcl_result.val;
    }
    private static native int _jni_kdtreequerybox(mut_string error_msg, mut_int result, long kdt, double[] boxmin, double[] boxmax, long _xparams);

    public static int kdtreetsquerybox(kdtree kdt, kdtreerequestbuffer buf, double[] boxmin, double[] boxmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsquerybox() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsquerybox() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsquerybox() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsquerybox() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsquerybox(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), boxmin, boxmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsquerybox");
        return lcl_result.val;
    }
    public static int kdtreetsquerybox(kdtree kdt, kdtreerequestbuffer buf, double[] boxmin, double[] boxmax) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsquerybox() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsquerybox() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsquerybox() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsquerybox() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsquerybox(error_msg, lcl_result, kdt.get_ptr(), buf.get_ptr(), boxmin, boxmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsquerybox");
        return lcl_result.val;
    }
    private static native int _jni_kdtreetsquerybox(mut_string error_msg, mut_int result, long kdt, long buf, double[] boxmin, double[] boxmax, long _xparams);

    public static double[][] kdtreequeryresultsx(kdtree kdt, double[][] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d(x);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsx() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsx(error_msg, kdt.get_ptr(), lcl_x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsx");
        return lcl_x.val;
    }
    public static double[][] kdtreequeryresultsx(kdtree kdt, double[][] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d(x);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsx() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsx(error_msg, kdt.get_ptr(), lcl_x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsx");
        return lcl_x.val;
    }
    private static native int _jni_kdtreequeryresultsx(mut_string error_msg, long kdt, rlc_double2d x, long _xparams);

    public static double[][] kdtreequeryresultsxy(kdtree kdt, double[][] xy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_xy = new rlc_double2d(xy);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxy() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsxy(error_msg, kdt.get_ptr(), lcl_xy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsxy");
        return lcl_xy.val;
    }
    public static double[][] kdtreequeryresultsxy(kdtree kdt, double[][] xy) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_xy = new rlc_double2d(xy);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxy() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsxy(error_msg, kdt.get_ptr(), lcl_xy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsxy");
        return lcl_xy.val;
    }
    private static native int _jni_kdtreequeryresultsxy(mut_string error_msg, long kdt, rlc_double2d xy, long _xparams);

    public static int[] kdtreequeryresultstags(kdtree kdt, int[] tags, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_tags = new rlc_int1d(tags);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultstags() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultstags() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultstags(error_msg, kdt.get_ptr(), lcl_tags, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultstags");
        return lcl_tags.val;
    }
    public static int[] kdtreequeryresultstags(kdtree kdt, int[] tags) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_tags = new rlc_int1d(tags);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultstags() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultstags() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultstags(error_msg, kdt.get_ptr(), lcl_tags, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultstags");
        return lcl_tags.val;
    }
    private static native int _jni_kdtreequeryresultstags(mut_string error_msg, long kdt, rlc_int1d tags, long _xparams);

    public static double[] kdtreequeryresultsdistances(kdtree kdt, double[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsdistances() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsdistances() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsdistances(error_msg, kdt.get_ptr(), lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsdistances");
        return lcl_r.val;
    }
    public static double[] kdtreequeryresultsdistances(kdtree kdt, double[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsdistances() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsdistances() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsdistances(error_msg, kdt.get_ptr(), lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsdistances");
        return lcl_r.val;
    }
    private static native int _jni_kdtreequeryresultsdistances(mut_string error_msg, long kdt, rlc_double1d r, long _xparams);

    public static double[][] kdtreetsqueryresultsx(kdtree kdt, kdtreerequestbuffer buf, double[][] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d(x);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsx() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsx() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsx() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryresultsx(error_msg, kdt.get_ptr(), buf.get_ptr(), lcl_x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryresultsx");
        return lcl_x.val;
    }
    public static double[][] kdtreetsqueryresultsx(kdtree kdt, kdtreerequestbuffer buf, double[][] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d(x);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsx() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsx() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsx() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryresultsx(error_msg, kdt.get_ptr(), buf.get_ptr(), lcl_x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryresultsx");
        return lcl_x.val;
    }
    private static native int _jni_kdtreetsqueryresultsx(mut_string error_msg, long kdt, long buf, rlc_double2d x, long _xparams);

    public static double[][] kdtreetsqueryresultsxy(kdtree kdt, kdtreerequestbuffer buf, double[][] xy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_xy = new rlc_double2d(xy);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsxy() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsxy() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsxy() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsxy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryresultsxy(error_msg, kdt.get_ptr(), buf.get_ptr(), lcl_xy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryresultsxy");
        return lcl_xy.val;
    }
    public static double[][] kdtreetsqueryresultsxy(kdtree kdt, kdtreerequestbuffer buf, double[][] xy) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_xy = new rlc_double2d(xy);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsxy() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsxy() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsxy() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsxy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryresultsxy(error_msg, kdt.get_ptr(), buf.get_ptr(), lcl_xy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryresultsxy");
        return lcl_xy.val;
    }
    private static native int _jni_kdtreetsqueryresultsxy(mut_string error_msg, long kdt, long buf, rlc_double2d xy, long _xparams);

    public static int[] kdtreetsqueryresultstags(kdtree kdt, kdtreerequestbuffer buf, int[] tags, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_tags = new rlc_int1d(tags);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultstags() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultstags() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultstags() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultstags() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryresultstags(error_msg, kdt.get_ptr(), buf.get_ptr(), lcl_tags, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryresultstags");
        return lcl_tags.val;
    }
    public static int[] kdtreetsqueryresultstags(kdtree kdt, kdtreerequestbuffer buf, int[] tags) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_tags = new rlc_int1d(tags);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultstags() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultstags() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultstags() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultstags() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryresultstags(error_msg, kdt.get_ptr(), buf.get_ptr(), lcl_tags, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryresultstags");
        return lcl_tags.val;
    }
    private static native int _jni_kdtreetsqueryresultstags(mut_string error_msg, long kdt, long buf, rlc_int1d tags, long _xparams);

    public static double[] kdtreetsqueryresultsdistances(kdtree kdt, kdtreerequestbuffer buf, double[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsdistances() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsdistances() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsdistances() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsdistances() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryresultsdistances(error_msg, kdt.get_ptr(), buf.get_ptr(), lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryresultsdistances");
        return lcl_r.val;
    }
    public static double[] kdtreetsqueryresultsdistances(kdtree kdt, kdtreerequestbuffer buf, double[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsdistances() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreetsqueryresultsdistances() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsdistances() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of kdtreetsqueryresultsdistances() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreetsqueryresultsdistances(error_msg, kdt.get_ptr(), buf.get_ptr(), lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreetsqueryresultsdistances");
        return lcl_r.val;
    }
    private static native int _jni_kdtreetsqueryresultsdistances(mut_string error_msg, long kdt, long buf, rlc_double1d r, long _xparams);

    public static double[][] kdtreequeryresultsxi(kdtree kdt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxi() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsxi(error_msg, kdt.get_ptr(), lcl_x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsxi");
        return lcl_x.val;
    }
    public static double[][] kdtreequeryresultsxi(kdtree kdt) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x = new rlc_double2d();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxi() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsxi(error_msg, kdt.get_ptr(), lcl_x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsxi");
        return lcl_x.val;
    }
    private static native int _jni_kdtreequeryresultsxi(mut_string error_msg, long kdt, rlc_double2d x, long _xparams);

    public static double[][] kdtreequeryresultsxyi(kdtree kdt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_xy = new rlc_double2d();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxyi() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxyi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsxyi(error_msg, kdt.get_ptr(), lcl_xy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsxyi");
        return lcl_xy.val;
    }
    public static double[][] kdtreequeryresultsxyi(kdtree kdt) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_xy = new rlc_double2d();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxyi() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsxyi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsxyi(error_msg, kdt.get_ptr(), lcl_xy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsxyi");
        return lcl_xy.val;
    }
    private static native int _jni_kdtreequeryresultsxyi(mut_string error_msg, long kdt, rlc_double2d xy, long _xparams);

    public static int[] kdtreequeryresultstagsi(kdtree kdt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_tags = new rlc_int1d();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultstagsi() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultstagsi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultstagsi(error_msg, kdt.get_ptr(), lcl_tags, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultstagsi");
        return lcl_tags.val;
    }
    public static int[] kdtreequeryresultstagsi(kdtree kdt) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_tags = new rlc_int1d();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultstagsi() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultstagsi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultstagsi(error_msg, kdt.get_ptr(), lcl_tags, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultstagsi");
        return lcl_tags.val;
    }
    private static native int _jni_kdtreequeryresultstagsi(mut_string error_msg, long kdt, rlc_int1d tags, long _xparams);

    public static double[] kdtreequeryresultsdistancesi(kdtree kdt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsdistancesi() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsdistancesi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsdistancesi(error_msg, kdt.get_ptr(), lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsdistancesi");
        return lcl_r.val;
    }
    public static double[] kdtreequeryresultsdistancesi(kdtree kdt) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        if( kdt==null )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsdistancesi() is null");
        if( kdt.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'kdt' of kdtreequeryresultsdistancesi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kdtreequeryresultsdistancesi(error_msg, kdt.get_ptr(), lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kdtreequeryresultsdistancesi");
        return lcl_r.val;
    }
    private static native int _jni_kdtreequeryresultsdistancesi(mut_string error_msg, long kdt, rlc_double1d r, long _xparams);

    
    
    //
    // Subpackage odesolver
    //
    

    public static class odesolverstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected odesolverstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected odesolverstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected odesolverstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new odesolverstate(0);
            return new odesolverstate(_jni_x_obj_copy_odesolverstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_odesolverstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_odesolverstate(long x);
    private static native void _jni_x_obj_free_odesolverstate(long x);
    private static native boolean _jni_odesolverstate_get_needdy(long x);
    private static native void _jni_odesolverstate_set_needdy(long x, boolean v);
    private static native long _jni_odesolverstate_get_y(long obj);
    private static native long _jni_odesolverstate_get_dy(long obj);
    private static native double _jni_odesolverstate_get_x(long x);
    private static native void _jni_odesolverstate_set_x(long x, double v);


        public static class odesolverreport extends alglibobject
        {
            public int nfev;
            public int terminationtype;
            public alglibobject make_copy()
            {
                odesolverreport dst = new odesolverreport();
                dst.nfev = nfev;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static odesolverstate odesolverrkck(double[] y, int n, double[] x, int m, double eps, double h, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_odesolverrkck(error_msg, y, n, x, m, eps, h, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "odesolverrkck");
        return new odesolverstate(lcl_state.val);
    }
    public static odesolverstate odesolverrkck(double[] y, int n, double[] x, int m, double eps, double h) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_odesolverrkck(error_msg, y, n, x, m, eps, h, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "odesolverrkck");
        return new odesolverstate(lcl_state.val);
    }
            
    public static odesolverstate odesolverrkck(double[] y, double[] x, double eps, double h, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
    
        n = y.length;
        m = x.length;
        return odesolverrkck(y, n, x, m, eps, h, _params);
    
    }
    
    public static odesolverstate odesolverrkck(double[] y, double[] x, double eps, double h) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
    
        n = y.length;
        m = x.length;
        return odesolverrkck(y, n, x, m, eps, h, _params);
    
    }
    private static native int _jni_odesolverrkck(mut_string error_msg, double[] y, int n, double[] x, int m, double eps, double h, mut_long state, long _xparams);

    public static boolean odesolveriteration(odesolverstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolveriteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolveriteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_odesolveriteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "odesolveriteration");
        return lcl_result.val;
    }
    public static boolean odesolveriteration(odesolverstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolveriteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolveriteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_odesolveriteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "odesolveriteration");
        return lcl_result.val;
    }
    private static native int _jni_odesolveriteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void odesolversolve(odesolverstate state, ndimensional_ode_rp diff, Object obj) throws alglib.exception
    {
        odesolversolve(state, diff, obj, null);
    }
    
    public static void odesolversolve(odesolverstate state, ndimensional_ode_rp diff, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolversolve() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolversolve() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
        long xv_y  = 0;
        long xv_dy = 0;
        rlc_double1d rlc_y  = new rlc_double1d();
        rlc_double1d rlc_dy = new rlc_double1d();
        double  xc_x;
        boolean xc_needdy;
    
        //
        // Check correctness of interfaces
        //
        if( diff==null )
            throw new alglib.exception("ALGLIB: error in 'odesolversolve()' (diff is null)");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            //
            // Attach x-structures to internal arrays
            //
            xv_y  = _jni_odesolverstate_get_y(lcl_state);
            xv_dy = _jni_odesolverstate_get_dy(lcl_state);
            _jni_x_vector_to_double_array(xv_y,  rlc_y);
            _jni_x_vector_to_double_array(xv_dy, rlc_dy);
        
            //
            // Main loop
            //
            for(;;)
            {
                //
                // Check error code to catch errors generated during previous rcomm request
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "odesolveriteration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_odesolveriteration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "odesolveriteration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface:
                // * fetch flags
                // * make delegate calls
                //
                xc_needdy = _jni_odesolverstate_get_needdy(lcl_state);
                if( xc_needdy )
                {
                    _jni_x_vector_to_double_array(xv_y, rlc_y);
                    xc_x = _jni_odesolverstate_get_x(lcl_state);
                    diff.calc(rlc_y.val, xc_x, rlc_dy.val, obj);
                    _jni_x_vector_from_array(xv_dy, rlc_dy.val, DT_REAL, X_REWRITE, error_code, error_msg);
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'odesolversolve' (some derivatives were not provided?)");
            }
        }
        finally
        {
            _jni_x_vector_clear_and_free(xv_y);
            _jni_x_vector_clear_and_free(xv_dy);
        }
    }

    public static class odesolverresults_results
    {
        public int m;
        public double[] xtbl;
        public double[][] ytbl;
        public odesolverreport rep;
    }
    public static odesolverresults_results odesolverresults(odesolverstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_m = new mut_int();
        rlc_double1d lcl_xtbl = new rlc_double1d();
        rlc_double2d lcl_ytbl = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolverresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolverresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_odesolverresults(error_msg, state.get_ptr(), lcl_m, lcl_xtbl, lcl_ytbl, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "odesolverresults");
        odesolverresults_results ret_tuple = new odesolverresults_results();
        ret_tuple.m = lcl_m.val;
        ret_tuple.xtbl = lcl_xtbl.val;
        ret_tuple.ytbl = lcl_ytbl.val;
        ret_tuple.rep = (odesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    public static odesolverresults_results odesolverresults(odesolverstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_m = new mut_int();
        rlc_double1d lcl_xtbl = new rlc_double1d();
        rlc_double2d lcl_ytbl = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolverresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of odesolverresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_odesolverresults(error_msg, state.get_ptr(), lcl_m, lcl_xtbl, lcl_ytbl, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "odesolverresults");
        odesolverresults_results ret_tuple = new odesolverresults_results();
        ret_tuple.m = lcl_m.val;
        ret_tuple.xtbl = lcl_xtbl.val;
        ret_tuple.ytbl = lcl_ytbl.val;
        ret_tuple.rep = (odesolverreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_odesolverresults(mut_string error_msg, long state, mut_int m, rlc_double1d xtbl, rlc_double2d ytbl, mut_object rep, long _xparams);

    
    
    //
    // Subpackage inverseupdate
    //
    
    public static void rmatrixinvupdatesimple(double[][] inva, int n, int updrow, int updcolumn, double updval, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinvupdatesimple(error_msg, inva, n, updrow, updcolumn, updval, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinvupdatesimple");
    }
    public static void rmatrixinvupdatesimple(double[][] inva, int n, int updrow, int updcolumn, double updval) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinvupdatesimple(error_msg, inva, n, updrow, updcolumn, updval, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinvupdatesimple");
    }
    private static native int _jni_rmatrixinvupdatesimple(mut_string error_msg, double[][] inva, int n, int updrow, int updcolumn, double updval, long _xparams);

    public static void rmatrixinvupdaterow(double[][] inva, int n, int updrow, double[] v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinvupdaterow(error_msg, inva, n, updrow, v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinvupdaterow");
    }
    public static void rmatrixinvupdaterow(double[][] inva, int n, int updrow, double[] v) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinvupdaterow(error_msg, inva, n, updrow, v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinvupdaterow");
    }
    private static native int _jni_rmatrixinvupdaterow(mut_string error_msg, double[][] inva, int n, int updrow, double[] v, long _xparams);

    public static void rmatrixinvupdatecolumn(double[][] inva, int n, int updcolumn, double[] u, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinvupdatecolumn(error_msg, inva, n, updcolumn, u, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinvupdatecolumn");
    }
    public static void rmatrixinvupdatecolumn(double[][] inva, int n, int updcolumn, double[] u) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinvupdatecolumn(error_msg, inva, n, updcolumn, u, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinvupdatecolumn");
    }
    private static native int _jni_rmatrixinvupdatecolumn(mut_string error_msg, double[][] inva, int n, int updcolumn, double[] u, long _xparams);

    public static void rmatrixinvupdateuv(double[][] inva, int n, double[] u, double[] v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinvupdateuv(error_msg, inva, n, u, v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinvupdateuv");
    }
    public static void rmatrixinvupdateuv(double[][] inva, int n, double[] u, double[] v) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixinvupdateuv(error_msg, inva, n, u, v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixinvupdateuv");
    }
    private static native int _jni_rmatrixinvupdateuv(mut_string error_msg, double[][] inva, int n, double[] u, double[] v, long _xparams);

    
    
    //
    // Subpackage schur
    //
    
    public static class rmatrixschur_results
    {
        public boolean result;
        public double[][] s;
    }
    public static rmatrixschur_results rmatrixschur(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double2d lcl_s = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixschur(error_msg, lcl_result, a, n, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixschur");
        rmatrixschur_results ret_tuple = new rmatrixschur_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.s = lcl_s.val;
        return ret_tuple;
    }
    public static rmatrixschur_results rmatrixschur(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double2d lcl_s = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixschur(error_msg, lcl_result, a, n, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixschur");
        rmatrixschur_results ret_tuple = new rmatrixschur_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.s = lcl_s.val;
        return ret_tuple;
    }
    private static native int _jni_rmatrixschur(mut_string error_msg, mut_boolean result, double[][] a, int n, rlc_double2d s, long _xparams);

    
    
    //
    // Subpackage spdgevd
    //
    
    public static class smatrixgevd_results
    {
        public boolean result;
        public double[] d;
        public double[][] z;
    }
    public static smatrixgevd_results smatrixgevd(double[][] a, int n, boolean isuppera, double[][] b, boolean isupperb, int zneeded, int problemtype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixgevd(error_msg, lcl_result, a, n, isuppera, b, isupperb, zneeded, problemtype, lcl_d, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixgevd");
        smatrixgevd_results ret_tuple = new smatrixgevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static smatrixgevd_results smatrixgevd(double[][] a, int n, boolean isuppera, double[][] b, boolean isupperb, int zneeded, int problemtype) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double1d lcl_d = new rlc_double1d();
        rlc_double2d lcl_z = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixgevd(error_msg, lcl_result, a, n, isuppera, b, isupperb, zneeded, problemtype, lcl_d, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixgevd");
        smatrixgevd_results ret_tuple = new smatrixgevd_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixgevd(mut_string error_msg, mut_boolean result, double[][] a, int n, boolean isuppera, double[][] b, boolean isupperb, int zneeded, int problemtype, rlc_double1d d, rlc_double2d z, long _xparams);

    public static class smatrixgevdreduce_results
    {
        public boolean result;
        public double[][] r;
        public boolean isupperr;
    }
    public static smatrixgevdreduce_results smatrixgevdreduce(double[][] a, int n, boolean isuppera, double[][] b, boolean isupperb, int problemtype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double2d lcl_r = new rlc_double2d();
        mut_boolean lcl_isupperr = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixgevdreduce(error_msg, lcl_result, a, n, isuppera, b, isupperb, problemtype, lcl_r, lcl_isupperr, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixgevdreduce");
        smatrixgevdreduce_results ret_tuple = new smatrixgevdreduce_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.r = lcl_r.val;
        ret_tuple.isupperr = lcl_isupperr.val;
        return ret_tuple;
    }
    public static smatrixgevdreduce_results smatrixgevdreduce(double[][] a, int n, boolean isuppera, double[][] b, boolean isupperb, int problemtype) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        rlc_double2d lcl_r = new rlc_double2d();
        mut_boolean lcl_isupperr = new mut_boolean();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_smatrixgevdreduce(error_msg, lcl_result, a, n, isuppera, b, isupperb, problemtype, lcl_r, lcl_isupperr, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "smatrixgevdreduce");
        smatrixgevdreduce_results ret_tuple = new smatrixgevdreduce_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.r = lcl_r.val;
        ret_tuple.isupperr = lcl_isupperr.val;
        return ret_tuple;
    }
    private static native int _jni_smatrixgevdreduce(mut_string error_msg, mut_boolean result, double[][] a, int n, boolean isuppera, double[][] b, boolean isupperb, int problemtype, rlc_double2d r, mut_boolean isupperr, long _xparams);

    
    
    //
    // Subpackage matdet
    //
    
    public static double rmatrixludet(double[][] a, int[] pivots, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixludet(error_msg, lcl_result, a, pivots, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixludet");
        return lcl_result.val;
    }
    public static double rmatrixludet(double[][] a, int[] pivots, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixludet(error_msg, lcl_result, a, pivots, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixludet");
        return lcl_result.val;
    }
            
    public static double rmatrixludet(double[][] a, int[] pivots, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=pivots.length))
            throw new exception("Error while calling rmatrixludet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixludet(a, pivots, n, _params);
    
    }
    
    public static double rmatrixludet(double[][] a, int[] pivots) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=pivots.length))
            throw new exception("Error while calling rmatrixludet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixludet(a, pivots, n, _params);
    
    }
    private static native int _jni_rmatrixludet(mut_string error_msg, mut_double result, double[][] a, int[] pivots, int n, long _xparams);

    public static double rmatrixdet(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixdet(error_msg, lcl_result, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixdet");
        return lcl_result.val;
    }
    public static double rmatrixdet(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rmatrixdet(error_msg, lcl_result, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rmatrixdet");
        return lcl_result.val;
    }
            
    public static double rmatrixdet(double[][] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling rmatrixdet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixdet(a, n, _params);
    
    }
    
    public static double rmatrixdet(double[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling rmatrixdet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return rmatrixdet(a, n, _params);
    
    }
    private static native int _jni_rmatrixdet(mut_string error_msg, mut_double result, double[][] a, int n, long _xparams);

    public static complex cmatrixludet(complex[][] a, int[] pivots, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_complex lcl_result = new mut_complex();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixludet(error_msg, lcl_result, a, pivots, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixludet");
        return lcl_result.val;
    }
    public static complex cmatrixludet(complex[][] a, int[] pivots, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_complex lcl_result = new mut_complex();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixludet(error_msg, lcl_result, a, pivots, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixludet");
        return lcl_result.val;
    }
            
    public static complex cmatrixludet(complex[][] a, int[] pivots, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=pivots.length))
            throw new exception("Error while calling cmatrixludet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixludet(a, pivots, n, _params);
    
    }
    
    public static complex cmatrixludet(complex[][] a, int[] pivots) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)) || (ap.rows(a)!=pivots.length))
            throw new exception("Error while calling cmatrixludet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixludet(a, pivots, n, _params);
    
    }
    private static native int _jni_cmatrixludet(mut_string error_msg, mut_complex result, complex[][] a, int[] pivots, int n, long _xparams);

    public static complex cmatrixdet(complex[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_complex lcl_result = new mut_complex();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixdet(error_msg, lcl_result, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixdet");
        return lcl_result.val;
    }
    public static complex cmatrixdet(complex[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_complex lcl_result = new mut_complex();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cmatrixdet(error_msg, lcl_result, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cmatrixdet");
        return lcl_result.val;
    }
            
    public static complex cmatrixdet(complex[][] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling cmatrixdet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixdet(a, n, _params);
    
    }
    
    public static complex cmatrixdet(complex[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling cmatrixdet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return cmatrixdet(a, n, _params);
    
    }
    private static native int _jni_cmatrixdet(mut_string error_msg, mut_complex result, complex[][] a, int n, long _xparams);

    public static double spdmatrixcholeskydet(double[][] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskydet(error_msg, lcl_result, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskydet");
        return lcl_result.val;
    }
    public static double spdmatrixcholeskydet(double[][] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixcholeskydet(error_msg, lcl_result, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixcholeskydet");
        return lcl_result.val;
    }
            
    public static double spdmatrixcholeskydet(double[][] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling spdmatrixcholeskydet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixcholeskydet(a, n, _params);
    
    }
    
    public static double spdmatrixcholeskydet(double[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling spdmatrixcholeskydet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixcholeskydet(a, n, _params);
    
    }
    private static native int _jni_spdmatrixcholeskydet(mut_string error_msg, mut_double result, double[][] a, int n, long _xparams);

    public static double spdmatrixdet(double[][] a, int n, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixdet(error_msg, lcl_result, a, n, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixdet");
        return lcl_result.val;
    }
    public static double spdmatrixdet(double[][] a, int n, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spdmatrixdet(error_msg, lcl_result, a, n, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spdmatrixdet");
        return lcl_result.val;
    }
            
    public static double spdmatrixdet(double[][] a, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling spdmatrixdet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixdet(a, n, isupper, _params);
    
    }
    
    public static double spdmatrixdet(double[][] a, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (ap.rows(a)!=ap.cols(a)))
            throw new exception("Error while calling spdmatrixdet(): looks like one of arguments has wrong size");
        n = ap.rows(a);
        return spdmatrixdet(a, n, isupper, _params);
    
    }
    private static native int _jni_spdmatrixdet(mut_string error_msg, mut_double result, double[][] a, int n, boolean isupper, long _xparams);

    
    
    //
    // Subpackage gammafunc
    //
    
    public static double gammafunction(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gammafunction(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gammafunction");
        return lcl_result.val;
    }
    public static double gammafunction(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gammafunction(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gammafunction");
        return lcl_result.val;
    }
    private static native int _jni_gammafunction(mut_string error_msg, mut_double result, double x, long _xparams);

    public static class lngamma_results
    {
        public double result;
        public double sgngam;
    }
    public static lngamma_results lngamma(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_double lcl_sgngam = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lngamma(error_msg, lcl_result, x, lcl_sgngam, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lngamma");
        lngamma_results ret_tuple = new lngamma_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.sgngam = lcl_sgngam.val;
        return ret_tuple;
    }
    public static lngamma_results lngamma(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_double lcl_sgngam = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lngamma(error_msg, lcl_result, x, lcl_sgngam, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lngamma");
        lngamma_results ret_tuple = new lngamma_results();
        ret_tuple.result = lcl_result.val;
        ret_tuple.sgngam = lcl_sgngam.val;
        return ret_tuple;
    }
    private static native int _jni_lngamma(mut_string error_msg, mut_double result, double x, mut_double sgngam, long _xparams);

    
    
    //
    // Subpackage gq
    //
    
    public static class gqgeneraterec_results
    {
        public int info;
        public double[] x;
        public double[] w;
    }
    public static gqgeneraterec_results gqgeneraterec(double[] alpha, double[] beta, double mu0, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgeneraterec(error_msg, alpha, beta, mu0, n, lcl_info, lcl_x, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgeneraterec");
        gqgeneraterec_results ret_tuple = new gqgeneraterec_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    public static gqgeneraterec_results gqgeneraterec(double[] alpha, double[] beta, double mu0, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgeneraterec(error_msg, alpha, beta, mu0, n, lcl_info, lcl_x, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgeneraterec");
        gqgeneraterec_results ret_tuple = new gqgeneraterec_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    private static native int _jni_gqgeneraterec(mut_string error_msg, double[] alpha, double[] beta, double mu0, int n, mut_int info, rlc_double1d x, rlc_double1d w, long _xparams);

    public static class gqgenerategausslobattorec_results
    {
        public int info;
        public double[] x;
        public double[] w;
    }
    public static gqgenerategausslobattorec_results gqgenerategausslobattorec(double[] alpha, double[] beta, double mu0, double a, double b, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategausslobattorec(error_msg, alpha, beta, mu0, a, b, n, lcl_info, lcl_x, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategausslobattorec");
        gqgenerategausslobattorec_results ret_tuple = new gqgenerategausslobattorec_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    public static gqgenerategausslobattorec_results gqgenerategausslobattorec(double[] alpha, double[] beta, double mu0, double a, double b, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategausslobattorec(error_msg, alpha, beta, mu0, a, b, n, lcl_info, lcl_x, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategausslobattorec");
        gqgenerategausslobattorec_results ret_tuple = new gqgenerategausslobattorec_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    private static native int _jni_gqgenerategausslobattorec(mut_string error_msg, double[] alpha, double[] beta, double mu0, double a, double b, int n, mut_int info, rlc_double1d x, rlc_double1d w, long _xparams);

    public static class gqgenerategaussradaurec_results
    {
        public int info;
        public double[] x;
        public double[] w;
    }
    public static gqgenerategaussradaurec_results gqgenerategaussradaurec(double[] alpha, double[] beta, double mu0, double a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategaussradaurec(error_msg, alpha, beta, mu0, a, n, lcl_info, lcl_x, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategaussradaurec");
        gqgenerategaussradaurec_results ret_tuple = new gqgenerategaussradaurec_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    public static gqgenerategaussradaurec_results gqgenerategaussradaurec(double[] alpha, double[] beta, double mu0, double a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategaussradaurec(error_msg, alpha, beta, mu0, a, n, lcl_info, lcl_x, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategaussradaurec");
        gqgenerategaussradaurec_results ret_tuple = new gqgenerategaussradaurec_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    private static native int _jni_gqgenerategaussradaurec(mut_string error_msg, double[] alpha, double[] beta, double mu0, double a, int n, mut_int info, rlc_double1d x, rlc_double1d w, long _xparams);

    public static class gqgenerategausslegendre_results
    {
        public int info;
        public double[] x;
        public double[] w;
    }
    public static gqgenerategausslegendre_results gqgenerategausslegendre(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategausslegendre(error_msg, n, lcl_info, lcl_x, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategausslegendre");
        gqgenerategausslegendre_results ret_tuple = new gqgenerategausslegendre_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    public static gqgenerategausslegendre_results gqgenerategausslegendre(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategausslegendre(error_msg, n, lcl_info, lcl_x, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategausslegendre");
        gqgenerategausslegendre_results ret_tuple = new gqgenerategausslegendre_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    private static native int _jni_gqgenerategausslegendre(mut_string error_msg, int n, mut_int info, rlc_double1d x, rlc_double1d w, long _xparams);

    public static class gqgenerategaussjacobi_results
    {
        public int info;
        public double[] x;
        public double[] w;
    }
    public static gqgenerategaussjacobi_results gqgenerategaussjacobi(int n, double alpha, double beta, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategaussjacobi(error_msg, n, alpha, beta, lcl_info, lcl_x, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategaussjacobi");
        gqgenerategaussjacobi_results ret_tuple = new gqgenerategaussjacobi_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    public static gqgenerategaussjacobi_results gqgenerategaussjacobi(int n, double alpha, double beta) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategaussjacobi(error_msg, n, alpha, beta, lcl_info, lcl_x, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategaussjacobi");
        gqgenerategaussjacobi_results ret_tuple = new gqgenerategaussjacobi_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    private static native int _jni_gqgenerategaussjacobi(mut_string error_msg, int n, double alpha, double beta, mut_int info, rlc_double1d x, rlc_double1d w, long _xparams);

    public static class gqgenerategausslaguerre_results
    {
        public int info;
        public double[] x;
        public double[] w;
    }
    public static gqgenerategausslaguerre_results gqgenerategausslaguerre(int n, double alpha, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategausslaguerre(error_msg, n, alpha, lcl_info, lcl_x, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategausslaguerre");
        gqgenerategausslaguerre_results ret_tuple = new gqgenerategausslaguerre_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    public static gqgenerategausslaguerre_results gqgenerategausslaguerre(int n, double alpha) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategausslaguerre(error_msg, n, alpha, lcl_info, lcl_x, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategausslaguerre");
        gqgenerategausslaguerre_results ret_tuple = new gqgenerategausslaguerre_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    private static native int _jni_gqgenerategausslaguerre(mut_string error_msg, int n, double alpha, mut_int info, rlc_double1d x, rlc_double1d w, long _xparams);

    public static class gqgenerategausshermite_results
    {
        public int info;
        public double[] x;
        public double[] w;
    }
    public static gqgenerategausshermite_results gqgenerategausshermite(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategausshermite(error_msg, n, lcl_info, lcl_x, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategausshermite");
        gqgenerategausshermite_results ret_tuple = new gqgenerategausshermite_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    public static gqgenerategausshermite_results gqgenerategausshermite(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gqgenerategausshermite(error_msg, n, lcl_info, lcl_x, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gqgenerategausshermite");
        gqgenerategausshermite_results ret_tuple = new gqgenerategausshermite_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    private static native int _jni_gqgenerategausshermite(mut_string error_msg, int n, mut_int info, rlc_double1d x, rlc_double1d w, long _xparams);

    
    
    //
    // Subpackage gkq
    //
    
    public static class gkqgeneraterec_results
    {
        public int info;
        public double[] x;
        public double[] wkronrod;
        public double[] wgauss;
    }
    public static gkqgeneraterec_results gkqgeneraterec(double[] alpha, double[] beta, double mu0, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqgeneraterec(error_msg, alpha, beta, mu0, n, lcl_info, lcl_x, lcl_wkronrod, lcl_wgauss, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqgeneraterec");
        gkqgeneraterec_results ret_tuple = new gkqgeneraterec_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        return ret_tuple;
    }
    public static gkqgeneraterec_results gkqgeneraterec(double[] alpha, double[] beta, double mu0, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqgeneraterec(error_msg, alpha, beta, mu0, n, lcl_info, lcl_x, lcl_wkronrod, lcl_wgauss, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqgeneraterec");
        gkqgeneraterec_results ret_tuple = new gkqgeneraterec_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        return ret_tuple;
    }
    private static native int _jni_gkqgeneraterec(mut_string error_msg, double[] alpha, double[] beta, double mu0, int n, mut_int info, rlc_double1d x, rlc_double1d wkronrod, rlc_double1d wgauss, long _xparams);

    public static class gkqgenerategausslegendre_results
    {
        public int info;
        public double[] x;
        public double[] wkronrod;
        public double[] wgauss;
    }
    public static gkqgenerategausslegendre_results gkqgenerategausslegendre(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqgenerategausslegendre(error_msg, n, lcl_info, lcl_x, lcl_wkronrod, lcl_wgauss, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqgenerategausslegendre");
        gkqgenerategausslegendre_results ret_tuple = new gkqgenerategausslegendre_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        return ret_tuple;
    }
    public static gkqgenerategausslegendre_results gkqgenerategausslegendre(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqgenerategausslegendre(error_msg, n, lcl_info, lcl_x, lcl_wkronrod, lcl_wgauss, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqgenerategausslegendre");
        gkqgenerategausslegendre_results ret_tuple = new gkqgenerategausslegendre_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        return ret_tuple;
    }
    private static native int _jni_gkqgenerategausslegendre(mut_string error_msg, int n, mut_int info, rlc_double1d x, rlc_double1d wkronrod, rlc_double1d wgauss, long _xparams);

    public static class gkqgenerategaussjacobi_results
    {
        public int info;
        public double[] x;
        public double[] wkronrod;
        public double[] wgauss;
    }
    public static gkqgenerategaussjacobi_results gkqgenerategaussjacobi(int n, double alpha, double beta, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqgenerategaussjacobi(error_msg, n, alpha, beta, lcl_info, lcl_x, lcl_wkronrod, lcl_wgauss, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqgenerategaussjacobi");
        gkqgenerategaussjacobi_results ret_tuple = new gkqgenerategaussjacobi_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        return ret_tuple;
    }
    public static gkqgenerategaussjacobi_results gkqgenerategaussjacobi(int n, double alpha, double beta) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqgenerategaussjacobi(error_msg, n, alpha, beta, lcl_info, lcl_x, lcl_wkronrod, lcl_wgauss, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqgenerategaussjacobi");
        gkqgenerategaussjacobi_results ret_tuple = new gkqgenerategaussjacobi_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        return ret_tuple;
    }
    private static native int _jni_gkqgenerategaussjacobi(mut_string error_msg, int n, double alpha, double beta, mut_int info, rlc_double1d x, rlc_double1d wkronrod, rlc_double1d wgauss, long _xparams);

    public static class gkqlegendrecalc_results
    {
        public int info;
        public double[] x;
        public double[] wkronrod;
        public double[] wgauss;
    }
    public static gkqlegendrecalc_results gkqlegendrecalc(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqlegendrecalc(error_msg, n, lcl_info, lcl_x, lcl_wkronrod, lcl_wgauss, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqlegendrecalc");
        gkqlegendrecalc_results ret_tuple = new gkqlegendrecalc_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        return ret_tuple;
    }
    public static gkqlegendrecalc_results gkqlegendrecalc(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqlegendrecalc(error_msg, n, lcl_info, lcl_x, lcl_wkronrod, lcl_wgauss, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqlegendrecalc");
        gkqlegendrecalc_results ret_tuple = new gkqlegendrecalc_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        return ret_tuple;
    }
    private static native int _jni_gkqlegendrecalc(mut_string error_msg, int n, mut_int info, rlc_double1d x, rlc_double1d wkronrod, rlc_double1d wgauss, long _xparams);

    public static class gkqlegendretbl_results
    {
        public double[] x;
        public double[] wkronrod;
        public double[] wgauss;
        public double eps;
    }
    public static gkqlegendretbl_results gkqlegendretbl(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_double lcl_eps = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqlegendretbl(error_msg, n, lcl_x, lcl_wkronrod, lcl_wgauss, lcl_eps, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqlegendretbl");
        gkqlegendretbl_results ret_tuple = new gkqlegendretbl_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        ret_tuple.eps = lcl_eps.val;
        return ret_tuple;
    }
    public static gkqlegendretbl_results gkqlegendretbl(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_wkronrod = new rlc_double1d();
        rlc_double1d lcl_wgauss = new rlc_double1d();
        mut_double lcl_eps = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_gkqlegendretbl(error_msg, n, lcl_x, lcl_wkronrod, lcl_wgauss, lcl_eps, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "gkqlegendretbl");
        gkqlegendretbl_results ret_tuple = new gkqlegendretbl_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.wkronrod = lcl_wkronrod.val;
        ret_tuple.wgauss = lcl_wgauss.val;
        ret_tuple.eps = lcl_eps.val;
        return ret_tuple;
    }
    private static native int _jni_gkqlegendretbl(mut_string error_msg, int n, rlc_double1d x, rlc_double1d wkronrod, rlc_double1d wgauss, mut_double eps, long _xparams);

    
    
    //
    // Subpackage autogk
    //
    

        public static class autogkreport extends alglibobject
        {
            public int terminationtype;
            public int nfev;
            public int nintervals;
            public alglibobject make_copy()
            {
                autogkreport dst = new autogkreport();
                dst.terminationtype = terminationtype;
                dst.nfev = nfev;
                dst.nintervals = nintervals;
                return dst;
            }
        }


    public static class autogkstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected autogkstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected autogkstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected autogkstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new autogkstate(0);
            return new autogkstate(_jni_x_obj_copy_autogkstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_autogkstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_autogkstate(long x);
    private static native void _jni_x_obj_free_autogkstate(long x);
    private static native boolean _jni_autogkstate_get_needf(long x);
    private static native void _jni_autogkstate_set_needf(long x, boolean v);
    private static native double _jni_autogkstate_get_x(long x);
    private static native void _jni_autogkstate_set_x(long x, double v);
    private static native double _jni_autogkstate_get_xminusa(long x);
    private static native void _jni_autogkstate_set_xminusa(long x, double v);
    private static native double _jni_autogkstate_get_bminusx(long x);
    private static native void _jni_autogkstate_set_bminusx(long x, double v);
    private static native double _jni_autogkstate_get_f(long x);
    private static native void _jni_autogkstate_set_f(long x, double v);

    public static autogkstate autogksmooth(double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogksmooth(error_msg, a, b, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogksmooth");
        return new autogkstate(lcl_state.val);
    }
    public static autogkstate autogksmooth(double a, double b) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogksmooth(error_msg, a, b, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogksmooth");
        return new autogkstate(lcl_state.val);
    }
    private static native int _jni_autogksmooth(mut_string error_msg, double a, double b, mut_long state, long _xparams);

    public static autogkstate autogksmoothw(double a, double b, double xwidth, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogksmoothw(error_msg, a, b, xwidth, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogksmoothw");
        return new autogkstate(lcl_state.val);
    }
    public static autogkstate autogksmoothw(double a, double b, double xwidth) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogksmoothw(error_msg, a, b, xwidth, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogksmoothw");
        return new autogkstate(lcl_state.val);
    }
    private static native int _jni_autogksmoothw(mut_string error_msg, double a, double b, double xwidth, mut_long state, long _xparams);

    public static autogkstate autogksingular(double a, double b, double alpha, double beta, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogksingular(error_msg, a, b, alpha, beta, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogksingular");
        return new autogkstate(lcl_state.val);
    }
    public static autogkstate autogksingular(double a, double b, double alpha, double beta) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogksingular(error_msg, a, b, alpha, beta, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogksingular");
        return new autogkstate(lcl_state.val);
    }
    private static native int _jni_autogksingular(mut_string error_msg, double a, double b, double alpha, double beta, mut_long state, long _xparams);

    public static boolean autogkiteration(autogkstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogkiteration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogkiteration");
        return lcl_result.val;
    }
    public static boolean autogkiteration(autogkstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkiteration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkiteration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogkiteration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogkiteration");
        return lcl_result.val;
    }
    private static native int _jni_autogkiteration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void autogkintegrate(autogkstate state, integrator1_func func, Object obj) throws alglib.exception
    {
        autogkintegrate(state, func, obj, null);
    }
    
    public static void autogkintegrate(autogkstate state, integrator1_func func, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkintegrate() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkintegrate() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        int error_code = 0;
        mut_boolean mut_result    = new mut_boolean();
        double  xc_x, xc_xminusa, xc_bminusx;
        boolean xc_needf;
    
        //
        // Check correctness of interfaces
        //
        if( func==null )
            throw new alglib.exception("ALGLIB: error in 'autogkintegrate()' (func is null)");
        
        //
        // Main loop
        //
        for(;;)
        {
            //
            // Call iteration function.
            // Terminate iterations if it returned false.
            //
            error_code = _jni_autogkiteration(error_msg, mut_result, state.get_ptr(), lcl_params);
            if( error_code!=X_OK )
                handle_exception(error_code, error_msg.val, "autogkiteration");
            if( !mut_result.val )
                break;
            
            //
            // Reverse communication interface:
            // * fetch flags
            // * make delegate calls
            //
            xc_needf = _jni_autogkstate_get_needf(lcl_state);
            if( xc_needf )
            {
                xc_x       = _jni_autogkstate_get_x(lcl_state);
                xc_xminusa = _jni_autogkstate_get_xminusa(lcl_state);
                xc_bminusx = _jni_autogkstate_get_bminusx(lcl_state);
                double f = func.calc(xc_x, xc_xminusa, xc_bminusx, obj);
                _jni_autogkstate_set_f(lcl_state, f);
                continue;
            }
            throw new alglib.exception("ALGLIB: error in 'autogkintegrate' (some callbacks were not provided?)");
        }
    }

    public static class autogkresults_results
    {
        public double v;
        public autogkreport rep;
    }
    public static autogkresults_results autogkresults(autogkstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_v = new mut_double();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogkresults(error_msg, state.get_ptr(), lcl_v, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogkresults");
        autogkresults_results ret_tuple = new autogkresults_results();
        ret_tuple.v = lcl_v.val;
        ret_tuple.rep = (autogkreport)lcl_rep.val;
        return ret_tuple;
    }
    public static autogkresults_results autogkresults(autogkstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_v = new mut_double();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of autogkresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_autogkresults(error_msg, state.get_ptr(), lcl_v, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "autogkresults");
        autogkresults_results ret_tuple = new autogkresults_results();
        ret_tuple.v = lcl_v.val;
        ret_tuple.rep = (autogkreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_autogkresults(mut_string error_msg, long state, mut_double v, mut_object rep, long _xparams);

    
    
    //
    // Subpackage normaldistr
    //
    
    public static double errorfunction(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_errorfunction(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "errorfunction");
        return lcl_result.val;
    }
    public static double errorfunction(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_errorfunction(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "errorfunction");
        return lcl_result.val;
    }
    private static native int _jni_errorfunction(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double errorfunctionc(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_errorfunctionc(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "errorfunctionc");
        return lcl_result.val;
    }
    public static double errorfunctionc(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_errorfunctionc(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "errorfunctionc");
        return lcl_result.val;
    }
    private static native int _jni_errorfunctionc(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double normaldistribution(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normaldistribution(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normaldistribution");
        return lcl_result.val;
    }
    public static double normaldistribution(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normaldistribution(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normaldistribution");
        return lcl_result.val;
    }
    private static native int _jni_normaldistribution(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double normalpdf(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normalpdf(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normalpdf");
        return lcl_result.val;
    }
    public static double normalpdf(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normalpdf(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normalpdf");
        return lcl_result.val;
    }
    private static native int _jni_normalpdf(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double normalcdf(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normalcdf(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normalcdf");
        return lcl_result.val;
    }
    public static double normalcdf(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_normalcdf(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "normalcdf");
        return lcl_result.val;
    }
    private static native int _jni_normalcdf(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double inverf(double e, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_inverf(error_msg, lcl_result, e, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "inverf");
        return lcl_result.val;
    }
    public static double inverf(double e) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_inverf(error_msg, lcl_result, e, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "inverf");
        return lcl_result.val;
    }
    private static native int _jni_inverf(mut_string error_msg, mut_double result, double e, long _xparams);

    public static double invnormaldistribution(double y0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invnormaldistribution(error_msg, lcl_result, y0, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invnormaldistribution");
        return lcl_result.val;
    }
    public static double invnormaldistribution(double y0) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invnormaldistribution(error_msg, lcl_result, y0, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invnormaldistribution");
        return lcl_result.val;
    }
    private static native int _jni_invnormaldistribution(mut_string error_msg, mut_double result, double y0, long _xparams);

    public static double invnormalcdf(double y0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invnormalcdf(error_msg, lcl_result, y0, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invnormalcdf");
        return lcl_result.val;
    }
    public static double invnormalcdf(double y0) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invnormalcdf(error_msg, lcl_result, y0, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invnormalcdf");
        return lcl_result.val;
    }
    private static native int _jni_invnormalcdf(mut_string error_msg, mut_double result, double y0, long _xparams);

    public static double bivariatenormalpdf(double x, double y, double rho, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_bivariatenormalpdf(error_msg, lcl_result, x, y, rho, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "bivariatenormalpdf");
        return lcl_result.val;
    }
    public static double bivariatenormalpdf(double x, double y, double rho) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_bivariatenormalpdf(error_msg, lcl_result, x, y, rho, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "bivariatenormalpdf");
        return lcl_result.val;
    }
    private static native int _jni_bivariatenormalpdf(mut_string error_msg, mut_double result, double x, double y, double rho, long _xparams);

    public static double bivariatenormalcdf(double x, double y, double rho, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_bivariatenormalcdf(error_msg, lcl_result, x, y, rho, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "bivariatenormalcdf");
        return lcl_result.val;
    }
    public static double bivariatenormalcdf(double x, double y, double rho) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_bivariatenormalcdf(error_msg, lcl_result, x, y, rho, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "bivariatenormalcdf");
        return lcl_result.val;
    }
    private static native int _jni_bivariatenormalcdf(mut_string error_msg, mut_double result, double x, double y, double rho, long _xparams);

    
    
    //
    // Subpackage ibetaf
    //
    
    public static double incompletebeta(double a, double b, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompletebeta(error_msg, lcl_result, a, b, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompletebeta");
        return lcl_result.val;
    }
    public static double incompletebeta(double a, double b, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompletebeta(error_msg, lcl_result, a, b, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompletebeta");
        return lcl_result.val;
    }
    private static native int _jni_incompletebeta(mut_string error_msg, mut_double result, double a, double b, double x, long _xparams);

    public static double invincompletebeta(double a, double b, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invincompletebeta(error_msg, lcl_result, a, b, y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invincompletebeta");
        return lcl_result.val;
    }
    public static double invincompletebeta(double a, double b, double y) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invincompletebeta(error_msg, lcl_result, a, b, y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invincompletebeta");
        return lcl_result.val;
    }
    private static native int _jni_invincompletebeta(mut_string error_msg, mut_double result, double a, double b, double y, long _xparams);

    
    
    //
    // Subpackage studenttdistr
    //
    
    public static double studenttdistribution(int k, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_studenttdistribution(error_msg, lcl_result, k, t, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "studenttdistribution");
        return lcl_result.val;
    }
    public static double studenttdistribution(int k, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_studenttdistribution(error_msg, lcl_result, k, t, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "studenttdistribution");
        return lcl_result.val;
    }
    private static native int _jni_studenttdistribution(mut_string error_msg, mut_double result, int k, double t, long _xparams);

    public static double invstudenttdistribution(int k, double p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invstudenttdistribution(error_msg, lcl_result, k, p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invstudenttdistribution");
        return lcl_result.val;
    }
    public static double invstudenttdistribution(int k, double p) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invstudenttdistribution(error_msg, lcl_result, k, p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invstudenttdistribution");
        return lcl_result.val;
    }
    private static native int _jni_invstudenttdistribution(mut_string error_msg, mut_double result, int k, double p, long _xparams);

    
    
    //
    // Subpackage basestat
    //
    
    public static class samplemoments_results
    {
        public double mean;
        public double variance;
        public double skewness;
        public double kurtosis;
    }
    public static samplemoments_results samplemoments(double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_mean = new mut_double();
        mut_double lcl_variance = new mut_double();
        mut_double lcl_skewness = new mut_double();
        mut_double lcl_kurtosis = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplemoments(error_msg, x, n, lcl_mean, lcl_variance, lcl_skewness, lcl_kurtosis, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplemoments");
        samplemoments_results ret_tuple = new samplemoments_results();
        ret_tuple.mean = lcl_mean.val;
        ret_tuple.variance = lcl_variance.val;
        ret_tuple.skewness = lcl_skewness.val;
        ret_tuple.kurtosis = lcl_kurtosis.val;
        return ret_tuple;
    }
    public static samplemoments_results samplemoments(double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_mean = new mut_double();
        mut_double lcl_variance = new mut_double();
        mut_double lcl_skewness = new mut_double();
        mut_double lcl_kurtosis = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplemoments(error_msg, x, n, lcl_mean, lcl_variance, lcl_skewness, lcl_kurtosis, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplemoments");
        samplemoments_results ret_tuple = new samplemoments_results();
        ret_tuple.mean = lcl_mean.val;
        ret_tuple.variance = lcl_variance.val;
        ret_tuple.skewness = lcl_skewness.val;
        ret_tuple.kurtosis = lcl_kurtosis.val;
        return ret_tuple;
    }
            
    public static samplemoments_results samplemoments(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return samplemoments(x, n, _params);
    
    }
    
    public static samplemoments_results samplemoments(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return samplemoments(x, n, _params);
    
    }
    private static native int _jni_samplemoments(mut_string error_msg, double[] x, int n, mut_double mean, mut_double variance, mut_double skewness, mut_double kurtosis, long _xparams);

    public static double samplemean(double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplemean(error_msg, lcl_result, x, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplemean");
        return lcl_result.val;
    }
    public static double samplemean(double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplemean(error_msg, lcl_result, x, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplemean");
        return lcl_result.val;
    }
            
    public static double samplemean(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return samplemean(x, n, _params);
    
    }
    
    public static double samplemean(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return samplemean(x, n, _params);
    
    }
    private static native int _jni_samplemean(mut_string error_msg, mut_double result, double[] x, int n, long _xparams);

    public static double samplevariance(double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplevariance(error_msg, lcl_result, x, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplevariance");
        return lcl_result.val;
    }
    public static double samplevariance(double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplevariance(error_msg, lcl_result, x, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplevariance");
        return lcl_result.val;
    }
            
    public static double samplevariance(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return samplevariance(x, n, _params);
    
    }
    
    public static double samplevariance(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return samplevariance(x, n, _params);
    
    }
    private static native int _jni_samplevariance(mut_string error_msg, mut_double result, double[] x, int n, long _xparams);

    public static double sampleskewness(double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sampleskewness(error_msg, lcl_result, x, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sampleskewness");
        return lcl_result.val;
    }
    public static double sampleskewness(double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sampleskewness(error_msg, lcl_result, x, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sampleskewness");
        return lcl_result.val;
    }
            
    public static double sampleskewness(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return sampleskewness(x, n, _params);
    
    }
    
    public static double sampleskewness(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return sampleskewness(x, n, _params);
    
    }
    private static native int _jni_sampleskewness(mut_string error_msg, mut_double result, double[] x, int n, long _xparams);

    public static double samplekurtosis(double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplekurtosis(error_msg, lcl_result, x, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplekurtosis");
        return lcl_result.val;
    }
    public static double samplekurtosis(double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplekurtosis(error_msg, lcl_result, x, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplekurtosis");
        return lcl_result.val;
    }
            
    public static double samplekurtosis(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return samplekurtosis(x, n, _params);
    
    }
    
    public static double samplekurtosis(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return samplekurtosis(x, n, _params);
    
    }
    private static native int _jni_samplekurtosis(mut_string error_msg, mut_double result, double[] x, int n, long _xparams);

    public static double sampleadev(double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_adev = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sampleadev(error_msg, x, n, lcl_adev, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sampleadev");
        return lcl_adev.val;
    }
    public static double sampleadev(double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_adev = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sampleadev(error_msg, x, n, lcl_adev, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sampleadev");
        return lcl_adev.val;
    }
            
    public static double sampleadev(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return sampleadev(x, n, _params);
    
    }
    
    public static double sampleadev(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return sampleadev(x, n, _params);
    
    }
    private static native int _jni_sampleadev(mut_string error_msg, double[] x, int n, mut_double adev, long _xparams);

    public static double samplemedian(double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_median = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplemedian(error_msg, x, n, lcl_median, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplemedian");
        return lcl_median.val;
    }
    public static double samplemedian(double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_median = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplemedian(error_msg, x, n, lcl_median, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplemedian");
        return lcl_median.val;
    }
            
    public static double samplemedian(double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return samplemedian(x, n, _params);
    
    }
    
    public static double samplemedian(double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return samplemedian(x, n, _params);
    
    }
    private static native int _jni_samplemedian(mut_string error_msg, double[] x, int n, mut_double median, long _xparams);

    public static double samplepercentile(double[] x, int n, double p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_v = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplepercentile(error_msg, x, n, p, lcl_v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplepercentile");
        return lcl_v.val;
    }
    public static double samplepercentile(double[] x, int n, double p) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_v = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_samplepercentile(error_msg, x, n, p, lcl_v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "samplepercentile");
        return lcl_v.val;
    }
            
    public static double samplepercentile(double[] x, double p, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        return samplepercentile(x, n, p, _params);
    
    }
    
    public static double samplepercentile(double[] x, double p) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        return samplepercentile(x, n, p, _params);
    
    }
    private static native int _jni_samplepercentile(mut_string error_msg, double[] x, int n, double p, mut_double v, long _xparams);

    public static double cov2(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cov2(error_msg, lcl_result, x, y, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cov2");
        return lcl_result.val;
    }
    public static double cov2(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_cov2(error_msg, lcl_result, x, y, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "cov2");
        return lcl_result.val;
    }
            
    public static double cov2(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling cov2(): looks like one of arguments has wrong size");
        n = x.length;
        return cov2(x, y, n, _params);
    
    }
    
    public static double cov2(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling cov2(): looks like one of arguments has wrong size");
        n = x.length;
        return cov2(x, y, n, _params);
    
    }
    private static native int _jni_cov2(mut_string error_msg, mut_double result, double[] x, double[] y, int n, long _xparams);

    public static double pearsoncorr2(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorr2(error_msg, lcl_result, x, y, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorr2");
        return lcl_result.val;
    }
    public static double pearsoncorr2(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorr2(error_msg, lcl_result, x, y, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorr2");
        return lcl_result.val;
    }
            
    public static double pearsoncorr2(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling pearsoncorr2(): looks like one of arguments has wrong size");
        n = x.length;
        return pearsoncorr2(x, y, n, _params);
    
    }
    
    public static double pearsoncorr2(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling pearsoncorr2(): looks like one of arguments has wrong size");
        n = x.length;
        return pearsoncorr2(x, y, n, _params);
    
    }
    private static native int _jni_pearsoncorr2(mut_string error_msg, mut_double result, double[] x, double[] y, int n, long _xparams);

    public static double spearmancorr2(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmancorr2(error_msg, lcl_result, x, y, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmancorr2");
        return lcl_result.val;
    }
    public static double spearmancorr2(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmancorr2(error_msg, lcl_result, x, y, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmancorr2");
        return lcl_result.val;
    }
            
    public static double spearmancorr2(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spearmancorr2(): looks like one of arguments has wrong size");
        n = x.length;
        return spearmancorr2(x, y, n, _params);
    
    }
    
    public static double spearmancorr2(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spearmancorr2(): looks like one of arguments has wrong size");
        n = x.length;
        return spearmancorr2(x, y, n, _params);
    
    }
    private static native int _jni_spearmancorr2(mut_string error_msg, mut_double result, double[] x, double[] y, int n, long _xparams);

    public static double[][] covm(double[][] x, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_covm(error_msg, x, n, m, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "covm");
        return lcl_c.val;
    }
    public static double[][] covm(double[][] x, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_covm(error_msg, x, n, m, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "covm");
        return lcl_c.val;
    }
            
    public static double[][] covm(double[][] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
    
        n = ap.rows(x);
        m = ap.cols(x);
        return covm(x, n, m, _params);
    
    }
    
    public static double[][] covm(double[][] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
    
        n = ap.rows(x);
        m = ap.cols(x);
        return covm(x, n, m, _params);
    
    }
    private static native int _jni_covm(mut_string error_msg, double[][] x, int n, int m, rlc_double2d c, long _xparams);

    public static double[][] pearsoncorrm(double[][] x, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorrm(error_msg, x, n, m, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorrm");
        return lcl_c.val;
    }
    public static double[][] pearsoncorrm(double[][] x, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorrm(error_msg, x, n, m, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorrm");
        return lcl_c.val;
    }
            
    public static double[][] pearsoncorrm(double[][] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
    
        n = ap.rows(x);
        m = ap.cols(x);
        return pearsoncorrm(x, n, m, _params);
    
    }
    
    public static double[][] pearsoncorrm(double[][] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
    
        n = ap.rows(x);
        m = ap.cols(x);
        return pearsoncorrm(x, n, m, _params);
    
    }
    private static native int _jni_pearsoncorrm(mut_string error_msg, double[][] x, int n, int m, rlc_double2d c, long _xparams);

    public static double[][] spearmancorrm(double[][] x, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmancorrm(error_msg, x, n, m, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmancorrm");
        return lcl_c.val;
    }
    public static double[][] spearmancorrm(double[][] x, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmancorrm(error_msg, x, n, m, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmancorrm");
        return lcl_c.val;
    }
            
    public static double[][] spearmancorrm(double[][] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
    
        n = ap.rows(x);
        m = ap.cols(x);
        return spearmancorrm(x, n, m, _params);
    
    }
    
    public static double[][] spearmancorrm(double[][] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
    
        n = ap.rows(x);
        m = ap.cols(x);
        return spearmancorrm(x, n, m, _params);
    
    }
    private static native int _jni_spearmancorrm(mut_string error_msg, double[][] x, int n, int m, rlc_double2d c, long _xparams);

    public static double[][] covm2(double[][] x, double[][] y, int n, int m1, int m2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_covm2(error_msg, x, y, n, m1, m2, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "covm2");
        return lcl_c.val;
    }
    public static double[][] covm2(double[][] x, double[][] y, int n, int m1, int m2) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_covm2(error_msg, x, y, n, m1, m2, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "covm2");
        return lcl_c.val;
    }
            
    public static double[][] covm2(double[][] x, double[][] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m1;
        int m2;
        if( (ap.rows(x)!=ap.rows(y)))
            throw new exception("Error while calling covm2(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m1 = ap.cols(x);
        m2 = ap.cols(y);
        return covm2(x, y, n, m1, m2, _params);
    
    }
    
    public static double[][] covm2(double[][] x, double[][] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m1;
        int m2;
        if( (ap.rows(x)!=ap.rows(y)))
            throw new exception("Error while calling covm2(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m1 = ap.cols(x);
        m2 = ap.cols(y);
        return covm2(x, y, n, m1, m2, _params);
    
    }
    private static native int _jni_covm2(mut_string error_msg, double[][] x, double[][] y, int n, int m1, int m2, rlc_double2d c, long _xparams);

    public static double[][] pearsoncorrm2(double[][] x, double[][] y, int n, int m1, int m2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorrm2(error_msg, x, y, n, m1, m2, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorrm2");
        return lcl_c.val;
    }
    public static double[][] pearsoncorrm2(double[][] x, double[][] y, int n, int m1, int m2) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorrm2(error_msg, x, y, n, m1, m2, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorrm2");
        return lcl_c.val;
    }
            
    public static double[][] pearsoncorrm2(double[][] x, double[][] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m1;
        int m2;
        if( (ap.rows(x)!=ap.rows(y)))
            throw new exception("Error while calling pearsoncorrm2(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m1 = ap.cols(x);
        m2 = ap.cols(y);
        return pearsoncorrm2(x, y, n, m1, m2, _params);
    
    }
    
    public static double[][] pearsoncorrm2(double[][] x, double[][] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m1;
        int m2;
        if( (ap.rows(x)!=ap.rows(y)))
            throw new exception("Error while calling pearsoncorrm2(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m1 = ap.cols(x);
        m2 = ap.cols(y);
        return pearsoncorrm2(x, y, n, m1, m2, _params);
    
    }
    private static native int _jni_pearsoncorrm2(mut_string error_msg, double[][] x, double[][] y, int n, int m1, int m2, rlc_double2d c, long _xparams);

    public static double[][] spearmancorrm2(double[][] x, double[][] y, int n, int m1, int m2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmancorrm2(error_msg, x, y, n, m1, m2, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmancorrm2");
        return lcl_c.val;
    }
    public static double[][] spearmancorrm2(double[][] x, double[][] y, int n, int m1, int m2) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_c = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmancorrm2(error_msg, x, y, n, m1, m2, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmancorrm2");
        return lcl_c.val;
    }
            
    public static double[][] spearmancorrm2(double[][] x, double[][] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m1;
        int m2;
        if( (ap.rows(x)!=ap.rows(y)))
            throw new exception("Error while calling spearmancorrm2(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m1 = ap.cols(x);
        m2 = ap.cols(y);
        return spearmancorrm2(x, y, n, m1, m2, _params);
    
    }
    
    public static double[][] spearmancorrm2(double[][] x, double[][] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m1;
        int m2;
        if( (ap.rows(x)!=ap.rows(y)))
            throw new exception("Error while calling spearmancorrm2(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m1 = ap.cols(x);
        m2 = ap.cols(y);
        return spearmancorrm2(x, y, n, m1, m2, _params);
    
    }
    private static native int _jni_spearmancorrm2(mut_string error_msg, double[][] x, double[][] y, int n, int m1, int m2, rlc_double2d c, long _xparams);

    public static void rankdata(double[][] xy, int npoints, int nfeatures, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rankdata(error_msg, xy, npoints, nfeatures, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rankdata");
    }
    public static void rankdata(double[][] xy, int npoints, int nfeatures) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rankdata(error_msg, xy, npoints, nfeatures, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rankdata");
    }
            
    public static void rankdata(double[][] xy, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nfeatures;
    
        npoints = ap.rows(xy);
        nfeatures = ap.cols(xy);
        rankdata(xy, npoints, nfeatures, _params);
    
    }
    
    public static void rankdata(double[][] xy) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nfeatures;
    
        npoints = ap.rows(xy);
        nfeatures = ap.cols(xy);
        rankdata(xy, npoints, nfeatures, _params);
    
    }
    private static native int _jni_rankdata(mut_string error_msg, double[][] xy, int npoints, int nfeatures, long _xparams);

    public static void rankdatacentered(double[][] xy, int npoints, int nfeatures, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rankdatacentered(error_msg, xy, npoints, nfeatures, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rankdatacentered");
    }
    public static void rankdatacentered(double[][] xy, int npoints, int nfeatures) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rankdatacentered(error_msg, xy, npoints, nfeatures, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rankdatacentered");
    }
            
    public static void rankdatacentered(double[][] xy, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nfeatures;
    
        npoints = ap.rows(xy);
        nfeatures = ap.cols(xy);
        rankdatacentered(xy, npoints, nfeatures, _params);
    
    }
    
    public static void rankdatacentered(double[][] xy) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nfeatures;
    
        npoints = ap.rows(xy);
        nfeatures = ap.cols(xy);
        rankdatacentered(xy, npoints, nfeatures, _params);
    
    }
    private static native int _jni_rankdatacentered(mut_string error_msg, double[][] xy, int npoints, int nfeatures, long _xparams);

    public static double pearsoncorrelation(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorrelation(error_msg, lcl_result, x, y, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorrelation");
        return lcl_result.val;
    }
    public static double pearsoncorrelation(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorrelation(error_msg, lcl_result, x, y, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorrelation");
        return lcl_result.val;
    }
    private static native int _jni_pearsoncorrelation(mut_string error_msg, mut_double result, double[] x, double[] y, int n, long _xparams);

    public static double spearmanrankcorrelation(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmanrankcorrelation(error_msg, lcl_result, x, y, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmanrankcorrelation");
        return lcl_result.val;
    }
    public static double spearmanrankcorrelation(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmanrankcorrelation(error_msg, lcl_result, x, y, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmanrankcorrelation");
        return lcl_result.val;
    }
    private static native int _jni_spearmanrankcorrelation(mut_string error_msg, mut_double result, double[] x, double[] y, int n, long _xparams);

    
    
    //
    // Subpackage correlationtests
    //
    
    public static class pearsoncorrelationsignificance_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static pearsoncorrelationsignificance_results pearsoncorrelationsignificance(double r, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorrelationsignificance(error_msg, r, n, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorrelationsignificance");
        pearsoncorrelationsignificance_results ret_tuple = new pearsoncorrelationsignificance_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static pearsoncorrelationsignificance_results pearsoncorrelationsignificance(double r, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pearsoncorrelationsignificance(error_msg, r, n, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pearsoncorrelationsignificance");
        pearsoncorrelationsignificance_results ret_tuple = new pearsoncorrelationsignificance_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_pearsoncorrelationsignificance(mut_string error_msg, double r, int n, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    public static class spearmanrankcorrelationsignificance_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static spearmanrankcorrelationsignificance_results spearmanrankcorrelationsignificance(double r, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmanrankcorrelationsignificance(error_msg, r, n, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmanrankcorrelationsignificance");
        spearmanrankcorrelationsignificance_results ret_tuple = new spearmanrankcorrelationsignificance_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static spearmanrankcorrelationsignificance_results spearmanrankcorrelationsignificance(double r, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spearmanrankcorrelationsignificance(error_msg, r, n, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spearmanrankcorrelationsignificance");
        spearmanrankcorrelationsignificance_results ret_tuple = new spearmanrankcorrelationsignificance_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_spearmanrankcorrelationsignificance(mut_string error_msg, double r, int n, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    
    
    //
    // Subpackage jarquebera
    //
    
    public static double jarqueberatest(double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_p = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_jarqueberatest(error_msg, x, n, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "jarqueberatest");
        return lcl_p.val;
    }
    public static double jarqueberatest(double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_p = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_jarqueberatest(error_msg, x, n, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "jarqueberatest");
        return lcl_p.val;
    }
    private static native int _jni_jarqueberatest(mut_string error_msg, double[] x, int n, mut_double p, long _xparams);

    
    
    //
    // Subpackage fdistr
    //
    
    public static double fdistribution(int a, int b, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fdistribution(error_msg, lcl_result, a, b, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fdistribution");
        return lcl_result.val;
    }
    public static double fdistribution(int a, int b, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fdistribution(error_msg, lcl_result, a, b, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fdistribution");
        return lcl_result.val;
    }
    private static native int _jni_fdistribution(mut_string error_msg, mut_double result, int a, int b, double x, long _xparams);

    public static double fcdistribution(int a, int b, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fcdistribution(error_msg, lcl_result, a, b, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fcdistribution");
        return lcl_result.val;
    }
    public static double fcdistribution(int a, int b, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fcdistribution(error_msg, lcl_result, a, b, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fcdistribution");
        return lcl_result.val;
    }
    private static native int _jni_fcdistribution(mut_string error_msg, mut_double result, int a, int b, double x, long _xparams);

    public static double invfdistribution(int a, int b, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invfdistribution(error_msg, lcl_result, a, b, y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invfdistribution");
        return lcl_result.val;
    }
    public static double invfdistribution(int a, int b, double y) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invfdistribution(error_msg, lcl_result, a, b, y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invfdistribution");
        return lcl_result.val;
    }
    private static native int _jni_invfdistribution(mut_string error_msg, mut_double result, int a, int b, double y, long _xparams);

    
    
    //
    // Subpackage igammaf
    //
    
    public static double incompletegamma(double a, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompletegamma(error_msg, lcl_result, a, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompletegamma");
        return lcl_result.val;
    }
    public static double incompletegamma(double a, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompletegamma(error_msg, lcl_result, a, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompletegamma");
        return lcl_result.val;
    }
    private static native int _jni_incompletegamma(mut_string error_msg, mut_double result, double a, double x, long _xparams);

    public static double incompletegammac(double a, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompletegammac(error_msg, lcl_result, a, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompletegammac");
        return lcl_result.val;
    }
    public static double incompletegammac(double a, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompletegammac(error_msg, lcl_result, a, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompletegammac");
        return lcl_result.val;
    }
    private static native int _jni_incompletegammac(mut_string error_msg, mut_double result, double a, double x, long _xparams);

    public static double invincompletegammac(double a, double y0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invincompletegammac(error_msg, lcl_result, a, y0, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invincompletegammac");
        return lcl_result.val;
    }
    public static double invincompletegammac(double a, double y0) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invincompletegammac(error_msg, lcl_result, a, y0, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invincompletegammac");
        return lcl_result.val;
    }
    private static native int _jni_invincompletegammac(mut_string error_msg, mut_double result, double a, double y0, long _xparams);

    
    
    //
    // Subpackage chisquaredistr
    //
    
    public static double chisquaredistribution(double v, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chisquaredistribution(error_msg, lcl_result, v, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chisquaredistribution");
        return lcl_result.val;
    }
    public static double chisquaredistribution(double v, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chisquaredistribution(error_msg, lcl_result, v, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chisquaredistribution");
        return lcl_result.val;
    }
    private static native int _jni_chisquaredistribution(mut_string error_msg, mut_double result, double v, double x, long _xparams);

    public static double chisquarecdistribution(double v, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chisquarecdistribution(error_msg, lcl_result, v, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chisquarecdistribution");
        return lcl_result.val;
    }
    public static double chisquarecdistribution(double v, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chisquarecdistribution(error_msg, lcl_result, v, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chisquarecdistribution");
        return lcl_result.val;
    }
    private static native int _jni_chisquarecdistribution(mut_string error_msg, mut_double result, double v, double x, long _xparams);

    public static double invchisquaredistribution(double v, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invchisquaredistribution(error_msg, lcl_result, v, y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invchisquaredistribution");
        return lcl_result.val;
    }
    public static double invchisquaredistribution(double v, double y) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invchisquaredistribution(error_msg, lcl_result, v, y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invchisquaredistribution");
        return lcl_result.val;
    }
    private static native int _jni_invchisquaredistribution(mut_string error_msg, mut_double result, double v, double y, long _xparams);

    
    
    //
    // Subpackage variancetests
    //
    
    public static class ftest_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static ftest_results ftest(double[] x, int n, double[] y, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ftest(error_msg, x, n, y, m, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ftest");
        ftest_results ret_tuple = new ftest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static ftest_results ftest(double[] x, int n, double[] y, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ftest(error_msg, x, n, y, m, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ftest");
        ftest_results ret_tuple = new ftest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_ftest(mut_string error_msg, double[] x, int n, double[] y, int m, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    public static class onesamplevariancetest_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static onesamplevariancetest_results onesamplevariancetest(double[] x, int n, double variance, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_onesamplevariancetest(error_msg, x, n, variance, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "onesamplevariancetest");
        onesamplevariancetest_results ret_tuple = new onesamplevariancetest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static onesamplevariancetest_results onesamplevariancetest(double[] x, int n, double variance) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_onesamplevariancetest(error_msg, x, n, variance, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "onesamplevariancetest");
        onesamplevariancetest_results ret_tuple = new onesamplevariancetest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_onesamplevariancetest(mut_string error_msg, double[] x, int n, double variance, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    
    
    //
    // Subpackage wsr
    //
    
    public static class wilcoxonsignedranktest_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static wilcoxonsignedranktest_results wilcoxonsignedranktest(double[] x, int n, double e, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_wilcoxonsignedranktest(error_msg, x, n, e, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "wilcoxonsignedranktest");
        wilcoxonsignedranktest_results ret_tuple = new wilcoxonsignedranktest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static wilcoxonsignedranktest_results wilcoxonsignedranktest(double[] x, int n, double e) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_wilcoxonsignedranktest(error_msg, x, n, e, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "wilcoxonsignedranktest");
        wilcoxonsignedranktest_results ret_tuple = new wilcoxonsignedranktest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_wilcoxonsignedranktest(mut_string error_msg, double[] x, int n, double e, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    
    
    //
    // Subpackage mannwhitneyu
    //
    
    public static class mannwhitneyutest_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static mannwhitneyutest_results mannwhitneyutest(double[] x, int n, double[] y, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mannwhitneyutest(error_msg, x, n, y, m, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mannwhitneyutest");
        mannwhitneyutest_results ret_tuple = new mannwhitneyutest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static mannwhitneyutest_results mannwhitneyutest(double[] x, int n, double[] y, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mannwhitneyutest(error_msg, x, n, y, m, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mannwhitneyutest");
        mannwhitneyutest_results ret_tuple = new mannwhitneyutest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_mannwhitneyutest(mut_string error_msg, double[] x, int n, double[] y, int m, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    
    
    //
    // Subpackage binomialdistr
    //
    
    public static double binomialdistribution(int k, int n, double p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_binomialdistribution(error_msg, lcl_result, k, n, p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "binomialdistribution");
        return lcl_result.val;
    }
    public static double binomialdistribution(int k, int n, double p) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_binomialdistribution(error_msg, lcl_result, k, n, p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "binomialdistribution");
        return lcl_result.val;
    }
    private static native int _jni_binomialdistribution(mut_string error_msg, mut_double result, int k, int n, double p, long _xparams);

    public static double binomialcdistribution(int k, int n, double p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_binomialcdistribution(error_msg, lcl_result, k, n, p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "binomialcdistribution");
        return lcl_result.val;
    }
    public static double binomialcdistribution(int k, int n, double p) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_binomialcdistribution(error_msg, lcl_result, k, n, p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "binomialcdistribution");
        return lcl_result.val;
    }
    private static native int _jni_binomialcdistribution(mut_string error_msg, mut_double result, int k, int n, double p, long _xparams);

    public static double invbinomialdistribution(int k, int n, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invbinomialdistribution(error_msg, lcl_result, k, n, y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invbinomialdistribution");
        return lcl_result.val;
    }
    public static double invbinomialdistribution(int k, int n, double y) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invbinomialdistribution(error_msg, lcl_result, k, n, y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invbinomialdistribution");
        return lcl_result.val;
    }
    private static native int _jni_invbinomialdistribution(mut_string error_msg, mut_double result, int k, int n, double y, long _xparams);

    
    
    //
    // Subpackage stest
    //
    
    public static class onesamplesigntest_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static onesamplesigntest_results onesamplesigntest(double[] x, int n, double median, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_onesamplesigntest(error_msg, x, n, median, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "onesamplesigntest");
        onesamplesigntest_results ret_tuple = new onesamplesigntest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static onesamplesigntest_results onesamplesigntest(double[] x, int n, double median) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_onesamplesigntest(error_msg, x, n, median, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "onesamplesigntest");
        onesamplesigntest_results ret_tuple = new onesamplesigntest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_onesamplesigntest(mut_string error_msg, double[] x, int n, double median, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    
    
    //
    // Subpackage studentttests
    //
    
    public static class studentttest1_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static studentttest1_results studentttest1(double[] x, int n, double mean, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_studentttest1(error_msg, x, n, mean, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "studentttest1");
        studentttest1_results ret_tuple = new studentttest1_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static studentttest1_results studentttest1(double[] x, int n, double mean) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_studentttest1(error_msg, x, n, mean, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "studentttest1");
        studentttest1_results ret_tuple = new studentttest1_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_studentttest1(mut_string error_msg, double[] x, int n, double mean, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    public static class studentttest2_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static studentttest2_results studentttest2(double[] x, int n, double[] y, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_studentttest2(error_msg, x, n, y, m, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "studentttest2");
        studentttest2_results ret_tuple = new studentttest2_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static studentttest2_results studentttest2(double[] x, int n, double[] y, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_studentttest2(error_msg, x, n, y, m, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "studentttest2");
        studentttest2_results ret_tuple = new studentttest2_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_studentttest2(mut_string error_msg, double[] x, int n, double[] y, int m, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    public static class unequalvariancettest_results
    {
        public double bothtails;
        public double lefttail;
        public double righttail;
    }
    public static unequalvariancettest_results unequalvariancettest(double[] x, int n, double[] y, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_unequalvariancettest(error_msg, x, n, y, m, lcl_bothtails, lcl_lefttail, lcl_righttail, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "unequalvariancettest");
        unequalvariancettest_results ret_tuple = new unequalvariancettest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    public static unequalvariancettest_results unequalvariancettest(double[] x, int n, double[] y, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_bothtails = new mut_double();
        mut_double lcl_lefttail = new mut_double();
        mut_double lcl_righttail = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_unequalvariancettest(error_msg, x, n, y, m, lcl_bothtails, lcl_lefttail, lcl_righttail, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "unequalvariancettest");
        unequalvariancettest_results ret_tuple = new unequalvariancettest_results();
        ret_tuple.bothtails = lcl_bothtails.val;
        ret_tuple.lefttail = lcl_lefttail.val;
        ret_tuple.righttail = lcl_righttail.val;
        return ret_tuple;
    }
    private static native int _jni_unequalvariancettest(mut_string error_msg, double[] x, int n, double[] y, int m, mut_double bothtails, mut_double lefttail, mut_double righttail, long _xparams);

    
    
    //
    // Subpackage ratint
    //
    

    public static class barycentricinterpolant extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected barycentricinterpolant()
        {
            _ptr = 0;
            own  = false;
        }
        protected barycentricinterpolant(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected barycentricinterpolant(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new barycentricinterpolant(0);
            return new barycentricinterpolant(_jni_x_obj_copy_barycentricinterpolant(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_barycentricinterpolant(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_barycentricinterpolant(long x);
    private static native void _jni_x_obj_free_barycentricinterpolant(long x);

    public static double barycentriccalc(barycentricinterpolant b, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriccalc() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriccalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentriccalc(error_msg, lcl_result, b.get_ptr(), t, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentriccalc");
        return lcl_result.val;
    }
    public static double barycentriccalc(barycentricinterpolant b, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriccalc() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriccalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentriccalc(error_msg, lcl_result, b.get_ptr(), t, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentriccalc");
        return lcl_result.val;
    }
    private static native int _jni_barycentriccalc(mut_string error_msg, mut_double result, long b, double t, long _xparams);

    public static class barycentricdiff1_results
    {
        public double f;
        public double df;
    }
    public static barycentricdiff1_results barycentricdiff1(barycentricinterpolant b, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_df = new mut_double();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricdiff1() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricdiff1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricdiff1(error_msg, b.get_ptr(), t, lcl_f, lcl_df, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricdiff1");
        barycentricdiff1_results ret_tuple = new barycentricdiff1_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.df = lcl_df.val;
        return ret_tuple;
    }
    public static barycentricdiff1_results barycentricdiff1(barycentricinterpolant b, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_df = new mut_double();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricdiff1() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricdiff1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricdiff1(error_msg, b.get_ptr(), t, lcl_f, lcl_df, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricdiff1");
        barycentricdiff1_results ret_tuple = new barycentricdiff1_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.df = lcl_df.val;
        return ret_tuple;
    }
    private static native int _jni_barycentricdiff1(mut_string error_msg, long b, double t, mut_double f, mut_double df, long _xparams);

    public static class barycentricdiff2_results
    {
        public double f;
        public double df;
        public double d2f;
    }
    public static barycentricdiff2_results barycentricdiff2(barycentricinterpolant b, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_df = new mut_double();
        mut_double lcl_d2f = new mut_double();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricdiff2() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricdiff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricdiff2(error_msg, b.get_ptr(), t, lcl_f, lcl_df, lcl_d2f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricdiff2");
        barycentricdiff2_results ret_tuple = new barycentricdiff2_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.df = lcl_df.val;
        ret_tuple.d2f = lcl_d2f.val;
        return ret_tuple;
    }
    public static barycentricdiff2_results barycentricdiff2(barycentricinterpolant b, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_df = new mut_double();
        mut_double lcl_d2f = new mut_double();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricdiff2() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricdiff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricdiff2(error_msg, b.get_ptr(), t, lcl_f, lcl_df, lcl_d2f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricdiff2");
        barycentricdiff2_results ret_tuple = new barycentricdiff2_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.df = lcl_df.val;
        ret_tuple.d2f = lcl_d2f.val;
        return ret_tuple;
    }
    private static native int _jni_barycentricdiff2(mut_string error_msg, long b, double t, mut_double f, mut_double df, mut_double d2f, long _xparams);

    public static void barycentriclintransx(barycentricinterpolant b, double ca, double cb, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriclintransx() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriclintransx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentriclintransx(error_msg, b.get_ptr(), ca, cb, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentriclintransx");
    }
    public static void barycentriclintransx(barycentricinterpolant b, double ca, double cb) throws alglib.exception
    {
        activatealglibcore();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriclintransx() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriclintransx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentriclintransx(error_msg, b.get_ptr(), ca, cb, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentriclintransx");
    }
    private static native int _jni_barycentriclintransx(mut_string error_msg, long b, double ca, double cb, long _xparams);

    public static void barycentriclintransy(barycentricinterpolant b, double ca, double cb, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriclintransy() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriclintransy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentriclintransy(error_msg, b.get_ptr(), ca, cb, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentriclintransy");
    }
    public static void barycentriclintransy(barycentricinterpolant b, double ca, double cb) throws alglib.exception
    {
        activatealglibcore();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriclintransy() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentriclintransy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentriclintransy(error_msg, b.get_ptr(), ca, cb, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentriclintransy");
    }
    private static native int _jni_barycentriclintransy(mut_string error_msg, long b, double ca, double cb, long _xparams);

    public static class barycentricunpack_results
    {
        public int n;
        public double[] x;
        public double[] y;
        public double[] w;
    }
    public static barycentricunpack_results barycentricunpack(barycentricinterpolant b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_y = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricunpack() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricunpack(error_msg, b.get_ptr(), lcl_n, lcl_x, lcl_y, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricunpack");
        barycentricunpack_results ret_tuple = new barycentricunpack_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    public static barycentricunpack_results barycentricunpack(barycentricinterpolant b) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        rlc_double1d lcl_x = new rlc_double1d();
        rlc_double1d lcl_y = new rlc_double1d();
        rlc_double1d lcl_w = new rlc_double1d();
        if( b==null )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricunpack() is null");
        if( b.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'b' of barycentricunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricunpack(error_msg, b.get_ptr(), lcl_n, lcl_x, lcl_y, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricunpack");
        barycentricunpack_results ret_tuple = new barycentricunpack_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.w = lcl_w.val;
        return ret_tuple;
    }
    private static native int _jni_barycentricunpack(mut_string error_msg, long b, mut_int n, rlc_double1d x, rlc_double1d y, rlc_double1d w, long _xparams);

    public static barycentricinterpolant barycentricbuildxyw(double[] x, double[] y, double[] w, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricbuildxyw(error_msg, x, y, w, n, lcl_b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricbuildxyw");
        return new barycentricinterpolant(lcl_b.val);
    }
    public static barycentricinterpolant barycentricbuildxyw(double[] x, double[] y, double[] w, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricbuildxyw(error_msg, x, y, w, n, lcl_b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricbuildxyw");
        return new barycentricinterpolant(lcl_b.val);
    }
    private static native int _jni_barycentricbuildxyw(mut_string error_msg, double[] x, double[] y, double[] w, int n, mut_long b, long _xparams);

    public static barycentricinterpolant barycentricbuildfloaterhormann(double[] x, double[] y, int n, int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricbuildfloaterhormann(error_msg, x, y, n, d, lcl_b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricbuildfloaterhormann");
        return new barycentricinterpolant(lcl_b.val);
    }
    public static barycentricinterpolant barycentricbuildfloaterhormann(double[] x, double[] y, int n, int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricbuildfloaterhormann(error_msg, x, y, n, d, lcl_b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricbuildfloaterhormann");
        return new barycentricinterpolant(lcl_b.val);
    }
    private static native int _jni_barycentricbuildfloaterhormann(mut_string error_msg, double[] x, double[] y, int n, int d, mut_long b, long _xparams);

    
    
    //
    // Subpackage idw
    //
    

    public static class idwcalcbuffer extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected idwcalcbuffer()
        {
            _ptr = 0;
            own  = false;
        }
        protected idwcalcbuffer(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected idwcalcbuffer(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new idwcalcbuffer(0);
            return new idwcalcbuffer(_jni_x_obj_copy_idwcalcbuffer(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_idwcalcbuffer(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_idwcalcbuffer(long x);
    private static native void _jni_x_obj_free_idwcalcbuffer(long x);


    public static class idwmodel extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected idwmodel()
        {
            _ptr = 0;
            own  = false;
        }
        protected idwmodel(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected idwmodel(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new idwmodel(0);
            return new idwmodel(_jni_x_obj_copy_idwmodel(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_idwmodel(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_idwmodel(long x);
    private static native void _jni_x_obj_free_idwmodel(long x);


    public static class idwbuilder extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected idwbuilder()
        {
            _ptr = 0;
            own  = false;
        }
        protected idwbuilder(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected idwbuilder(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new idwbuilder(0);
            return new idwbuilder(_jni_x_obj_copy_idwbuilder(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_idwbuilder(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_idwbuilder(long x);
    private static native void _jni_x_obj_free_idwbuilder(long x);


        public static class idwreport extends alglibobject
        {
            public double rmserror;
            public double avgerror;
            public double maxerror;
            public double r2;
            public alglibobject make_copy()
            {
                idwreport dst = new idwreport();
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.maxerror = maxerror;
                dst.r2 = r2;
                return dst;
            }
        }

    private static native int _jni_idwserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String idwserialize(idwmodel obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of idwserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of idwserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_idwserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_idwunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static idwmodel idwunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_idwunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwunserialize");
        return new idwmodel(lcl_result.val);
    }

    public static idwcalcbuffer idwcreatecalcbuffer(idwmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcreatecalcbuffer() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcreatecalcbuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcreatecalcbuffer(error_msg, s.get_ptr(), lcl_buf, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcreatecalcbuffer");
        return new idwcalcbuffer(lcl_buf.val);
    }
    public static idwcalcbuffer idwcreatecalcbuffer(idwmodel s) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcreatecalcbuffer() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcreatecalcbuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcreatecalcbuffer(error_msg, s.get_ptr(), lcl_buf, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcreatecalcbuffer");
        return new idwcalcbuffer(lcl_buf.val);
    }
    private static native int _jni_idwcreatecalcbuffer(mut_string error_msg, long s, mut_long buf, long _xparams);

    public static idwbuilder idwbuildercreate(int nx, int ny, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildercreate(error_msg, nx, ny, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildercreate");
        return new idwbuilder(lcl_state.val);
    }
    public static idwbuilder idwbuildercreate(int nx, int ny) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildercreate(error_msg, nx, ny, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildercreate");
        return new idwbuilder(lcl_state.val);
    }
    private static native int _jni_idwbuildercreate(mut_string error_msg, int nx, int ny, mut_long state, long _xparams);

    public static void idwbuildersetnlayers(idwbuilder state, int nlayers, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetnlayers() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetnlayers() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetnlayers(error_msg, state.get_ptr(), nlayers, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetnlayers");
    }
    public static void idwbuildersetnlayers(idwbuilder state, int nlayers) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetnlayers() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetnlayers() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetnlayers(error_msg, state.get_ptr(), nlayers, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetnlayers");
    }
    private static native int _jni_idwbuildersetnlayers(mut_string error_msg, long state, int nlayers, long _xparams);

    public static void idwbuildersetpoints(idwbuilder state, double[][] xy, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetpoints() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetpoints() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetpoints(error_msg, state.get_ptr(), xy, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetpoints");
    }
    public static void idwbuildersetpoints(idwbuilder state, double[][] xy, int n) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetpoints() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetpoints() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetpoints(error_msg, state.get_ptr(), xy, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetpoints");
    }
            
    public static void idwbuildersetpoints(idwbuilder state, double[][] xy, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = ap.rows(xy);
        idwbuildersetpoints(state, xy, n, _params);
    
    }
    
    public static void idwbuildersetpoints(idwbuilder state, double[][] xy) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = ap.rows(xy);
        idwbuildersetpoints(state, xy, n, _params);
    
    }
    private static native int _jni_idwbuildersetpoints(mut_string error_msg, long state, double[][] xy, int n, long _xparams);

    public static void idwbuildersetalgomstab(idwbuilder state, double srad, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgomstab() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgomstab() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetalgomstab(error_msg, state.get_ptr(), srad, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetalgomstab");
    }
    public static void idwbuildersetalgomstab(idwbuilder state, double srad) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgomstab() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgomstab() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetalgomstab(error_msg, state.get_ptr(), srad, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetalgomstab");
    }
    private static native int _jni_idwbuildersetalgomstab(mut_string error_msg, long state, double srad, long _xparams);

    public static void idwbuildersetalgotextbookshepard(idwbuilder state, double p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgotextbookshepard() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgotextbookshepard() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetalgotextbookshepard(error_msg, state.get_ptr(), p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetalgotextbookshepard");
    }
    public static void idwbuildersetalgotextbookshepard(idwbuilder state, double p) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgotextbookshepard() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgotextbookshepard() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetalgotextbookshepard(error_msg, state.get_ptr(), p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetalgotextbookshepard");
    }
    private static native int _jni_idwbuildersetalgotextbookshepard(mut_string error_msg, long state, double p, long _xparams);

    public static void idwbuildersetalgotextbookmodshepard(idwbuilder state, double r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgotextbookmodshepard() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgotextbookmodshepard() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetalgotextbookmodshepard(error_msg, state.get_ptr(), r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetalgotextbookmodshepard");
    }
    public static void idwbuildersetalgotextbookmodshepard(idwbuilder state, double r) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgotextbookmodshepard() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetalgotextbookmodshepard() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetalgotextbookmodshepard(error_msg, state.get_ptr(), r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetalgotextbookmodshepard");
    }
    private static native int _jni_idwbuildersetalgotextbookmodshepard(mut_string error_msg, long state, double r, long _xparams);

    public static void idwbuildersetuserterm(idwbuilder state, double v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetuserterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetuserterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetuserterm(error_msg, state.get_ptr(), v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetuserterm");
    }
    public static void idwbuildersetuserterm(idwbuilder state, double v) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetuserterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetuserterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetuserterm(error_msg, state.get_ptr(), v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetuserterm");
    }
    private static native int _jni_idwbuildersetuserterm(mut_string error_msg, long state, double v, long _xparams);

    public static void idwbuildersetconstterm(idwbuilder state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetconstterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetconstterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetconstterm(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetconstterm");
    }
    public static void idwbuildersetconstterm(idwbuilder state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetconstterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetconstterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetconstterm(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetconstterm");
    }
    private static native int _jni_idwbuildersetconstterm(mut_string error_msg, long state, long _xparams);

    public static void idwbuildersetzeroterm(idwbuilder state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetzeroterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetzeroterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetzeroterm(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetzeroterm");
    }
    public static void idwbuildersetzeroterm(idwbuilder state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetzeroterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwbuildersetzeroterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwbuildersetzeroterm(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwbuildersetzeroterm");
    }
    private static native int _jni_idwbuildersetzeroterm(mut_string error_msg, long state, long _xparams);

    public static double idwcalc1(idwmodel s, double x0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc1() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalc1(error_msg, lcl_result, s.get_ptr(), x0, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalc1");
        return lcl_result.val;
    }
    public static double idwcalc1(idwmodel s, double x0) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc1() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalc1(error_msg, lcl_result, s.get_ptr(), x0, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalc1");
        return lcl_result.val;
    }
    private static native int _jni_idwcalc1(mut_string error_msg, mut_double result, long s, double x0, long _xparams);

    public static double idwcalc2(idwmodel s, double x0, double x1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalc2(error_msg, lcl_result, s.get_ptr(), x0, x1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalc2");
        return lcl_result.val;
    }
    public static double idwcalc2(idwmodel s, double x0, double x1) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalc2(error_msg, lcl_result, s.get_ptr(), x0, x1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalc2");
        return lcl_result.val;
    }
    private static native int _jni_idwcalc2(mut_string error_msg, mut_double result, long s, double x0, double x1, long _xparams);

    public static double idwcalc3(idwmodel s, double x0, double x1, double x2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc3() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc3() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalc3(error_msg, lcl_result, s.get_ptr(), x0, x1, x2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalc3");
        return lcl_result.val;
    }
    public static double idwcalc3(idwmodel s, double x0, double x1, double x2) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc3() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc3() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalc3(error_msg, lcl_result, s.get_ptr(), x0, x1, x2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalc3");
        return lcl_result.val;
    }
    private static native int _jni_idwcalc3(mut_string error_msg, mut_double result, long s, double x0, double x1, double x2, long _xparams);

    public static double[] idwcalc(idwmodel s, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalc(error_msg, s.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalc");
        return lcl_y.val;
    }
    public static double[] idwcalc(idwmodel s, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalc(error_msg, s.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalc");
        return lcl_y.val;
    }
    private static native int _jni_idwcalc(mut_string error_msg, long s, double[] x, rlc_double1d y, long _xparams);

    public static double[] idwcalcbuf(idwmodel s, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalcbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalcbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalcbuf(error_msg, s.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalcbuf");
        return lcl_y.val;
    }
    public static double[] idwcalcbuf(idwmodel s, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalcbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwcalcbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwcalcbuf(error_msg, s.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwcalcbuf");
        return lcl_y.val;
    }
    private static native int _jni_idwcalcbuf(mut_string error_msg, long s, double[] x, rlc_double1d y, long _xparams);

    public static double[] idwtscalcbuf(idwmodel s, idwcalcbuffer buf, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwtscalcbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwtscalcbuf() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of idwtscalcbuf() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of idwtscalcbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwtscalcbuf(error_msg, s.get_ptr(), buf.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwtscalcbuf");
        return lcl_y.val;
    }
    public static double[] idwtscalcbuf(idwmodel s, idwcalcbuffer buf, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwtscalcbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwtscalcbuf() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of idwtscalcbuf() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of idwtscalcbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwtscalcbuf(error_msg, s.get_ptr(), buf.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwtscalcbuf");
        return lcl_y.val;
    }
    private static native int _jni_idwtscalcbuf(mut_string error_msg, long s, long buf, double[] x, rlc_double1d y, long _xparams);

    public static class idwfit_results
    {
        public idwmodel model;
        public idwreport rep;
    }
    public static idwfit_results idwfit(idwbuilder state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_model = new mut_long();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwfit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwfit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwfit(error_msg, state.get_ptr(), lcl_model, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwfit");
        idwfit_results ret_tuple = new idwfit_results();
        ret_tuple.model = new idwmodel(lcl_model.val);
        ret_tuple.rep = (idwreport)lcl_rep.val;
        return ret_tuple;
    }
    public static idwfit_results idwfit(idwbuilder state) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_model = new mut_long();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwfit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of idwfit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwfit(error_msg, state.get_ptr(), lcl_model, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwfit");
        idwfit_results ret_tuple = new idwfit_results();
        ret_tuple.model = new idwmodel(lcl_model.val);
        ret_tuple.rep = (idwreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_idwfit(mut_string error_msg, long state, mut_long model, mut_object rep, long _xparams);

    public static double idwpeekprogress(idwbuilder s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwpeekprogress() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwpeekprogress() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwpeekprogress(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwpeekprogress");
        return lcl_result.val;
    }
    public static double idwpeekprogress(idwbuilder s) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwpeekprogress() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwpeekprogress() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwpeekprogress(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwpeekprogress");
        return lcl_result.val;
    }
    private static native int _jni_idwpeekprogress(mut_string error_msg, mut_double result, long s, long _xparams);

    public static double[] idwgridcalc2v(idwmodel s, double[] x0, int n0, double[] x1, int n1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwgridcalc2v() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwgridcalc2v() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwgridcalc2v(error_msg, s.get_ptr(), x0, n0, x1, n1, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwgridcalc2v");
        return lcl_y.val;
    }
    public static double[] idwgridcalc2v(idwmodel s, double[] x0, int n0, double[] x1, int n1) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwgridcalc2v() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwgridcalc2v() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwgridcalc2v(error_msg, s.get_ptr(), x0, n0, x1, n1, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwgridcalc2v");
        return lcl_y.val;
    }
    private static native int _jni_idwgridcalc2v(mut_string error_msg, long s, double[] x0, int n0, double[] x1, int n1, rlc_double1d y, long _xparams);

    public static double[] idwgridcalc2vsubset(idwmodel s, double[] x0, int n0, double[] x1, int n1, boolean[] flagy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwgridcalc2vsubset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwgridcalc2vsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwgridcalc2vsubset(error_msg, s.get_ptr(), x0, n0, x1, n1, flagy, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwgridcalc2vsubset");
        return lcl_y.val;
    }
    public static double[] idwgridcalc2vsubset(idwmodel s, double[] x0, int n0, double[] x1, int n1, boolean[] flagy) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of idwgridcalc2vsubset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of idwgridcalc2vsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_idwgridcalc2vsubset(error_msg, s.get_ptr(), x0, n0, x1, n1, flagy, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "idwgridcalc2vsubset");
        return lcl_y.val;
    }
    private static native int _jni_idwgridcalc2vsubset(mut_string error_msg, long s, double[] x0, int n0, double[] x1, int n1, boolean[] flagy, rlc_double1d y, long _xparams);

    
    
    //
    // Subpackage intfitserv
    //
    
    
    
    //
    // Subpackage polint
    //
    
    public static double[] polynomialbar2cheb(barycentricinterpolant p, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_t = new rlc_double1d();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of polynomialbar2cheb() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of polynomialbar2cheb() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbar2cheb(error_msg, p.get_ptr(), a, b, lcl_t, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbar2cheb");
        return lcl_t.val;
    }
    public static double[] polynomialbar2cheb(barycentricinterpolant p, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_t = new rlc_double1d();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of polynomialbar2cheb() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of polynomialbar2cheb() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbar2cheb(error_msg, p.get_ptr(), a, b, lcl_t, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbar2cheb");
        return lcl_t.val;
    }
    private static native int _jni_polynomialbar2cheb(mut_string error_msg, long p, double a, double b, rlc_double1d t, long _xparams);

    public static barycentricinterpolant polynomialcheb2bar(double[] t, int n, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialcheb2bar(error_msg, t, n, a, b, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialcheb2bar");
        return new barycentricinterpolant(lcl_p.val);
    }
    public static barycentricinterpolant polynomialcheb2bar(double[] t, int n, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialcheb2bar(error_msg, t, n, a, b, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialcheb2bar");
        return new barycentricinterpolant(lcl_p.val);
    }
            
    public static barycentricinterpolant polynomialcheb2bar(double[] t, double a, double b, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = t.length;
        return polynomialcheb2bar(t, n, a, b, _params);
    
    }
    
    public static barycentricinterpolant polynomialcheb2bar(double[] t, double a, double b) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = t.length;
        return polynomialcheb2bar(t, n, a, b, _params);
    
    }
    private static native int _jni_polynomialcheb2bar(mut_string error_msg, double[] t, int n, double a, double b, mut_long p, long _xparams);

    public static double[] polynomialbar2pow(barycentricinterpolant p, double c, double s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of polynomialbar2pow() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of polynomialbar2pow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbar2pow(error_msg, p.get_ptr(), c, s, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbar2pow");
        return lcl_a.val;
    }
    public static double[] polynomialbar2pow(barycentricinterpolant p, double c, double s) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of polynomialbar2pow() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of polynomialbar2pow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbar2pow(error_msg, p.get_ptr(), c, s, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbar2pow");
        return lcl_a.val;
    }
            
    public static double[] polynomialbar2pow(barycentricinterpolant p, alglib.xparams _params) throws alglib.exception
    {
        double c;
        double s;
    
        c = 0;
        s = 1;
        return polynomialbar2pow(p, c, s, _params);
    
    }
    
    public static double[] polynomialbar2pow(barycentricinterpolant p) throws alglib.exception
    {
        alglib.xparams _params = null;
        double c;
        double s;
    
        c = 0;
        s = 1;
        return polynomialbar2pow(p, c, s, _params);
    
    }
    private static native int _jni_polynomialbar2pow(mut_string error_msg, long p, double c, double s, rlc_double1d a, long _xparams);

    public static barycentricinterpolant polynomialpow2bar(double[] a, int n, double c, double s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialpow2bar(error_msg, a, n, c, s, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialpow2bar");
        return new barycentricinterpolant(lcl_p.val);
    }
    public static barycentricinterpolant polynomialpow2bar(double[] a, int n, double c, double s) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialpow2bar(error_msg, a, n, c, s, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialpow2bar");
        return new barycentricinterpolant(lcl_p.val);
    }
            
    public static barycentricinterpolant polynomialpow2bar(double[] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
        double c;
        double s;
    
        n = a.length;
        c = 0;
        s = 1;
        return polynomialpow2bar(a, n, c, s, _params);
    
    }
    
    public static barycentricinterpolant polynomialpow2bar(double[] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        double c;
        double s;
    
        n = a.length;
        c = 0;
        s = 1;
        return polynomialpow2bar(a, n, c, s, _params);
    
    }
    private static native int _jni_polynomialpow2bar(mut_string error_msg, double[] a, int n, double c, double s, mut_long p, long _xparams);

    public static barycentricinterpolant polynomialbuild(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbuild(error_msg, x, y, n, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbuild");
        return new barycentricinterpolant(lcl_p.val);
    }
    public static barycentricinterpolant polynomialbuild(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbuild(error_msg, x, y, n, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbuild");
        return new barycentricinterpolant(lcl_p.val);
    }
            
    public static barycentricinterpolant polynomialbuild(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling polynomialbuild(): looks like one of arguments has wrong size");
        n = x.length;
        return polynomialbuild(x, y, n, _params);
    
    }
    
    public static barycentricinterpolant polynomialbuild(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling polynomialbuild(): looks like one of arguments has wrong size");
        n = x.length;
        return polynomialbuild(x, y, n, _params);
    
    }
    private static native int _jni_polynomialbuild(mut_string error_msg, double[] x, double[] y, int n, mut_long p, long _xparams);

    public static barycentricinterpolant polynomialbuildeqdist(double a, double b, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbuildeqdist(error_msg, a, b, y, n, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbuildeqdist");
        return new barycentricinterpolant(lcl_p.val);
    }
    public static barycentricinterpolant polynomialbuildeqdist(double a, double b, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbuildeqdist(error_msg, a, b, y, n, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbuildeqdist");
        return new barycentricinterpolant(lcl_p.val);
    }
            
    public static barycentricinterpolant polynomialbuildeqdist(double a, double b, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = y.length;
        return polynomialbuildeqdist(a, b, y, n, _params);
    
    }
    
    public static barycentricinterpolant polynomialbuildeqdist(double a, double b, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = y.length;
        return polynomialbuildeqdist(a, b, y, n, _params);
    
    }
    private static native int _jni_polynomialbuildeqdist(mut_string error_msg, double a, double b, double[] y, int n, mut_long p, long _xparams);

    public static barycentricinterpolant polynomialbuildcheb1(double a, double b, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbuildcheb1(error_msg, a, b, y, n, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbuildcheb1");
        return new barycentricinterpolant(lcl_p.val);
    }
    public static barycentricinterpolant polynomialbuildcheb1(double a, double b, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbuildcheb1(error_msg, a, b, y, n, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbuildcheb1");
        return new barycentricinterpolant(lcl_p.val);
    }
            
    public static barycentricinterpolant polynomialbuildcheb1(double a, double b, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = y.length;
        return polynomialbuildcheb1(a, b, y, n, _params);
    
    }
    
    public static barycentricinterpolant polynomialbuildcheb1(double a, double b, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = y.length;
        return polynomialbuildcheb1(a, b, y, n, _params);
    
    }
    private static native int _jni_polynomialbuildcheb1(mut_string error_msg, double a, double b, double[] y, int n, mut_long p, long _xparams);

    public static barycentricinterpolant polynomialbuildcheb2(double a, double b, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbuildcheb2(error_msg, a, b, y, n, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbuildcheb2");
        return new barycentricinterpolant(lcl_p.val);
    }
    public static barycentricinterpolant polynomialbuildcheb2(double a, double b, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialbuildcheb2(error_msg, a, b, y, n, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialbuildcheb2");
        return new barycentricinterpolant(lcl_p.val);
    }
            
    public static barycentricinterpolant polynomialbuildcheb2(double a, double b, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = y.length;
        return polynomialbuildcheb2(a, b, y, n, _params);
    
    }
    
    public static barycentricinterpolant polynomialbuildcheb2(double a, double b, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = y.length;
        return polynomialbuildcheb2(a, b, y, n, _params);
    
    }
    private static native int _jni_polynomialbuildcheb2(mut_string error_msg, double a, double b, double[] y, int n, mut_long p, long _xparams);

    public static double polynomialcalceqdist(double a, double b, double[] f, int n, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialcalceqdist(error_msg, lcl_result, a, b, f, n, t, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialcalceqdist");
        return lcl_result.val;
    }
    public static double polynomialcalceqdist(double a, double b, double[] f, int n, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialcalceqdist(error_msg, lcl_result, a, b, f, n, t, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialcalceqdist");
        return lcl_result.val;
    }
            
    public static double polynomialcalceqdist(double a, double b, double[] f, double t, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = f.length;
        return polynomialcalceqdist(a, b, f, n, t, _params);
    
    }
    
    public static double polynomialcalceqdist(double a, double b, double[] f, double t) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = f.length;
        return polynomialcalceqdist(a, b, f, n, t, _params);
    
    }
    private static native int _jni_polynomialcalceqdist(mut_string error_msg, mut_double result, double a, double b, double[] f, int n, double t, long _xparams);

    public static double polynomialcalccheb1(double a, double b, double[] f, int n, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialcalccheb1(error_msg, lcl_result, a, b, f, n, t, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialcalccheb1");
        return lcl_result.val;
    }
    public static double polynomialcalccheb1(double a, double b, double[] f, int n, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialcalccheb1(error_msg, lcl_result, a, b, f, n, t, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialcalccheb1");
        return lcl_result.val;
    }
            
    public static double polynomialcalccheb1(double a, double b, double[] f, double t, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = f.length;
        return polynomialcalccheb1(a, b, f, n, t, _params);
    
    }
    
    public static double polynomialcalccheb1(double a, double b, double[] f, double t) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = f.length;
        return polynomialcalccheb1(a, b, f, n, t, _params);
    
    }
    private static native int _jni_polynomialcalccheb1(mut_string error_msg, mut_double result, double a, double b, double[] f, int n, double t, long _xparams);

    public static double polynomialcalccheb2(double a, double b, double[] f, int n, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialcalccheb2(error_msg, lcl_result, a, b, f, n, t, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialcalccheb2");
        return lcl_result.val;
    }
    public static double polynomialcalccheb2(double a, double b, double[] f, int n, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialcalccheb2(error_msg, lcl_result, a, b, f, n, t, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialcalccheb2");
        return lcl_result.val;
    }
            
    public static double polynomialcalccheb2(double a, double b, double[] f, double t, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = f.length;
        return polynomialcalccheb2(a, b, f, n, t, _params);
    
    }
    
    public static double polynomialcalccheb2(double a, double b, double[] f, double t) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = f.length;
        return polynomialcalccheb2(a, b, f, n, t, _params);
    
    }
    private static native int _jni_polynomialcalccheb2(mut_string error_msg, mut_double result, double a, double b, double[] f, int n, double t, long _xparams);

    
    
    //
    // Subpackage spline1d
    //
    

    public static class spline1dinterpolant extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected spline1dinterpolant()
        {
            _ptr = 0;
            own  = false;
        }
        protected spline1dinterpolant(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected spline1dinterpolant(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new spline1dinterpolant(0);
            return new spline1dinterpolant(_jni_x_obj_copy_spline1dinterpolant(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_spline1dinterpolant(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_spline1dinterpolant(long x);
    private static native void _jni_x_obj_free_spline1dinterpolant(long x);


        public static class spline1dfitreport extends alglibobject
        {
            public int terminationtype;
            public double taskrcond;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public double maxerror;
            public alglibobject make_copy()
            {
                spline1dfitreport dst = new spline1dfitreport();
                dst.terminationtype = terminationtype;
                dst.taskrcond = taskrcond;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                dst.maxerror = maxerror;
                return dst;
            }
        }

    private static native int _jni_spline1dserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String spline1dserialize(spline1dinterpolant obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of spline1dserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of spline1dserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_spline1dserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_spline1dunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static spline1dinterpolant spline1dunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of spline1dunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_spline1dunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dunserialize");
        return new spline1dinterpolant(lcl_result.val);
    }

    public static spline1dinterpolant spline1dbuildlinear(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildlinear(error_msg, x, y, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildlinear");
        return new spline1dinterpolant(lcl_c.val);
    }
    public static spline1dinterpolant spline1dbuildlinear(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildlinear(error_msg, x, y, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildlinear");
        return new spline1dinterpolant(lcl_c.val);
    }
            
    public static spline1dinterpolant spline1dbuildlinear(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildlinear(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildlinear(x, y, n, _params);
    
    }
    
    public static spline1dinterpolant spline1dbuildlinear(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildlinear(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildlinear(x, y, n, _params);
    
    }
    private static native int _jni_spline1dbuildlinear(mut_string error_msg, double[] x, double[] y, int n, mut_long c, long _xparams);

    public static void spline1dbuildlinearbuf(double[] x, double[] y, int n, spline1dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dbuildlinearbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dbuildlinearbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildlinearbuf(error_msg, x, y, n, c.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildlinearbuf");
    }
    public static void spline1dbuildlinearbuf(double[] x, double[] y, int n, spline1dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dbuildlinearbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dbuildlinearbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildlinearbuf(error_msg, x, y, n, c.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildlinearbuf");
    }
            
    public static void spline1dbuildlinearbuf(double[] x, double[] y, spline1dinterpolant c, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildlinearbuf(): looks like one of arguments has wrong size");
        n = x.length;
        spline1dbuildlinearbuf(x, y, n, c, _params);
    
    }
    
    public static void spline1dbuildlinearbuf(double[] x, double[] y, spline1dinterpolant c) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildlinearbuf(): looks like one of arguments has wrong size");
        n = x.length;
        spline1dbuildlinearbuf(x, y, n, c, _params);
    
    }
    private static native int _jni_spline1dbuildlinearbuf(mut_string error_msg, double[] x, double[] y, int n, long c, long _xparams);

    public static spline1dinterpolant spline1dbuildcubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildcubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildcubic");
        return new spline1dinterpolant(lcl_c.val);
    }
    public static spline1dinterpolant spline1dbuildcubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildcubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildcubic");
        return new spline1dinterpolant(lcl_c.val);
    }
            
    public static spline1dinterpolant spline1dbuildcubic(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildcubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        return spline1dbuildcubic(x, y, n, boundltype, boundl, boundrtype, boundr, _params);
    
    }
    
    public static spline1dinterpolant spline1dbuildcubic(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildcubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        return spline1dbuildcubic(x, y, n, boundltype, boundl, boundrtype, boundr, _params);
    
    }
    private static native int _jni_spline1dbuildcubic(mut_string error_msg, double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, mut_long c, long _xparams);

    public static double[] spline1dgriddiffcubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_d = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dgriddiffcubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, lcl_d, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dgriddiffcubic");
        return lcl_d.val;
    }
    public static double[] spline1dgriddiffcubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_d = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dgriddiffcubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, lcl_d, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dgriddiffcubic");
        return lcl_d.val;
    }
            
    public static double[] spline1dgriddiffcubic(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dgriddiffcubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        return spline1dgriddiffcubic(x, y, n, boundltype, boundl, boundrtype, boundr, _params);
    
    }
    
    public static double[] spline1dgriddiffcubic(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dgriddiffcubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        return spline1dgriddiffcubic(x, y, n, boundltype, boundl, boundrtype, boundr, _params);
    
    }
    private static native int _jni_spline1dgriddiffcubic(mut_string error_msg, double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, rlc_double1d d, long _xparams);

    public static class spline1dgriddiff2cubic_results
    {
        public double[] d1;
        public double[] d2;
    }
    public static spline1dgriddiff2cubic_results spline1dgriddiff2cubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_d1 = new rlc_double1d();
        rlc_double1d lcl_d2 = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dgriddiff2cubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, lcl_d1, lcl_d2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dgriddiff2cubic");
        spline1dgriddiff2cubic_results ret_tuple = new spline1dgriddiff2cubic_results();
        ret_tuple.d1 = lcl_d1.val;
        ret_tuple.d2 = lcl_d2.val;
        return ret_tuple;
    }
    public static spline1dgriddiff2cubic_results spline1dgriddiff2cubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_d1 = new rlc_double1d();
        rlc_double1d lcl_d2 = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dgriddiff2cubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, lcl_d1, lcl_d2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dgriddiff2cubic");
        spline1dgriddiff2cubic_results ret_tuple = new spline1dgriddiff2cubic_results();
        ret_tuple.d1 = lcl_d1.val;
        ret_tuple.d2 = lcl_d2.val;
        return ret_tuple;
    }
            
    public static spline1dgriddiff2cubic_results spline1dgriddiff2cubic(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dgriddiff2cubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        return spline1dgriddiff2cubic(x, y, n, boundltype, boundl, boundrtype, boundr, _params);
    
    }
    
    public static spline1dgriddiff2cubic_results spline1dgriddiff2cubic(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dgriddiff2cubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        return spline1dgriddiff2cubic(x, y, n, boundltype, boundl, boundrtype, boundr, _params);
    
    }
    private static native int _jni_spline1dgriddiff2cubic(mut_string error_msg, double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, rlc_double1d d1, rlc_double1d d2, long _xparams);

    public static double[] spline1dconvcubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y2 = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dconvcubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, lcl_y2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dconvcubic");
        return lcl_y2.val;
    }
    public static double[] spline1dconvcubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y2 = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dconvcubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, lcl_y2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dconvcubic");
        return lcl_y2.val;
    }
            
    public static double[] spline1dconvcubic(double[] x, double[] y, double[] x2, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        int n2;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dconvcubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        n2 = x2.length;
        return spline1dconvcubic(x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, _params);
    
    }
    
    public static double[] spline1dconvcubic(double[] x, double[] y, double[] x2) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        int n2;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dconvcubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        n2 = x2.length;
        return spline1dconvcubic(x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, _params);
    
    }
    private static native int _jni_spline1dconvcubic(mut_string error_msg, double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2, rlc_double1d y2, long _xparams);

    public static class spline1dconvdiffcubic_results
    {
        public double[] y2;
        public double[] d2;
    }
    public static spline1dconvdiffcubic_results spline1dconvdiffcubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y2 = new rlc_double1d();
        rlc_double1d lcl_d2 = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dconvdiffcubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, lcl_y2, lcl_d2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dconvdiffcubic");
        spline1dconvdiffcubic_results ret_tuple = new spline1dconvdiffcubic_results();
        ret_tuple.y2 = lcl_y2.val;
        ret_tuple.d2 = lcl_d2.val;
        return ret_tuple;
    }
    public static spline1dconvdiffcubic_results spline1dconvdiffcubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y2 = new rlc_double1d();
        rlc_double1d lcl_d2 = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dconvdiffcubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, lcl_y2, lcl_d2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dconvdiffcubic");
        spline1dconvdiffcubic_results ret_tuple = new spline1dconvdiffcubic_results();
        ret_tuple.y2 = lcl_y2.val;
        ret_tuple.d2 = lcl_d2.val;
        return ret_tuple;
    }
            
    public static spline1dconvdiffcubic_results spline1dconvdiffcubic(double[] x, double[] y, double[] x2, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        int n2;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dconvdiffcubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        n2 = x2.length;
        return spline1dconvdiffcubic(x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, _params);
    
    }
    
    public static spline1dconvdiffcubic_results spline1dconvdiffcubic(double[] x, double[] y, double[] x2) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        int n2;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dconvdiffcubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        n2 = x2.length;
        return spline1dconvdiffcubic(x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, _params);
    
    }
    private static native int _jni_spline1dconvdiffcubic(mut_string error_msg, double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2, rlc_double1d y2, rlc_double1d d2, long _xparams);

    public static class spline1dconvdiff2cubic_results
    {
        public double[] y2;
        public double[] d2;
        public double[] dd2;
    }
    public static spline1dconvdiff2cubic_results spline1dconvdiff2cubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y2 = new rlc_double1d();
        rlc_double1d lcl_d2 = new rlc_double1d();
        rlc_double1d lcl_dd2 = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dconvdiff2cubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, lcl_y2, lcl_d2, lcl_dd2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dconvdiff2cubic");
        spline1dconvdiff2cubic_results ret_tuple = new spline1dconvdiff2cubic_results();
        ret_tuple.y2 = lcl_y2.val;
        ret_tuple.d2 = lcl_d2.val;
        ret_tuple.dd2 = lcl_dd2.val;
        return ret_tuple;
    }
    public static spline1dconvdiff2cubic_results spline1dconvdiff2cubic(double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y2 = new rlc_double1d();
        rlc_double1d lcl_d2 = new rlc_double1d();
        rlc_double1d lcl_dd2 = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dconvdiff2cubic(error_msg, x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, lcl_y2, lcl_d2, lcl_dd2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dconvdiff2cubic");
        spline1dconvdiff2cubic_results ret_tuple = new spline1dconvdiff2cubic_results();
        ret_tuple.y2 = lcl_y2.val;
        ret_tuple.d2 = lcl_d2.val;
        ret_tuple.dd2 = lcl_dd2.val;
        return ret_tuple;
    }
            
    public static spline1dconvdiff2cubic_results spline1dconvdiff2cubic(double[] x, double[] y, double[] x2, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        int n2;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dconvdiff2cubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        n2 = x2.length;
        return spline1dconvdiff2cubic(x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, _params);
    
    }
    
    public static spline1dconvdiff2cubic_results spline1dconvdiff2cubic(double[] x, double[] y, double[] x2) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int boundltype;
        double boundl;
        int boundrtype;
        double boundr;
        int n2;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dconvdiff2cubic(): looks like one of arguments has wrong size");
        n = x.length;
        boundltype = 0;
        boundl = 0;
        boundrtype = 0;
        boundr = 0;
        n2 = x2.length;
        return spline1dconvdiff2cubic(x, y, n, boundltype, boundl, boundrtype, boundr, x2, n2, _params);
    
    }
    private static native int _jni_spline1dconvdiff2cubic(mut_string error_msg, double[] x, double[] y, int n, int boundltype, double boundl, int boundrtype, double boundr, double[] x2, int n2, rlc_double1d y2, rlc_double1d d2, rlc_double1d dd2, long _xparams);

    public static spline1dinterpolant spline1dbuildcatmullrom(double[] x, double[] y, int n, int boundtype, double tension, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildcatmullrom(error_msg, x, y, n, boundtype, tension, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildcatmullrom");
        return new spline1dinterpolant(lcl_c.val);
    }
    public static spline1dinterpolant spline1dbuildcatmullrom(double[] x, double[] y, int n, int boundtype, double tension) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildcatmullrom(error_msg, x, y, n, boundtype, tension, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildcatmullrom");
        return new spline1dinterpolant(lcl_c.val);
    }
            
    public static spline1dinterpolant spline1dbuildcatmullrom(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int boundtype;
        double tension;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildcatmullrom(): looks like one of arguments has wrong size");
        n = x.length;
        boundtype = 0;
        tension = 0;
        return spline1dbuildcatmullrom(x, y, n, boundtype, tension, _params);
    
    }
    
    public static spline1dinterpolant spline1dbuildcatmullrom(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int boundtype;
        double tension;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildcatmullrom(): looks like one of arguments has wrong size");
        n = x.length;
        boundtype = 0;
        tension = 0;
        return spline1dbuildcatmullrom(x, y, n, boundtype, tension, _params);
    
    }
    private static native int _jni_spline1dbuildcatmullrom(mut_string error_msg, double[] x, double[] y, int n, int boundtype, double tension, mut_long c, long _xparams);

    public static spline1dinterpolant spline1dbuildhermite(double[] x, double[] y, double[] d, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildhermite(error_msg, x, y, d, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildhermite");
        return new spline1dinterpolant(lcl_c.val);
    }
    public static spline1dinterpolant spline1dbuildhermite(double[] x, double[] y, double[] d, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildhermite(error_msg, x, y, d, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildhermite");
        return new spline1dinterpolant(lcl_c.val);
    }
            
    public static spline1dinterpolant spline1dbuildhermite(double[] x, double[] y, double[] d, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length) || (x.length!=d.length))
            throw new exception("Error while calling spline1dbuildhermite(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildhermite(x, y, d, n, _params);
    
    }
    
    public static spline1dinterpolant spline1dbuildhermite(double[] x, double[] y, double[] d) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length) || (x.length!=d.length))
            throw new exception("Error while calling spline1dbuildhermite(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildhermite(x, y, d, n, _params);
    
    }
    private static native int _jni_spline1dbuildhermite(mut_string error_msg, double[] x, double[] y, double[] d, int n, mut_long c, long _xparams);

    public static void spline1dbuildhermitebuf(double[] x, double[] y, double[] d, int n, spline1dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dbuildhermitebuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dbuildhermitebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildhermitebuf(error_msg, x, y, d, n, c.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildhermitebuf");
    }
    public static void spline1dbuildhermitebuf(double[] x, double[] y, double[] d, int n, spline1dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dbuildhermitebuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dbuildhermitebuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildhermitebuf(error_msg, x, y, d, n, c.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildhermitebuf");
    }
            
    public static void spline1dbuildhermitebuf(double[] x, double[] y, double[] d, spline1dinterpolant c, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length) || (x.length!=d.length))
            throw new exception("Error while calling spline1dbuildhermitebuf(): looks like one of arguments has wrong size");
        n = x.length;
        spline1dbuildhermitebuf(x, y, d, n, c, _params);
    
    }
    
    public static void spline1dbuildhermitebuf(double[] x, double[] y, double[] d, spline1dinterpolant c) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length) || (x.length!=d.length))
            throw new exception("Error while calling spline1dbuildhermitebuf(): looks like one of arguments has wrong size");
        n = x.length;
        spline1dbuildhermitebuf(x, y, d, n, c, _params);
    
    }
    private static native int _jni_spline1dbuildhermitebuf(mut_string error_msg, double[] x, double[] y, double[] d, int n, long c, long _xparams);

    public static spline1dinterpolant spline1dbuildakima(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildakima(error_msg, x, y, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildakima");
        return new spline1dinterpolant(lcl_c.val);
    }
    public static spline1dinterpolant spline1dbuildakima(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildakima(error_msg, x, y, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildakima");
        return new spline1dinterpolant(lcl_c.val);
    }
            
    public static spline1dinterpolant spline1dbuildakima(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildakima(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildakima(x, y, n, _params);
    
    }
    
    public static spline1dinterpolant spline1dbuildakima(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildakima(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildakima(x, y, n, _params);
    
    }
    private static native int _jni_spline1dbuildakima(mut_string error_msg, double[] x, double[] y, int n, mut_long c, long _xparams);

    public static spline1dinterpolant spline1dbuildakimamod(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildakimamod(error_msg, x, y, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildakimamod");
        return new spline1dinterpolant(lcl_c.val);
    }
    public static spline1dinterpolant spline1dbuildakimamod(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildakimamod(error_msg, x, y, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildakimamod");
        return new spline1dinterpolant(lcl_c.val);
    }
            
    public static spline1dinterpolant spline1dbuildakimamod(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildakimamod(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildakimamod(x, y, n, _params);
    
    }
    
    public static spline1dinterpolant spline1dbuildakimamod(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildakimamod(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildakimamod(x, y, n, _params);
    
    }
    private static native int _jni_spline1dbuildakimamod(mut_string error_msg, double[] x, double[] y, int n, mut_long c, long _xparams);

    public static double spline1dcalc(spline1dinterpolant c, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dcalc() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dcalc(error_msg, lcl_result, c.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dcalc");
        return lcl_result.val;
    }
    public static double spline1dcalc(spline1dinterpolant c, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dcalc() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dcalc(error_msg, lcl_result, c.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dcalc");
        return lcl_result.val;
    }
    private static native int _jni_spline1dcalc(mut_string error_msg, mut_double result, long c, double x, long _xparams);

    public static class spline1ddiff_results
    {
        public double s;
        public double ds;
        public double d2s;
    }
    public static spline1ddiff_results spline1ddiff(spline1dinterpolant c, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_s = new mut_double();
        mut_double lcl_ds = new mut_double();
        mut_double lcl_d2s = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1ddiff() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1ddiff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1ddiff(error_msg, c.get_ptr(), x, lcl_s, lcl_ds, lcl_d2s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1ddiff");
        spline1ddiff_results ret_tuple = new spline1ddiff_results();
        ret_tuple.s = lcl_s.val;
        ret_tuple.ds = lcl_ds.val;
        ret_tuple.d2s = lcl_d2s.val;
        return ret_tuple;
    }
    public static spline1ddiff_results spline1ddiff(spline1dinterpolant c, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_s = new mut_double();
        mut_double lcl_ds = new mut_double();
        mut_double lcl_d2s = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1ddiff() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1ddiff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1ddiff(error_msg, c.get_ptr(), x, lcl_s, lcl_ds, lcl_d2s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1ddiff");
        spline1ddiff_results ret_tuple = new spline1ddiff_results();
        ret_tuple.s = lcl_s.val;
        ret_tuple.ds = lcl_ds.val;
        ret_tuple.d2s = lcl_d2s.val;
        return ret_tuple;
    }
    private static native int _jni_spline1ddiff(mut_string error_msg, long c, double x, mut_double s, mut_double ds, mut_double d2s, long _xparams);

    public static class spline1dunpack_results
    {
        public int n;
        public double[][] tbl;
    }
    public static spline1dunpack_results spline1dunpack(spline1dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        rlc_double2d lcl_tbl = new rlc_double2d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dunpack() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dunpack(error_msg, c.get_ptr(), lcl_n, lcl_tbl, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dunpack");
        spline1dunpack_results ret_tuple = new spline1dunpack_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.tbl = lcl_tbl.val;
        return ret_tuple;
    }
    public static spline1dunpack_results spline1dunpack(spline1dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        rlc_double2d lcl_tbl = new rlc_double2d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dunpack() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dunpack(error_msg, c.get_ptr(), lcl_n, lcl_tbl, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dunpack");
        spline1dunpack_results ret_tuple = new spline1dunpack_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.tbl = lcl_tbl.val;
        return ret_tuple;
    }
    private static native int _jni_spline1dunpack(mut_string error_msg, long c, mut_int n, rlc_double2d tbl, long _xparams);

    public static void spline1dlintransx(spline1dinterpolant c, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dlintransx() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dlintransx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dlintransx(error_msg, c.get_ptr(), a, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dlintransx");
    }
    public static void spline1dlintransx(spline1dinterpolant c, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dlintransx() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dlintransx() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dlintransx(error_msg, c.get_ptr(), a, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dlintransx");
    }
    private static native int _jni_spline1dlintransx(mut_string error_msg, long c, double a, double b, long _xparams);

    public static void spline1dlintransy(spline1dinterpolant c, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dlintransy() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dlintransy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dlintransy(error_msg, c.get_ptr(), a, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dlintransy");
    }
    public static void spline1dlintransy(spline1dinterpolant c, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dlintransy() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dlintransy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dlintransy(error_msg, c.get_ptr(), a, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dlintransy");
    }
    private static native int _jni_spline1dlintransy(mut_string error_msg, long c, double a, double b, long _xparams);

    public static double spline1dintegrate(spline1dinterpolant c, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dintegrate() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dintegrate() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dintegrate(error_msg, lcl_result, c.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dintegrate");
        return lcl_result.val;
    }
    public static double spline1dintegrate(spline1dinterpolant c, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dintegrate() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline1dintegrate() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dintegrate(error_msg, lcl_result, c.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dintegrate");
        return lcl_result.val;
    }
    private static native int _jni_spline1dintegrate(mut_string error_msg, mut_double result, long c, double x, long _xparams);

    public static class spline1dfit_results
    {
        public spline1dinterpolant s;
        public spline1dfitreport rep;
    }
    public static spline1dfit_results spline1dfit(double[] x, double[] y, int n, int m, double lambdans, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfit(error_msg, x, y, n, m, lambdans, lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfit");
        spline1dfit_results ret_tuple = new spline1dfit_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline1dfit_results spline1dfit(double[] x, double[] y, int n, int m, double lambdans) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfit(error_msg, x, y, n, m, lambdans, lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfit");
        spline1dfit_results ret_tuple = new spline1dfit_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spline1dfit_results spline1dfit(double[] x, double[] y, int m, double lambdans, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfit(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfit(x, y, n, m, lambdans, _params);
    
    }
    
    public static spline1dfit_results spline1dfit(double[] x, double[] y, int m, double lambdans) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfit(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfit(x, y, n, m, lambdans, _params);
    
    }
    private static native int _jni_spline1dfit(mut_string error_msg, double[] x, double[] y, int n, int m, double lambdans, mut_long s, mut_object rep, long _xparams);

    public static spline1dinterpolant spline1dbuildmonotone(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildmonotone(error_msg, x, y, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildmonotone");
        return new spline1dinterpolant(lcl_c.val);
    }
    public static spline1dinterpolant spline1dbuildmonotone(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dbuildmonotone(error_msg, x, y, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dbuildmonotone");
        return new spline1dinterpolant(lcl_c.val);
    }
            
    public static spline1dinterpolant spline1dbuildmonotone(double[] x, double[] y, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildmonotone(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildmonotone(x, y, n, _params);
    
    }
    
    public static spline1dinterpolant spline1dbuildmonotone(double[] x, double[] y) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dbuildmonotone(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dbuildmonotone(x, y, n, _params);
    
    }
    private static native int _jni_spline1dbuildmonotone(mut_string error_msg, double[] x, double[] y, int n, mut_long c, long _xparams);

    
    
    //
    // Subpackage lsfit
    //
    

        public static class polynomialfitreport extends alglibobject
        {
            public int terminationtype;
            public double taskrcond;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public double maxerror;
            public alglibobject make_copy()
            {
                polynomialfitreport dst = new polynomialfitreport();
                dst.terminationtype = terminationtype;
                dst.taskrcond = taskrcond;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                dst.maxerror = maxerror;
                return dst;
            }
        }


        public static class barycentricfitreport extends alglibobject
        {
            public int terminationtype;
            public double taskrcond;
            public int dbest;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public double maxerror;
            public alglibobject make_copy()
            {
                barycentricfitreport dst = new barycentricfitreport();
                dst.terminationtype = terminationtype;
                dst.taskrcond = taskrcond;
                dst.dbest = dbest;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                dst.maxerror = maxerror;
                return dst;
            }
        }


        public static class lsfitreport extends alglibobject
        {
            public int terminationtype;
            public double taskrcond;
            public int iterationscount;
            public int varidx;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public double maxerror;
            public double wrmserror;
            public double[][] covpar;
            public double[] errpar;
            public double[] errcurve;
            public double[] noise;
            public double r2;
            public alglibobject make_copy()
            {
                lsfitreport dst = new lsfitreport();
                dst.terminationtype = terminationtype;
                dst.taskrcond = taskrcond;
                dst.iterationscount = iterationscount;
                dst.varidx = varidx;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                dst.maxerror = maxerror;
                dst.wrmserror = wrmserror;
                dst.covpar = alglib.make_copy(covpar);
                dst.errpar = alglib.make_copy(errpar);
                dst.errcurve = alglib.make_copy(errcurve);
                dst.noise = alglib.make_copy(noise);
                dst.r2 = r2;
                return dst;
            }
        }


    public static class lsfitstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected lsfitstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected lsfitstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected lsfitstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new lsfitstate(0);
            return new lsfitstate(_jni_x_obj_copy_lsfitstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_lsfitstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_lsfitstate(long x);
    private static native void _jni_x_obj_free_lsfitstate(long x);

    public static class lstfitpiecewiselinearrdpfixed_results
    {
        public double[] x2;
        public double[] y2;
        public int nsections;
    }
    public static lstfitpiecewiselinearrdpfixed_results lstfitpiecewiselinearrdpfixed(double[] x, double[] y, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x2 = new rlc_double1d();
        rlc_double1d lcl_y2 = new rlc_double1d();
        mut_int lcl_nsections = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lstfitpiecewiselinearrdpfixed(error_msg, x, y, n, m, lcl_x2, lcl_y2, lcl_nsections, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lstfitpiecewiselinearrdpfixed");
        lstfitpiecewiselinearrdpfixed_results ret_tuple = new lstfitpiecewiselinearrdpfixed_results();
        ret_tuple.x2 = lcl_x2.val;
        ret_tuple.y2 = lcl_y2.val;
        ret_tuple.nsections = lcl_nsections.val;
        return ret_tuple;
    }
    public static lstfitpiecewiselinearrdpfixed_results lstfitpiecewiselinearrdpfixed(double[] x, double[] y, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x2 = new rlc_double1d();
        rlc_double1d lcl_y2 = new rlc_double1d();
        mut_int lcl_nsections = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lstfitpiecewiselinearrdpfixed(error_msg, x, y, n, m, lcl_x2, lcl_y2, lcl_nsections, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lstfitpiecewiselinearrdpfixed");
        lstfitpiecewiselinearrdpfixed_results ret_tuple = new lstfitpiecewiselinearrdpfixed_results();
        ret_tuple.x2 = lcl_x2.val;
        ret_tuple.y2 = lcl_y2.val;
        ret_tuple.nsections = lcl_nsections.val;
        return ret_tuple;
    }
    private static native int _jni_lstfitpiecewiselinearrdpfixed(mut_string error_msg, double[] x, double[] y, int n, int m, rlc_double1d x2, rlc_double1d y2, mut_int nsections, long _xparams);

    public static class lstfitpiecewiselinearrdp_results
    {
        public double[] x2;
        public double[] y2;
        public int nsections;
    }
    public static lstfitpiecewiselinearrdp_results lstfitpiecewiselinearrdp(double[] x, double[] y, int n, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x2 = new rlc_double1d();
        rlc_double1d lcl_y2 = new rlc_double1d();
        mut_int lcl_nsections = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lstfitpiecewiselinearrdp(error_msg, x, y, n, eps, lcl_x2, lcl_y2, lcl_nsections, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lstfitpiecewiselinearrdp");
        lstfitpiecewiselinearrdp_results ret_tuple = new lstfitpiecewiselinearrdp_results();
        ret_tuple.x2 = lcl_x2.val;
        ret_tuple.y2 = lcl_y2.val;
        ret_tuple.nsections = lcl_nsections.val;
        return ret_tuple;
    }
    public static lstfitpiecewiselinearrdp_results lstfitpiecewiselinearrdp(double[] x, double[] y, int n, double eps) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_x2 = new rlc_double1d();
        rlc_double1d lcl_y2 = new rlc_double1d();
        mut_int lcl_nsections = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lstfitpiecewiselinearrdp(error_msg, x, y, n, eps, lcl_x2, lcl_y2, lcl_nsections, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lstfitpiecewiselinearrdp");
        lstfitpiecewiselinearrdp_results ret_tuple = new lstfitpiecewiselinearrdp_results();
        ret_tuple.x2 = lcl_x2.val;
        ret_tuple.y2 = lcl_y2.val;
        ret_tuple.nsections = lcl_nsections.val;
        return ret_tuple;
    }
    private static native int _jni_lstfitpiecewiselinearrdp(mut_string error_msg, double[] x, double[] y, int n, double eps, rlc_double1d x2, rlc_double1d y2, mut_int nsections, long _xparams);

    public static class polynomialfit_results
    {
        public barycentricinterpolant p;
        public polynomialfitreport rep;
    }
    public static polynomialfit_results polynomialfit(double[] x, double[] y, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialfit(error_msg, x, y, n, m, lcl_p, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialfit");
        polynomialfit_results ret_tuple = new polynomialfit_results();
        ret_tuple.p = new barycentricinterpolant(lcl_p.val);
        ret_tuple.rep = (polynomialfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static polynomialfit_results polynomialfit(double[] x, double[] y, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialfit(error_msg, x, y, n, m, lcl_p, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialfit");
        polynomialfit_results ret_tuple = new polynomialfit_results();
        ret_tuple.p = new barycentricinterpolant(lcl_p.val);
        ret_tuple.rep = (polynomialfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static polynomialfit_results polynomialfit(double[] x, double[] y, int m, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling polynomialfit(): looks like one of arguments has wrong size");
        n = x.length;
        return polynomialfit(x, y, n, m, _params);
    
    }
    
    public static polynomialfit_results polynomialfit(double[] x, double[] y, int m) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling polynomialfit(): looks like one of arguments has wrong size");
        n = x.length;
        return polynomialfit(x, y, n, m, _params);
    
    }
    private static native int _jni_polynomialfit(mut_string error_msg, double[] x, double[] y, int n, int m, mut_long p, mut_object rep, long _xparams);

    public static class polynomialfitwc_results
    {
        public barycentricinterpolant p;
        public polynomialfitreport rep;
    }
    public static polynomialfitwc_results polynomialfitwc(double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialfitwc(error_msg, x, y, w, n, xc, yc, dc, k, m, lcl_p, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialfitwc");
        polynomialfitwc_results ret_tuple = new polynomialfitwc_results();
        ret_tuple.p = new barycentricinterpolant(lcl_p.val);
        ret_tuple.rep = (polynomialfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static polynomialfitwc_results polynomialfitwc(double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_polynomialfitwc(error_msg, x, y, w, n, xc, yc, dc, k, m, lcl_p, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "polynomialfitwc");
        polynomialfitwc_results ret_tuple = new polynomialfitwc_results();
        ret_tuple.p = new barycentricinterpolant(lcl_p.val);
        ret_tuple.rep = (polynomialfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static polynomialfitwc_results polynomialfitwc(double[] x, double[] y, double[] w, double[] xc, double[] yc, int[] dc, int m, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int k;
        if( (x.length!=y.length) || (x.length!=w.length))
            throw new exception("Error while calling polynomialfitwc(): looks like one of arguments has wrong size");
        if( (xc.length!=yc.length) || (xc.length!=dc.length))
            throw new exception("Error while calling polynomialfitwc(): looks like one of arguments has wrong size");
        n = x.length;
        k = xc.length;
        return polynomialfitwc(x, y, w, n, xc, yc, dc, k, m, _params);
    
    }
    
    public static polynomialfitwc_results polynomialfitwc(double[] x, double[] y, double[] w, double[] xc, double[] yc, int[] dc, int m) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int k;
        if( (x.length!=y.length) || (x.length!=w.length))
            throw new exception("Error while calling polynomialfitwc(): looks like one of arguments has wrong size");
        if( (xc.length!=yc.length) || (xc.length!=dc.length))
            throw new exception("Error while calling polynomialfitwc(): looks like one of arguments has wrong size");
        n = x.length;
        k = xc.length;
        return polynomialfitwc(x, y, w, n, xc, yc, dc, k, m, _params);
    
    }
    private static native int _jni_polynomialfitwc(mut_string error_msg, double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m, mut_long p, mut_object rep, long _xparams);

    public static double logisticcalc4(double x, double a, double b, double c, double d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticcalc4(error_msg, lcl_result, x, a, b, c, d, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticcalc4");
        return lcl_result.val;
    }
    public static double logisticcalc4(double x, double a, double b, double c, double d) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticcalc4(error_msg, lcl_result, x, a, b, c, d, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticcalc4");
        return lcl_result.val;
    }
    private static native int _jni_logisticcalc4(mut_string error_msg, mut_double result, double x, double a, double b, double c, double d, long _xparams);

    public static double logisticcalc5(double x, double a, double b, double c, double d, double g, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticcalc5(error_msg, lcl_result, x, a, b, c, d, g, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticcalc5");
        return lcl_result.val;
    }
    public static double logisticcalc5(double x, double a, double b, double c, double d, double g) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticcalc5(error_msg, lcl_result, x, a, b, c, d, g, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticcalc5");
        return lcl_result.val;
    }
    private static native int _jni_logisticcalc5(mut_string error_msg, mut_double result, double x, double a, double b, double c, double d, double g, long _xparams);

    public static class logisticfit4_results
    {
        public double a;
        public double b;
        public double c;
        public double d;
        public lsfitreport rep;
    }
    public static logisticfit4_results logisticfit4(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit4(error_msg, x, y, n, lcl_a, lcl_b, lcl_c, lcl_d, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit4");
        logisticfit4_results ret_tuple = new logisticfit4_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static logisticfit4_results logisticfit4(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit4(error_msg, x, y, n, lcl_a, lcl_b, lcl_c, lcl_d, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit4");
        logisticfit4_results ret_tuple = new logisticfit4_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_logisticfit4(mut_string error_msg, double[] x, double[] y, int n, mut_double a, mut_double b, mut_double c, mut_double d, mut_object rep, long _xparams);

    public static class logisticfit4ec_results
    {
        public double a;
        public double b;
        public double c;
        public double d;
        public lsfitreport rep;
    }
    public static logisticfit4ec_results logisticfit4ec(double[] x, double[] y, int n, double cnstrleft, double cnstrright, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit4ec(error_msg, x, y, n, cnstrleft, cnstrright, lcl_a, lcl_b, lcl_c, lcl_d, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit4ec");
        logisticfit4ec_results ret_tuple = new logisticfit4ec_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static logisticfit4ec_results logisticfit4ec(double[] x, double[] y, int n, double cnstrleft, double cnstrright) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit4ec(error_msg, x, y, n, cnstrleft, cnstrright, lcl_a, lcl_b, lcl_c, lcl_d, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit4ec");
        logisticfit4ec_results ret_tuple = new logisticfit4ec_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_logisticfit4ec(mut_string error_msg, double[] x, double[] y, int n, double cnstrleft, double cnstrright, mut_double a, mut_double b, mut_double c, mut_double d, mut_object rep, long _xparams);

    public static class logisticfit5_results
    {
        public double a;
        public double b;
        public double c;
        public double d;
        public double g;
        public lsfitreport rep;
    }
    public static logisticfit5_results logisticfit5(double[] x, double[] y, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_double lcl_g = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit5(error_msg, x, y, n, lcl_a, lcl_b, lcl_c, lcl_d, lcl_g, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit5");
        logisticfit5_results ret_tuple = new logisticfit5_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.g = lcl_g.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static logisticfit5_results logisticfit5(double[] x, double[] y, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_double lcl_g = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit5(error_msg, x, y, n, lcl_a, lcl_b, lcl_c, lcl_d, lcl_g, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit5");
        logisticfit5_results ret_tuple = new logisticfit5_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.g = lcl_g.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_logisticfit5(mut_string error_msg, double[] x, double[] y, int n, mut_double a, mut_double b, mut_double c, mut_double d, mut_double g, mut_object rep, long _xparams);

    public static class logisticfit5ec_results
    {
        public double a;
        public double b;
        public double c;
        public double d;
        public double g;
        public lsfitreport rep;
    }
    public static logisticfit5ec_results logisticfit5ec(double[] x, double[] y, int n, double cnstrleft, double cnstrright, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_double lcl_g = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit5ec(error_msg, x, y, n, cnstrleft, cnstrright, lcl_a, lcl_b, lcl_c, lcl_d, lcl_g, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit5ec");
        logisticfit5ec_results ret_tuple = new logisticfit5ec_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.g = lcl_g.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static logisticfit5ec_results logisticfit5ec(double[] x, double[] y, int n, double cnstrleft, double cnstrright) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_double lcl_g = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit5ec(error_msg, x, y, n, cnstrleft, cnstrright, lcl_a, lcl_b, lcl_c, lcl_d, lcl_g, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit5ec");
        logisticfit5ec_results ret_tuple = new logisticfit5ec_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.g = lcl_g.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_logisticfit5ec(mut_string error_msg, double[] x, double[] y, int n, double cnstrleft, double cnstrright, mut_double a, mut_double b, mut_double c, mut_double d, mut_double g, mut_object rep, long _xparams);

    public static class logisticfit45x_results
    {
        public double a;
        public double b;
        public double c;
        public double d;
        public double g;
        public lsfitreport rep;
    }
    public static logisticfit45x_results logisticfit45x(double[] x, double[] y, int n, double cnstrleft, double cnstrright, boolean is4pl, double lambdav, double epsx, int rscnt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_double lcl_g = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit45x(error_msg, x, y, n, cnstrleft, cnstrright, is4pl, lambdav, epsx, rscnt, lcl_a, lcl_b, lcl_c, lcl_d, lcl_g, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit45x");
        logisticfit45x_results ret_tuple = new logisticfit45x_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.g = lcl_g.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static logisticfit45x_results logisticfit45x(double[] x, double[] y, int n, double cnstrleft, double cnstrright, boolean is4pl, double lambdav, double epsx, int rscnt) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_a = new mut_double();
        mut_double lcl_b = new mut_double();
        mut_double lcl_c = new mut_double();
        mut_double lcl_d = new mut_double();
        mut_double lcl_g = new mut_double();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_logisticfit45x(error_msg, x, y, n, cnstrleft, cnstrright, is4pl, lambdav, epsx, rscnt, lcl_a, lcl_b, lcl_c, lcl_d, lcl_g, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "logisticfit45x");
        logisticfit45x_results ret_tuple = new logisticfit45x_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.b = lcl_b.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.g = lcl_g.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_logisticfit45x(mut_string error_msg, double[] x, double[] y, int n, double cnstrleft, double cnstrright, boolean is4pl, double lambdav, double epsx, int rscnt, mut_double a, mut_double b, mut_double c, mut_double d, mut_double g, mut_object rep, long _xparams);

    public static class barycentricfitfloaterhormannwc_results
    {
        public barycentricinterpolant b;
        public barycentricfitreport rep;
    }
    public static barycentricfitfloaterhormannwc_results barycentricfitfloaterhormannwc(double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricfitfloaterhormannwc(error_msg, x, y, w, n, xc, yc, dc, k, m, lcl_b, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricfitfloaterhormannwc");
        barycentricfitfloaterhormannwc_results ret_tuple = new barycentricfitfloaterhormannwc_results();
        ret_tuple.b = new barycentricinterpolant(lcl_b.val);
        ret_tuple.rep = (barycentricfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static barycentricfitfloaterhormannwc_results barycentricfitfloaterhormannwc(double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricfitfloaterhormannwc(error_msg, x, y, w, n, xc, yc, dc, k, m, lcl_b, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricfitfloaterhormannwc");
        barycentricfitfloaterhormannwc_results ret_tuple = new barycentricfitfloaterhormannwc_results();
        ret_tuple.b = new barycentricinterpolant(lcl_b.val);
        ret_tuple.rep = (barycentricfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_barycentricfitfloaterhormannwc(mut_string error_msg, double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m, mut_long b, mut_object rep, long _xparams);

    public static class barycentricfitfloaterhormann_results
    {
        public barycentricinterpolant b;
        public barycentricfitreport rep;
    }
    public static barycentricfitfloaterhormann_results barycentricfitfloaterhormann(double[] x, double[] y, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricfitfloaterhormann(error_msg, x, y, n, m, lcl_b, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricfitfloaterhormann");
        barycentricfitfloaterhormann_results ret_tuple = new barycentricfitfloaterhormann_results();
        ret_tuple.b = new barycentricinterpolant(lcl_b.val);
        ret_tuple.rep = (barycentricfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static barycentricfitfloaterhormann_results barycentricfitfloaterhormann(double[] x, double[] y, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_b = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_barycentricfitfloaterhormann(error_msg, x, y, n, m, lcl_b, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "barycentricfitfloaterhormann");
        barycentricfitfloaterhormann_results ret_tuple = new barycentricfitfloaterhormann_results();
        ret_tuple.b = new barycentricinterpolant(lcl_b.val);
        ret_tuple.rep = (barycentricfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_barycentricfitfloaterhormann(mut_string error_msg, double[] x, double[] y, int n, int m, mut_long b, mut_object rep, long _xparams);

    public static class spline1dfitcubicwc_results
    {
        public spline1dinterpolant s;
        public spline1dfitreport rep;
    }
    public static spline1dfitcubicwc_results spline1dfitcubicwc(double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfitcubicwc(error_msg, x, y, w, n, xc, yc, dc, k, m, lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfitcubicwc");
        spline1dfitcubicwc_results ret_tuple = new spline1dfitcubicwc_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline1dfitcubicwc_results spline1dfitcubicwc(double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfitcubicwc(error_msg, x, y, w, n, xc, yc, dc, k, m, lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfitcubicwc");
        spline1dfitcubicwc_results ret_tuple = new spline1dfitcubicwc_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spline1dfitcubicwc_results spline1dfitcubicwc(double[] x, double[] y, double[] w, double[] xc, double[] yc, int[] dc, int m, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int k;
        if( (x.length!=y.length) || (x.length!=w.length))
            throw new exception("Error while calling spline1dfitcubicwc(): looks like one of arguments has wrong size");
        if( (xc.length!=yc.length) || (xc.length!=dc.length))
            throw new exception("Error while calling spline1dfitcubicwc(): looks like one of arguments has wrong size");
        n = x.length;
        k = xc.length;
        return spline1dfitcubicwc(x, y, w, n, xc, yc, dc, k, m, _params);
    
    }
    
    public static spline1dfitcubicwc_results spline1dfitcubicwc(double[] x, double[] y, double[] w, double[] xc, double[] yc, int[] dc, int m) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int k;
        if( (x.length!=y.length) || (x.length!=w.length))
            throw new exception("Error while calling spline1dfitcubicwc(): looks like one of arguments has wrong size");
        if( (xc.length!=yc.length) || (xc.length!=dc.length))
            throw new exception("Error while calling spline1dfitcubicwc(): looks like one of arguments has wrong size");
        n = x.length;
        k = xc.length;
        return spline1dfitcubicwc(x, y, w, n, xc, yc, dc, k, m, _params);
    
    }
    private static native int _jni_spline1dfitcubicwc(mut_string error_msg, double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m, mut_long s, mut_object rep, long _xparams);

    public static class spline1dfithermitewc_results
    {
        public spline1dinterpolant s;
        public spline1dfitreport rep;
    }
    public static spline1dfithermitewc_results spline1dfithermitewc(double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfithermitewc(error_msg, x, y, w, n, xc, yc, dc, k, m, lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfithermitewc");
        spline1dfithermitewc_results ret_tuple = new spline1dfithermitewc_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline1dfithermitewc_results spline1dfithermitewc(double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfithermitewc(error_msg, x, y, w, n, xc, yc, dc, k, m, lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfithermitewc");
        spline1dfithermitewc_results ret_tuple = new spline1dfithermitewc_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spline1dfithermitewc_results spline1dfithermitewc(double[] x, double[] y, double[] w, double[] xc, double[] yc, int[] dc, int m, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int k;
        if( (x.length!=y.length) || (x.length!=w.length))
            throw new exception("Error while calling spline1dfithermitewc(): looks like one of arguments has wrong size");
        if( (xc.length!=yc.length) || (xc.length!=dc.length))
            throw new exception("Error while calling spline1dfithermitewc(): looks like one of arguments has wrong size");
        n = x.length;
        k = xc.length;
        return spline1dfithermitewc(x, y, w, n, xc, yc, dc, k, m, _params);
    
    }
    
    public static spline1dfithermitewc_results spline1dfithermitewc(double[] x, double[] y, double[] w, double[] xc, double[] yc, int[] dc, int m) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int k;
        if( (x.length!=y.length) || (x.length!=w.length))
            throw new exception("Error while calling spline1dfithermitewc(): looks like one of arguments has wrong size");
        if( (xc.length!=yc.length) || (xc.length!=dc.length))
            throw new exception("Error while calling spline1dfithermitewc(): looks like one of arguments has wrong size");
        n = x.length;
        k = xc.length;
        return spline1dfithermitewc(x, y, w, n, xc, yc, dc, k, m, _params);
    
    }
    private static native int _jni_spline1dfithermitewc(mut_string error_msg, double[] x, double[] y, double[] w, int n, double[] xc, double[] yc, int[] dc, int k, int m, mut_long s, mut_object rep, long _xparams);

    public static class spline1dfithermitedeprecated_results
    {
        public spline1dinterpolant s;
        public spline1dfitreport rep;
    }
    public static spline1dfithermitedeprecated_results spline1dfithermitedeprecated(double[] x, double[] y, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfithermitedeprecated(error_msg, x, y, n, m, lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfithermitedeprecated");
        spline1dfithermitedeprecated_results ret_tuple = new spline1dfithermitedeprecated_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline1dfithermitedeprecated_results spline1dfithermitedeprecated(double[] x, double[] y, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfithermitedeprecated(error_msg, x, y, n, m, lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfithermitedeprecated");
        spline1dfithermitedeprecated_results ret_tuple = new spline1dfithermitedeprecated_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spline1dfithermitedeprecated_results spline1dfithermitedeprecated(double[] x, double[] y, int m, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfithermitedeprecated(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfithermitedeprecated(x, y, n, m, _params);
    
    }
    
    public static spline1dfithermitedeprecated_results spline1dfithermitedeprecated(double[] x, double[] y, int m) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfithermitedeprecated(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfithermitedeprecated(x, y, n, m, _params);
    
    }
    private static native int _jni_spline1dfithermitedeprecated(mut_string error_msg, double[] x, double[] y, int n, int m, mut_long s, mut_object rep, long _xparams);

    public static class lsfitlinearw_results
    {
        public double[] c;
        public lsfitreport rep;
    }
    public static lsfitlinearw_results lsfitlinearw(double[] y, double[] w, double[][] fmatrix, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitlinearw(error_msg, y, w, fmatrix, n, m, lcl_c, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitlinearw");
        lsfitlinearw_results ret_tuple = new lsfitlinearw_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lsfitlinearw_results lsfitlinearw(double[] y, double[] w, double[][] fmatrix, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitlinearw(error_msg, y, w, fmatrix, n, m, lcl_c, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitlinearw");
        lsfitlinearw_results ret_tuple = new lsfitlinearw_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static lsfitlinearw_results lsfitlinearw(double[] y, double[] w, double[][] fmatrix, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (y.length!=w.length) || (y.length!=ap.rows(fmatrix)))
            throw new exception("Error while calling lsfitlinearw(): looks like one of arguments has wrong size");
        n = y.length;
        m = ap.cols(fmatrix);
        return lsfitlinearw(y, w, fmatrix, n, m, _params);
    
    }
    
    public static lsfitlinearw_results lsfitlinearw(double[] y, double[] w, double[][] fmatrix) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (y.length!=w.length) || (y.length!=ap.rows(fmatrix)))
            throw new exception("Error while calling lsfitlinearw(): looks like one of arguments has wrong size");
        n = y.length;
        m = ap.cols(fmatrix);
        return lsfitlinearw(y, w, fmatrix, n, m, _params);
    
    }
    private static native int _jni_lsfitlinearw(mut_string error_msg, double[] y, double[] w, double[][] fmatrix, int n, int m, rlc_double1d c, mut_object rep, long _xparams);

    public static class lsfitlinearwc_results
    {
        public double[] c;
        public lsfitreport rep;
    }
    public static lsfitlinearwc_results lsfitlinearwc(double[] y, double[] w, double[][] fmatrix, double[][] cmatrix, int n, int m, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitlinearwc(error_msg, y, w, fmatrix, cmatrix, n, m, k, lcl_c, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitlinearwc");
        lsfitlinearwc_results ret_tuple = new lsfitlinearwc_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lsfitlinearwc_results lsfitlinearwc(double[] y, double[] w, double[][] fmatrix, double[][] cmatrix, int n, int m, int k) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitlinearwc(error_msg, y, w, fmatrix, cmatrix, n, m, k, lcl_c, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitlinearwc");
        lsfitlinearwc_results ret_tuple = new lsfitlinearwc_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static lsfitlinearwc_results lsfitlinearwc(double[] y, double[] w, double[][] fmatrix, double[][] cmatrix, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        int k;
        if( (y.length!=w.length) || (y.length!=ap.rows(fmatrix)))
            throw new exception("Error while calling lsfitlinearwc(): looks like one of arguments has wrong size");
        if( (ap.cols(fmatrix)!=ap.cols(cmatrix)-1))
            throw new exception("Error while calling lsfitlinearwc(): looks like one of arguments has wrong size");
        n = y.length;
        m = ap.cols(fmatrix);
        k = ap.rows(cmatrix);
        return lsfitlinearwc(y, w, fmatrix, cmatrix, n, m, k, _params);
    
    }
    
    public static lsfitlinearwc_results lsfitlinearwc(double[] y, double[] w, double[][] fmatrix, double[][] cmatrix) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        int k;
        if( (y.length!=w.length) || (y.length!=ap.rows(fmatrix)))
            throw new exception("Error while calling lsfitlinearwc(): looks like one of arguments has wrong size");
        if( (ap.cols(fmatrix)!=ap.cols(cmatrix)-1))
            throw new exception("Error while calling lsfitlinearwc(): looks like one of arguments has wrong size");
        n = y.length;
        m = ap.cols(fmatrix);
        k = ap.rows(cmatrix);
        return lsfitlinearwc(y, w, fmatrix, cmatrix, n, m, k, _params);
    
    }
    private static native int _jni_lsfitlinearwc(mut_string error_msg, double[] y, double[] w, double[][] fmatrix, double[][] cmatrix, int n, int m, int k, rlc_double1d c, mut_object rep, long _xparams);

    public static class lsfitlinear_results
    {
        public double[] c;
        public lsfitreport rep;
    }
    public static lsfitlinear_results lsfitlinear(double[] y, double[][] fmatrix, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitlinear(error_msg, y, fmatrix, n, m, lcl_c, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitlinear");
        lsfitlinear_results ret_tuple = new lsfitlinear_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lsfitlinear_results lsfitlinear(double[] y, double[][] fmatrix, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitlinear(error_msg, y, fmatrix, n, m, lcl_c, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitlinear");
        lsfitlinear_results ret_tuple = new lsfitlinear_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static lsfitlinear_results lsfitlinear(double[] y, double[][] fmatrix, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        if( (y.length!=ap.rows(fmatrix)))
            throw new exception("Error while calling lsfitlinear(): looks like one of arguments has wrong size");
        n = y.length;
        m = ap.cols(fmatrix);
        return lsfitlinear(y, fmatrix, n, m, _params);
    
    }
    
    public static lsfitlinear_results lsfitlinear(double[] y, double[][] fmatrix) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        if( (y.length!=ap.rows(fmatrix)))
            throw new exception("Error while calling lsfitlinear(): looks like one of arguments has wrong size");
        n = y.length;
        m = ap.cols(fmatrix);
        return lsfitlinear(y, fmatrix, n, m, _params);
    
    }
    private static native int _jni_lsfitlinear(mut_string error_msg, double[] y, double[][] fmatrix, int n, int m, rlc_double1d c, mut_object rep, long _xparams);

    public static class lsfitlinearc_results
    {
        public double[] c;
        public lsfitreport rep;
    }
    public static lsfitlinearc_results lsfitlinearc(double[] y, double[][] fmatrix, double[][] cmatrix, int n, int m, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitlinearc(error_msg, y, fmatrix, cmatrix, n, m, k, lcl_c, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitlinearc");
        lsfitlinearc_results ret_tuple = new lsfitlinearc_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lsfitlinearc_results lsfitlinearc(double[] y, double[][] fmatrix, double[][] cmatrix, int n, int m, int k) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitlinearc(error_msg, y, fmatrix, cmatrix, n, m, k, lcl_c, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitlinearc");
        lsfitlinearc_results ret_tuple = new lsfitlinearc_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static lsfitlinearc_results lsfitlinearc(double[] y, double[][] fmatrix, double[][] cmatrix, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        int k;
        if( (y.length!=ap.rows(fmatrix)))
            throw new exception("Error while calling lsfitlinearc(): looks like one of arguments has wrong size");
        if( (ap.cols(fmatrix)!=ap.cols(cmatrix)-1))
            throw new exception("Error while calling lsfitlinearc(): looks like one of arguments has wrong size");
        n = y.length;
        m = ap.cols(fmatrix);
        k = ap.rows(cmatrix);
        return lsfitlinearc(y, fmatrix, cmatrix, n, m, k, _params);
    
    }
    
    public static lsfitlinearc_results lsfitlinearc(double[] y, double[][] fmatrix, double[][] cmatrix) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        int k;
        if( (y.length!=ap.rows(fmatrix)))
            throw new exception("Error while calling lsfitlinearc(): looks like one of arguments has wrong size");
        if( (ap.cols(fmatrix)!=ap.cols(cmatrix)-1))
            throw new exception("Error while calling lsfitlinearc(): looks like one of arguments has wrong size");
        n = y.length;
        m = ap.cols(fmatrix);
        k = ap.rows(cmatrix);
        return lsfitlinearc(y, fmatrix, cmatrix, n, m, k, _params);
    
    }
    private static native int _jni_lsfitlinearc(mut_string error_msg, double[] y, double[][] fmatrix, double[][] cmatrix, int n, int m, int k, rlc_double1d c, mut_object rep, long _xparams);

    public static lsfitstate lsfitcreatewf(double[][] x, double[] y, double[] w, double[] c, int n, int m, int k, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitcreatewf(error_msg, x, y, w, c, n, m, k, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitcreatewf");
        return new lsfitstate(lcl_state.val);
    }
    public static lsfitstate lsfitcreatewf(double[][] x, double[] y, double[] w, double[] c, int n, int m, int k, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitcreatewf(error_msg, x, y, w, c, n, m, k, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitcreatewf");
        return new lsfitstate(lcl_state.val);
    }
            
    public static lsfitstate lsfitcreatewf(double[][] x, double[] y, double[] w, double[] c, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        int k;
        if( (ap.rows(x)!=y.length) || (ap.rows(x)!=w.length))
            throw new exception("Error while calling lsfitcreatewf(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m = ap.cols(x);
        k = c.length;
        return lsfitcreatewf(x, y, w, c, n, m, k, diffstep, _params);
    
    }
    
    public static lsfitstate lsfitcreatewf(double[][] x, double[] y, double[] w, double[] c, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        int k;
        if( (ap.rows(x)!=y.length) || (ap.rows(x)!=w.length))
            throw new exception("Error while calling lsfitcreatewf(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m = ap.cols(x);
        k = c.length;
        return lsfitcreatewf(x, y, w, c, n, m, k, diffstep, _params);
    
    }
    private static native int _jni_lsfitcreatewf(mut_string error_msg, double[][] x, double[] y, double[] w, double[] c, int n, int m, int k, double diffstep, mut_long state, long _xparams);

    public static lsfitstate lsfitcreatef(double[][] x, double[] y, double[] c, int n, int m, int k, double diffstep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitcreatef(error_msg, x, y, c, n, m, k, diffstep, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitcreatef");
        return new lsfitstate(lcl_state.val);
    }
    public static lsfitstate lsfitcreatef(double[][] x, double[] y, double[] c, int n, int m, int k, double diffstep) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitcreatef(error_msg, x, y, c, n, m, k, diffstep, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitcreatef");
        return new lsfitstate(lcl_state.val);
    }
            
    public static lsfitstate lsfitcreatef(double[][] x, double[] y, double[] c, double diffstep, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        int k;
        if( (ap.rows(x)!=y.length))
            throw new exception("Error while calling lsfitcreatef(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m = ap.cols(x);
        k = c.length;
        return lsfitcreatef(x, y, c, n, m, k, diffstep, _params);
    
    }
    
    public static lsfitstate lsfitcreatef(double[][] x, double[] y, double[] c, double diffstep) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        int k;
        if( (ap.rows(x)!=y.length))
            throw new exception("Error while calling lsfitcreatef(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m = ap.cols(x);
        k = c.length;
        return lsfitcreatef(x, y, c, n, m, k, diffstep, _params);
    
    }
    private static native int _jni_lsfitcreatef(mut_string error_msg, double[][] x, double[] y, double[] c, int n, int m, int k, double diffstep, mut_long state, long _xparams);

    public static lsfitstate lsfitcreatewfg(double[][] x, double[] y, double[] w, double[] c, int n, int m, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitcreatewfg(error_msg, x, y, w, c, n, m, k, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitcreatewfg");
        return new lsfitstate(lcl_state.val);
    }
    public static lsfitstate lsfitcreatewfg(double[][] x, double[] y, double[] w, double[] c, int n, int m, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitcreatewfg(error_msg, x, y, w, c, n, m, k, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitcreatewfg");
        return new lsfitstate(lcl_state.val);
    }
            
    public static lsfitstate lsfitcreatewfg(double[][] x, double[] y, double[] w, double[] c, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        int k;
        if( (ap.rows(x)!=y.length) || (ap.rows(x)!=w.length))
            throw new exception("Error while calling lsfitcreatewfg(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m = ap.cols(x);
        k = c.length;
        return lsfitcreatewfg(x, y, w, c, n, m, k, _params);
    
    }
    
    public static lsfitstate lsfitcreatewfg(double[][] x, double[] y, double[] w, double[] c) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        int k;
        if( (ap.rows(x)!=y.length) || (ap.rows(x)!=w.length))
            throw new exception("Error while calling lsfitcreatewfg(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m = ap.cols(x);
        k = c.length;
        return lsfitcreatewfg(x, y, w, c, n, m, k, _params);
    
    }
    private static native int _jni_lsfitcreatewfg(mut_string error_msg, double[][] x, double[] y, double[] w, double[] c, int n, int m, int k, mut_long state, long _xparams);

    public static lsfitstate lsfitcreatefg(double[][] x, double[] y, double[] c, int n, int m, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitcreatefg(error_msg, x, y, c, n, m, k, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitcreatefg");
        return new lsfitstate(lcl_state.val);
    }
    public static lsfitstate lsfitcreatefg(double[][] x, double[] y, double[] c, int n, int m, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitcreatefg(error_msg, x, y, c, n, m, k, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitcreatefg");
        return new lsfitstate(lcl_state.val);
    }
            
    public static lsfitstate lsfitcreatefg(double[][] x, double[] y, double[] c, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
        int k;
        if( (ap.rows(x)!=y.length))
            throw new exception("Error while calling lsfitcreatefg(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m = ap.cols(x);
        k = c.length;
        return lsfitcreatefg(x, y, c, n, m, k, _params);
    
    }
    
    public static lsfitstate lsfitcreatefg(double[][] x, double[] y, double[] c) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
        int k;
        if( (ap.rows(x)!=y.length))
            throw new exception("Error while calling lsfitcreatefg(): looks like one of arguments has wrong size");
        n = ap.rows(x);
        m = ap.cols(x);
        k = c.length;
        return lsfitcreatefg(x, y, c, n, m, k, _params);
    
    }
    private static native int _jni_lsfitcreatefg(mut_string error_msg, double[][] x, double[] y, double[] c, int n, int m, int k, mut_long state, long _xparams);

    public static void lsfitsetnonmonotonicsteps(lsfitstate state, int cnt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetnonmonotonicsteps() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetnonmonotonicsteps() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetnonmonotonicsteps(error_msg, state.get_ptr(), cnt, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetnonmonotonicsteps");
    }
    public static void lsfitsetnonmonotonicsteps(lsfitstate state, int cnt) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetnonmonotonicsteps() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetnonmonotonicsteps() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetnonmonotonicsteps(error_msg, state.get_ptr(), cnt, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetnonmonotonicsteps");
    }
    private static native int _jni_lsfitsetnonmonotonicsteps(mut_string error_msg, long state, int cnt, long _xparams);

    public static void lsfitsetcond(lsfitstate state, double epsx, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetcond(error_msg, state.get_ptr(), epsx, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetcond");
    }
    public static void lsfitsetcond(lsfitstate state, double epsx, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetcond() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetcond(error_msg, state.get_ptr(), epsx, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetcond");
    }
    private static native int _jni_lsfitsetcond(mut_string error_msg, long state, double epsx, int maxits, long _xparams);

    public static void lsfitsetstpmax(lsfitstate state, double stpmax, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetstpmax(error_msg, state.get_ptr(), stpmax, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetstpmax");
    }
    public static void lsfitsetstpmax(lsfitstate state, double stpmax) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetstpmax() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetstpmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetstpmax(error_msg, state.get_ptr(), stpmax, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetstpmax");
    }
    private static native int _jni_lsfitsetstpmax(mut_string error_msg, long state, double stpmax, long _xparams);

    public static void lsfitsetxrep(lsfitstate state, boolean needxrep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetxrep(error_msg, state.get_ptr(), needxrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetxrep");
    }
    public static void lsfitsetxrep(lsfitstate state, boolean needxrep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetxrep() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetxrep() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetxrep(error_msg, state.get_ptr(), needxrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetxrep");
    }
    private static native int _jni_lsfitsetxrep(mut_string error_msg, long state, boolean needxrep, long _xparams);

    public static void lsfitsetscale(lsfitstate state, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetscale(error_msg, state.get_ptr(), s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetscale");
    }
    public static void lsfitsetscale(lsfitstate state, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetscale() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetscale() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetscale(error_msg, state.get_ptr(), s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetscale");
    }
    private static native int _jni_lsfitsetscale(mut_string error_msg, long state, double[] s, long _xparams);

    public static void lsfitsetbc(lsfitstate state, double[] bndl, double[] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetbc(error_msg, state.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetbc");
    }
    public static void lsfitsetbc(lsfitstate state, double[] bndl, double[] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetbc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetbc(error_msg, state.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetbc");
    }
    private static native int _jni_lsfitsetbc(mut_string error_msg, long state, double[] bndl, double[] bndu, long _xparams);

    public static void lsfitsetlc(lsfitstate state, double[][] c, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetlc(error_msg, state.get_ptr(), c, ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetlc");
    }
    public static void lsfitsetlc(lsfitstate state, double[][] c, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetlc() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetlc(error_msg, state.get_ptr(), c, ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetlc");
    }
            
    public static void lsfitsetlc(lsfitstate state, double[][] c, int[] ct, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling lsfitsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        lsfitsetlc(state, c, ct, k, _params);
    
    }
    
    public static void lsfitsetlc(lsfitstate state, double[][] c, int[] ct) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling lsfitsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        lsfitsetlc(state, c, ct, k, _params);
    
    }
    private static native int _jni_lsfitsetlc(mut_string error_msg, long state, double[][] c, int[] ct, int k, long _xparams);

    public static boolean lsfititeration(lsfitstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfititeration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfititeration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfititeration(error_msg, lcl_result, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfititeration");
        return lcl_result.val;
    }
    public static boolean lsfititeration(lsfitstate state) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfititeration() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfititeration() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfititeration(error_msg, lcl_result, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfititeration");
        return lcl_result.val;
    }
    private static native int _jni_lsfititeration(mut_string error_msg, mut_boolean result, long state, long _xparams);

    public static void lsfitfit(lsfitstate state, ndimensional_pfunc func, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        lsfitfit(state, func, rep, obj, null);
    }
    
    public static void lsfitfit(lsfitstate state, ndimensional_pfunc func, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitfit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitfit() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( func==null )
        throw new alglib.exception("ALGLIB: error in 'lsfitfit()' (func is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "lsfit");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_lsfit_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "lsfit_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "lsfititeration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_lsfititeration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "lsfititeration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_lsfit, state.get_ptr());
                buffers.resize(request);
                if( request.request==3 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_3phase0(request, job_idx, null, func, null, null, buffers);
                    _process_v2request_3phase1(request);
                    request.send_reply();
                    continue;
                }
                if( request.request==5 )
                { 
                    int njobs = request.size*request.vars+request.size;
                    for(int job_idx=0; job_idx<njobs; job_idx++)
                        _process_v2request_5phase0(request, job_idx, null, func, null, null, buffers);
                    _process_v2request_5phase1(request);
                    request.send_reply();
                    continue;
                }if( request.request==4 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_4(request, qidx, null, func, null, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'lsfitfit' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    public static void lsfitfit(lsfitstate state, ndimensional_pfunc func, ndimensional_pgrad grad, ndimensional_rep rep, Object obj) throws alglib.exception
    {
        lsfitfit(state, func, grad, rep, obj, null);
    }
    
    public static void lsfitfit(lsfitstate state, ndimensional_pfunc func, ndimensional_pgrad grad, ndimensional_rep rep, Object obj, alglib.xparams _params) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitfit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitfit() points to deallocated ALGLIB object");
        long lcl_params = _params==null ? 0x0 : _params.get_val();
        long lcl_state  = state.get_ptr();
        mut_string error_msg = new mut_string();
        mut_int    error_code = new mut_int(X_OK);
        mut_boolean mut_result    = new mut_boolean();
    
        //
        // Check correctness of interfaces
        //
    if( func==null )
        throw new alglib.exception("ALGLIB: error in 'lsfitfit()' (func is null)");
    if( grad==null )
        throw new alglib.exception("ALGLIB: error in 'lsfitfit()' (grad is null)");
    
    
        //
        // Create RComm-V2 structures
        //
        _rcommv2_buffers buffers = new _rcommv2_buffers();
        _rcommv2_request request = new _rcommv2_request(obj, "lsfit");
    
        //
        // try/finally block in order to properly deallocate native resources after the session
        //
        try
        {
            
            //
            // Main loop
            //
            error_code.val = _jni_rcv2_lsfit_set_protocol_v2(error_msg, state.get_ptr(), lcl_params);
            if( error_code.val!=X_OK )
                handle_exception(error_code.val, error_msg.val, "lsfit_set_protocol_v2 failed");
            for(;;)
            {
                //
                // Check error code at the beginning of the iteration (to catch errors during previous rcomm request)
                //
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "lsfititeration");
                
                //
                // Call iteration function.
                // Terminate iterations if it returned false.
                //
                error_code.val = _jni_lsfititeration(error_msg, mut_result, state.get_ptr(), lcl_params);
                if( error_code.val!=X_OK )
                    handle_exception(error_code.val, error_msg.val, "lsfititeration");
                if( !mut_result.val )
                    break;
                
                //
                // Reverse communication interface V2
                //
                request.fetch(alglib::_jni_rcv2_fetch_lsfit, state.get_ptr());
                buffers.resize(request);
                if( request.request==2 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_2(request, qidx, null, grad, null, null, buffers);
                    request.send_reply();
                    continue;
                }if( request.request==4 )
                { 
                    for(int qidx=0; qidx<request.size; qidx++)
                        _process_v2request_4(request, qidx, null, func, null, null, buffers);
                    request.send_reply();
                    continue;
                }
                if( request.request==-1 )
                {
                    if( rep!=null )
                    {
                        for(int i=0; i<request.vars; i++)
                            buffers.tmpX[i] = request.reportx[i];
                        rep.report(buffers.tmpX, request.reportf, obj);
                    }
                    continue;
                }
                throw new alglib.exception("ALGLIB: error in 'lsfitfit' (some derivatives were not provided?)");
            }
        }
        finally
        {
            buffers.deallocate();
    
        }
    }
    private static native int _jni_rcv2_lsfit_set_protocol_v2(mut_string error_msg, long obj, long _xparams);
    private static native int _jni_rcv2_fetch_lsfit(_rcommv2_request request, long obj);

    public static class lsfitresults_results
    {
        public double[] c;
        public lsfitreport rep;
    }
    public static lsfitresults_results lsfitresults(lsfitstate state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitresults(error_msg, state.get_ptr(), lcl_c, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitresults");
        lsfitresults_results ret_tuple = new lsfitresults_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lsfitresults_results lsfitresults(lsfitstate state) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitresults() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitresults(error_msg, state.get_ptr(), lcl_c, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitresults");
        lsfitresults_results ret_tuple = new lsfitresults_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.rep = (lsfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_lsfitresults(mut_string error_msg, long state, rlc_double1d c, mut_object rep, long _xparams);

    public static void lsfitsetgradientcheck(lsfitstate state, double teststep, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetgradientcheck() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetgradientcheck() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetgradientcheck(error_msg, state.get_ptr(), teststep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetgradientcheck");
    }
    public static void lsfitsetgradientcheck(lsfitstate state, double teststep) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetgradientcheck() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of lsfitsetgradientcheck() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lsfitsetgradientcheck(error_msg, state.get_ptr(), teststep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lsfitsetgradientcheck");
    }
    private static native int _jni_lsfitsetgradientcheck(mut_string error_msg, long state, double teststep, long _xparams);

    
    
    //
    // Subpackage fitsphere
    //
    
    public static class fitspherels_results
    {
        public double[] cx;
        public double r;
    }
    public static fitspherels_results fitspherels(double[][] xy, int npoints, int nx, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_r = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspherels(error_msg, xy, npoints, nx, lcl_cx, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspherels");
        fitspherels_results ret_tuple = new fitspherels_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.r = lcl_r.val;
        return ret_tuple;
    }
    public static fitspherels_results fitspherels(double[][] xy, int npoints, int nx) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_r = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspherels(error_msg, xy, npoints, nx, lcl_cx, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspherels");
        fitspherels_results ret_tuple = new fitspherels_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.r = lcl_r.val;
        return ret_tuple;
    }
    private static native int _jni_fitspherels(mut_string error_msg, double[][] xy, int npoints, int nx, rlc_double1d cx, mut_double r, long _xparams);

    public static class fitspheremc_results
    {
        public double[] cx;
        public double rhi;
    }
    public static fitspheremc_results fitspheremc(double[][] xy, int npoints, int nx, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspheremc(error_msg, xy, npoints, nx, lcl_cx, lcl_rhi, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspheremc");
        fitspheremc_results ret_tuple = new fitspheremc_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    public static fitspheremc_results fitspheremc(double[][] xy, int npoints, int nx) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspheremc(error_msg, xy, npoints, nx, lcl_cx, lcl_rhi, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspheremc");
        fitspheremc_results ret_tuple = new fitspheremc_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    private static native int _jni_fitspheremc(mut_string error_msg, double[][] xy, int npoints, int nx, rlc_double1d cx, mut_double rhi, long _xparams);

    public static class fitspheremi_results
    {
        public double[] cx;
        public double rlo;
    }
    public static fitspheremi_results fitspheremi(double[][] xy, int npoints, int nx, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspheremi(error_msg, xy, npoints, nx, lcl_cx, lcl_rlo, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspheremi");
        fitspheremi_results ret_tuple = new fitspheremi_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        return ret_tuple;
    }
    public static fitspheremi_results fitspheremi(double[][] xy, int npoints, int nx) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspheremi(error_msg, xy, npoints, nx, lcl_cx, lcl_rlo, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspheremi");
        fitspheremi_results ret_tuple = new fitspheremi_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        return ret_tuple;
    }
    private static native int _jni_fitspheremi(mut_string error_msg, double[][] xy, int npoints, int nx, rlc_double1d cx, mut_double rlo, long _xparams);

    public static class fitspheremz_results
    {
        public double[] cx;
        public double rlo;
        public double rhi;
    }
    public static fitspheremz_results fitspheremz(double[][] xy, int npoints, int nx, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspheremz(error_msg, xy, npoints, nx, lcl_cx, lcl_rlo, lcl_rhi, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspheremz");
        fitspheremz_results ret_tuple = new fitspheremz_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    public static fitspheremz_results fitspheremz(double[][] xy, int npoints, int nx) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspheremz(error_msg, xy, npoints, nx, lcl_cx, lcl_rlo, lcl_rhi, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspheremz");
        fitspheremz_results ret_tuple = new fitspheremz_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    private static native int _jni_fitspheremz(mut_string error_msg, double[][] xy, int npoints, int nx, rlc_double1d cx, mut_double rlo, mut_double rhi, long _xparams);

    public static class fitspherex_results
    {
        public double[] cx;
        public double rlo;
        public double rhi;
    }
    public static fitspherex_results fitspherex(double[][] xy, int npoints, int nx, int problemtype, double epsx, int aulits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspherex(error_msg, xy, npoints, nx, problemtype, epsx, aulits, lcl_cx, lcl_rlo, lcl_rhi, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspherex");
        fitspherex_results ret_tuple = new fitspherex_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    public static fitspherex_results fitspherex(double[][] xy, int npoints, int nx, int problemtype, double epsx, int aulits) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fitspherex(error_msg, xy, npoints, nx, problemtype, epsx, aulits, lcl_cx, lcl_rlo, lcl_rhi, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fitspherex");
        fitspherex_results ret_tuple = new fitspherex_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    private static native int _jni_fitspherex(mut_string error_msg, double[][] xy, int npoints, int nx, int problemtype, double epsx, int aulits, rlc_double1d cx, mut_double rlo, mut_double rhi, long _xparams);

    
    
    //
    // Subpackage parametric
    //
    

    public static class pspline2interpolant extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected pspline2interpolant()
        {
            _ptr = 0;
            own  = false;
        }
        protected pspline2interpolant(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected pspline2interpolant(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new pspline2interpolant(0);
            return new pspline2interpolant(_jni_x_obj_copy_pspline2interpolant(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_pspline2interpolant(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_pspline2interpolant(long x);
    private static native void _jni_x_obj_free_pspline2interpolant(long x);


    public static class pspline3interpolant extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected pspline3interpolant()
        {
            _ptr = 0;
            own  = false;
        }
        protected pspline3interpolant(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected pspline3interpolant(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new pspline3interpolant(0);
            return new pspline3interpolant(_jni_x_obj_copy_pspline3interpolant(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_pspline3interpolant(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_pspline3interpolant(long x);
    private static native void _jni_x_obj_free_pspline3interpolant(long x);

    public static pspline2interpolant pspline2build(double[][] xy, int n, int st, int pt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2build(error_msg, xy, n, st, pt, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2build");
        return new pspline2interpolant(lcl_p.val);
    }
    public static pspline2interpolant pspline2build(double[][] xy, int n, int st, int pt) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2build(error_msg, xy, n, st, pt, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2build");
        return new pspline2interpolant(lcl_p.val);
    }
    private static native int _jni_pspline2build(mut_string error_msg, double[][] xy, int n, int st, int pt, mut_long p, long _xparams);

    public static pspline3interpolant pspline3build(double[][] xy, int n, int st, int pt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3build(error_msg, xy, n, st, pt, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3build");
        return new pspline3interpolant(lcl_p.val);
    }
    public static pspline3interpolant pspline3build(double[][] xy, int n, int st, int pt) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3build(error_msg, xy, n, st, pt, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3build");
        return new pspline3interpolant(lcl_p.val);
    }
    private static native int _jni_pspline3build(mut_string error_msg, double[][] xy, int n, int st, int pt, mut_long p, long _xparams);

    public static pspline2interpolant pspline2buildperiodic(double[][] xy, int n, int st, int pt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2buildperiodic(error_msg, xy, n, st, pt, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2buildperiodic");
        return new pspline2interpolant(lcl_p.val);
    }
    public static pspline2interpolant pspline2buildperiodic(double[][] xy, int n, int st, int pt) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2buildperiodic(error_msg, xy, n, st, pt, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2buildperiodic");
        return new pspline2interpolant(lcl_p.val);
    }
    private static native int _jni_pspline2buildperiodic(mut_string error_msg, double[][] xy, int n, int st, int pt, mut_long p, long _xparams);

    public static pspline3interpolant pspline3buildperiodic(double[][] xy, int n, int st, int pt, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3buildperiodic(error_msg, xy, n, st, pt, lcl_p, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3buildperiodic");
        return new pspline3interpolant(lcl_p.val);
    }
    public static pspline3interpolant pspline3buildperiodic(double[][] xy, int n, int st, int pt) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_p = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3buildperiodic(error_msg, xy, n, st, pt, lcl_p, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3buildperiodic");
        return new pspline3interpolant(lcl_p.val);
    }
    private static native int _jni_pspline3buildperiodic(mut_string error_msg, double[][] xy, int n, int st, int pt, mut_long p, long _xparams);

    public static class pspline2parametervalues_results
    {
        public int n;
        public double[] t;
    }
    public static pspline2parametervalues_results pspline2parametervalues(pspline2interpolant p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        rlc_double1d lcl_t = new rlc_double1d();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2parametervalues() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2parametervalues() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2parametervalues(error_msg, p.get_ptr(), lcl_n, lcl_t, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2parametervalues");
        pspline2parametervalues_results ret_tuple = new pspline2parametervalues_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.t = lcl_t.val;
        return ret_tuple;
    }
    public static pspline2parametervalues_results pspline2parametervalues(pspline2interpolant p) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        rlc_double1d lcl_t = new rlc_double1d();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2parametervalues() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2parametervalues() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2parametervalues(error_msg, p.get_ptr(), lcl_n, lcl_t, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2parametervalues");
        pspline2parametervalues_results ret_tuple = new pspline2parametervalues_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.t = lcl_t.val;
        return ret_tuple;
    }
    private static native int _jni_pspline2parametervalues(mut_string error_msg, long p, mut_int n, rlc_double1d t, long _xparams);

    public static class pspline3parametervalues_results
    {
        public int n;
        public double[] t;
    }
    public static pspline3parametervalues_results pspline3parametervalues(pspline3interpolant p, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        rlc_double1d lcl_t = new rlc_double1d();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3parametervalues() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3parametervalues() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3parametervalues(error_msg, p.get_ptr(), lcl_n, lcl_t, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3parametervalues");
        pspline3parametervalues_results ret_tuple = new pspline3parametervalues_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.t = lcl_t.val;
        return ret_tuple;
    }
    public static pspline3parametervalues_results pspline3parametervalues(pspline3interpolant p) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        rlc_double1d lcl_t = new rlc_double1d();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3parametervalues() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3parametervalues() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3parametervalues(error_msg, p.get_ptr(), lcl_n, lcl_t, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3parametervalues");
        pspline3parametervalues_results ret_tuple = new pspline3parametervalues_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.t = lcl_t.val;
        return ret_tuple;
    }
    private static native int _jni_pspline3parametervalues(mut_string error_msg, long p, mut_int n, rlc_double1d t, long _xparams);

    public static class pspline2calc_results
    {
        public double x;
        public double y;
    }
    public static pspline2calc_results pspline2calc(pspline2interpolant p, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2calc() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2calc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2calc(error_msg, p.get_ptr(), t, lcl_x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2calc");
        pspline2calc_results ret_tuple = new pspline2calc_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        return ret_tuple;
    }
    public static pspline2calc_results pspline2calc(pspline2interpolant p, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2calc() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2calc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2calc(error_msg, p.get_ptr(), t, lcl_x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2calc");
        pspline2calc_results ret_tuple = new pspline2calc_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        return ret_tuple;
    }
    private static native int _jni_pspline2calc(mut_string error_msg, long p, double t, mut_double x, mut_double y, long _xparams);

    public static class pspline3calc_results
    {
        public double x;
        public double y;
        public double z;
    }
    public static pspline3calc_results pspline3calc(pspline3interpolant p, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_z = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3calc() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3calc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3calc(error_msg, p.get_ptr(), t, lcl_x, lcl_y, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3calc");
        pspline3calc_results ret_tuple = new pspline3calc_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static pspline3calc_results pspline3calc(pspline3interpolant p, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_z = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3calc() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3calc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3calc(error_msg, p.get_ptr(), t, lcl_x, lcl_y, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3calc");
        pspline3calc_results ret_tuple = new pspline3calc_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_pspline3calc(mut_string error_msg, long p, double t, mut_double x, mut_double y, mut_double z, long _xparams);

    public static class pspline2tangent_results
    {
        public double x;
        public double y;
    }
    public static pspline2tangent_results pspline2tangent(pspline2interpolant p, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2tangent() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2tangent() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2tangent(error_msg, p.get_ptr(), t, lcl_x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2tangent");
        pspline2tangent_results ret_tuple = new pspline2tangent_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        return ret_tuple;
    }
    public static pspline2tangent_results pspline2tangent(pspline2interpolant p, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2tangent() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2tangent() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2tangent(error_msg, p.get_ptr(), t, lcl_x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2tangent");
        pspline2tangent_results ret_tuple = new pspline2tangent_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        return ret_tuple;
    }
    private static native int _jni_pspline2tangent(mut_string error_msg, long p, double t, mut_double x, mut_double y, long _xparams);

    public static class pspline3tangent_results
    {
        public double x;
        public double y;
        public double z;
    }
    public static pspline3tangent_results pspline3tangent(pspline3interpolant p, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_z = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3tangent() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3tangent() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3tangent(error_msg, p.get_ptr(), t, lcl_x, lcl_y, lcl_z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3tangent");
        pspline3tangent_results ret_tuple = new pspline3tangent_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    public static pspline3tangent_results pspline3tangent(pspline3interpolant p, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_z = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3tangent() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3tangent() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3tangent(error_msg, p.get_ptr(), t, lcl_x, lcl_y, lcl_z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3tangent");
        pspline3tangent_results ret_tuple = new pspline3tangent_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.z = lcl_z.val;
        return ret_tuple;
    }
    private static native int _jni_pspline3tangent(mut_string error_msg, long p, double t, mut_double x, mut_double y, mut_double z, long _xparams);

    public static class pspline2diff_results
    {
        public double x;
        public double dx;
        public double y;
        public double dy;
    }
    public static pspline2diff_results pspline2diff(pspline2interpolant p, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_dx = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2diff() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2diff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2diff(error_msg, p.get_ptr(), t, lcl_x, lcl_dx, lcl_y, lcl_dy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2diff");
        pspline2diff_results ret_tuple = new pspline2diff_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.dx = lcl_dx.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        return ret_tuple;
    }
    public static pspline2diff_results pspline2diff(pspline2interpolant p, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_dx = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2diff() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2diff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2diff(error_msg, p.get_ptr(), t, lcl_x, lcl_dx, lcl_y, lcl_dy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2diff");
        pspline2diff_results ret_tuple = new pspline2diff_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.dx = lcl_dx.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        return ret_tuple;
    }
    private static native int _jni_pspline2diff(mut_string error_msg, long p, double t, mut_double x, mut_double dx, mut_double y, mut_double dy, long _xparams);

    public static class pspline3diff_results
    {
        public double x;
        public double dx;
        public double y;
        public double dy;
        public double z;
        public double dz;
    }
    public static pspline3diff_results pspline3diff(pspline3interpolant p, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_dx = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy = new mut_double();
        mut_double lcl_z = new mut_double();
        mut_double lcl_dz = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3diff() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3diff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3diff(error_msg, p.get_ptr(), t, lcl_x, lcl_dx, lcl_y, lcl_dy, lcl_z, lcl_dz, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3diff");
        pspline3diff_results ret_tuple = new pspline3diff_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.dx = lcl_dx.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.dz = lcl_dz.val;
        return ret_tuple;
    }
    public static pspline3diff_results pspline3diff(pspline3interpolant p, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_dx = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy = new mut_double();
        mut_double lcl_z = new mut_double();
        mut_double lcl_dz = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3diff() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3diff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3diff(error_msg, p.get_ptr(), t, lcl_x, lcl_dx, lcl_y, lcl_dy, lcl_z, lcl_dz, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3diff");
        pspline3diff_results ret_tuple = new pspline3diff_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.dx = lcl_dx.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.dz = lcl_dz.val;
        return ret_tuple;
    }
    private static native int _jni_pspline3diff(mut_string error_msg, long p, double t, mut_double x, mut_double dx, mut_double y, mut_double dy, mut_double z, mut_double dz, long _xparams);

    public static class pspline2diff2_results
    {
        public double x;
        public double dx;
        public double d2x;
        public double y;
        public double dy;
        public double d2y;
    }
    public static pspline2diff2_results pspline2diff2(pspline2interpolant p, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_dx = new mut_double();
        mut_double lcl_d2x = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy = new mut_double();
        mut_double lcl_d2y = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2diff2() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2diff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2diff2(error_msg, p.get_ptr(), t, lcl_x, lcl_dx, lcl_d2x, lcl_y, lcl_dy, lcl_d2y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2diff2");
        pspline2diff2_results ret_tuple = new pspline2diff2_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.dx = lcl_dx.val;
        ret_tuple.d2x = lcl_d2x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        return ret_tuple;
    }
    public static pspline2diff2_results pspline2diff2(pspline2interpolant p, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_dx = new mut_double();
        mut_double lcl_d2x = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy = new mut_double();
        mut_double lcl_d2y = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2diff2() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2diff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2diff2(error_msg, p.get_ptr(), t, lcl_x, lcl_dx, lcl_d2x, lcl_y, lcl_dy, lcl_d2y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2diff2");
        pspline2diff2_results ret_tuple = new pspline2diff2_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.dx = lcl_dx.val;
        ret_tuple.d2x = lcl_d2x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        return ret_tuple;
    }
    private static native int _jni_pspline2diff2(mut_string error_msg, long p, double t, mut_double x, mut_double dx, mut_double d2x, mut_double y, mut_double dy, mut_double d2y, long _xparams);

    public static class pspline3diff2_results
    {
        public double x;
        public double dx;
        public double d2x;
        public double y;
        public double dy;
        public double d2y;
        public double z;
        public double dz;
        public double d2z;
    }
    public static pspline3diff2_results pspline3diff2(pspline3interpolant p, double t, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_dx = new mut_double();
        mut_double lcl_d2x = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy = new mut_double();
        mut_double lcl_d2y = new mut_double();
        mut_double lcl_z = new mut_double();
        mut_double lcl_dz = new mut_double();
        mut_double lcl_d2z = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3diff2() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3diff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3diff2(error_msg, p.get_ptr(), t, lcl_x, lcl_dx, lcl_d2x, lcl_y, lcl_dy, lcl_d2y, lcl_z, lcl_dz, lcl_d2z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3diff2");
        pspline3diff2_results ret_tuple = new pspline3diff2_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.dx = lcl_dx.val;
        ret_tuple.d2x = lcl_d2x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.dz = lcl_dz.val;
        ret_tuple.d2z = lcl_d2z.val;
        return ret_tuple;
    }
    public static pspline3diff2_results pspline3diff2(pspline3interpolant p, double t) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_x = new mut_double();
        mut_double lcl_dx = new mut_double();
        mut_double lcl_d2x = new mut_double();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy = new mut_double();
        mut_double lcl_d2y = new mut_double();
        mut_double lcl_z = new mut_double();
        mut_double lcl_dz = new mut_double();
        mut_double lcl_d2z = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3diff2() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3diff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3diff2(error_msg, p.get_ptr(), t, lcl_x, lcl_dx, lcl_d2x, lcl_y, lcl_dy, lcl_d2y, lcl_z, lcl_dz, lcl_d2z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3diff2");
        pspline3diff2_results ret_tuple = new pspline3diff2_results();
        ret_tuple.x = lcl_x.val;
        ret_tuple.dx = lcl_dx.val;
        ret_tuple.d2x = lcl_d2x.val;
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        ret_tuple.z = lcl_z.val;
        ret_tuple.dz = lcl_dz.val;
        ret_tuple.d2z = lcl_d2z.val;
        return ret_tuple;
    }
    private static native int _jni_pspline3diff2(mut_string error_msg, long p, double t, mut_double x, mut_double dx, mut_double d2x, mut_double y, mut_double dy, mut_double d2y, mut_double z, mut_double dz, mut_double d2z, long _xparams);

    public static double pspline2arclength(pspline2interpolant p, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2arclength() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2arclength() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2arclength(error_msg, lcl_result, p.get_ptr(), a, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2arclength");
        return lcl_result.val;
    }
    public static double pspline2arclength(pspline2interpolant p, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2arclength() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline2arclength() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline2arclength(error_msg, lcl_result, p.get_ptr(), a, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline2arclength");
        return lcl_result.val;
    }
    private static native int _jni_pspline2arclength(mut_string error_msg, mut_double result, long p, double a, double b, long _xparams);

    public static double pspline3arclength(pspline3interpolant p, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3arclength() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3arclength() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3arclength(error_msg, lcl_result, p.get_ptr(), a, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3arclength");
        return lcl_result.val;
    }
    public static double pspline3arclength(pspline3interpolant p, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( p==null )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3arclength() is null");
        if( p.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'p' of pspline3arclength() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pspline3arclength(error_msg, lcl_result, p.get_ptr(), a, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pspline3arclength");
        return lcl_result.val;
    }
    private static native int _jni_pspline3arclength(mut_string error_msg, mut_double result, long p, double a, double b, long _xparams);

    public static class parametricrdpfixed_results
    {
        public double[][] x2;
        public int[] idx2;
        public int nsections;
    }
    public static parametricrdpfixed_results parametricrdpfixed(double[][] x, int n, int d, int stopm, double stopeps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x2 = new rlc_double2d();
        rlc_int1d lcl_idx2 = new rlc_int1d();
        mut_int lcl_nsections = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_parametricrdpfixed(error_msg, x, n, d, stopm, stopeps, lcl_x2, lcl_idx2, lcl_nsections, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "parametricrdpfixed");
        parametricrdpfixed_results ret_tuple = new parametricrdpfixed_results();
        ret_tuple.x2 = lcl_x2.val;
        ret_tuple.idx2 = lcl_idx2.val;
        ret_tuple.nsections = lcl_nsections.val;
        return ret_tuple;
    }
    public static parametricrdpfixed_results parametricrdpfixed(double[][] x, int n, int d, int stopm, double stopeps) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_x2 = new rlc_double2d();
        rlc_int1d lcl_idx2 = new rlc_int1d();
        mut_int lcl_nsections = new mut_int();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_parametricrdpfixed(error_msg, x, n, d, stopm, stopeps, lcl_x2, lcl_idx2, lcl_nsections, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "parametricrdpfixed");
        parametricrdpfixed_results ret_tuple = new parametricrdpfixed_results();
        ret_tuple.x2 = lcl_x2.val;
        ret_tuple.idx2 = lcl_idx2.val;
        ret_tuple.nsections = lcl_nsections.val;
        return ret_tuple;
    }
    private static native int _jni_parametricrdpfixed(mut_string error_msg, double[][] x, int n, int d, int stopm, double stopeps, rlc_double2d x2, rlc_int1d idx2, mut_int nsections, long _xparams);

    
    
    //
    // Subpackage rbfv1
    //
    
    
    
    //
    // Subpackage rbfv3farfields
    //
    
    
    
    //
    // Subpackage rbfv3
    //
    
    
    
    //
    // Subpackage spline2d
    //
    

    public static class spline2dinterpolant extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected spline2dinterpolant()
        {
            _ptr = 0;
            own  = false;
        }
        protected spline2dinterpolant(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected spline2dinterpolant(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new spline2dinterpolant(0);
            return new spline2dinterpolant(_jni_x_obj_copy_spline2dinterpolant(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_spline2dinterpolant(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_spline2dinterpolant(long x);
    private static native void _jni_x_obj_free_spline2dinterpolant(long x);


    public static class spline2dbuilder extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected spline2dbuilder()
        {
            _ptr = 0;
            own  = false;
        }
        protected spline2dbuilder(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected spline2dbuilder(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new spline2dbuilder(0);
            return new spline2dbuilder(_jni_x_obj_copy_spline2dbuilder(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_spline2dbuilder(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_spline2dbuilder(long x);
    private static native void _jni_x_obj_free_spline2dbuilder(long x);


        public static class spline2dfitreport extends alglibobject
        {
            public double rmserror;
            public double avgerror;
            public double maxerror;
            public double r2;
            public alglibobject make_copy()
            {
                spline2dfitreport dst = new spline2dfitreport();
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.maxerror = maxerror;
                dst.r2 = r2;
                return dst;
            }
        }

    private static native int _jni_spline2dserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String spline2dserialize(spline2dinterpolant obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of spline2dserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of spline2dserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_spline2dserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_spline2dunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static spline2dinterpolant spline2dunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of spline2dunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_spline2dunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dunserialize");
        return new spline2dinterpolant(lcl_result.val);
    }

    public static double spline2dcalc(spline2dinterpolant c, double x, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalc() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcalc(error_msg, lcl_result, c.get_ptr(), x, y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcalc");
        return lcl_result.val;
    }
    public static double spline2dcalc(spline2dinterpolant c, double x, double y) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalc() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcalc(error_msg, lcl_result, c.get_ptr(), x, y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcalc");
        return lcl_result.val;
    }
    private static native int _jni_spline2dcalc(mut_string error_msg, mut_double result, long c, double x, double y, long _xparams);

    public static class spline2ddiff_results
    {
        public double f;
        public double fx;
        public double fy;
    }
    public static spline2ddiff_results spline2ddiff(spline2dinterpolant c, double x, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_fx = new mut_double();
        mut_double lcl_fy = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2ddiff(error_msg, c.get_ptr(), x, y, lcl_f, lcl_fx, lcl_fy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2ddiff");
        spline2ddiff_results ret_tuple = new spline2ddiff_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.fx = lcl_fx.val;
        ret_tuple.fy = lcl_fy.val;
        return ret_tuple;
    }
    public static spline2ddiff_results spline2ddiff(spline2dinterpolant c, double x, double y) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_fx = new mut_double();
        mut_double lcl_fy = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2ddiff(error_msg, c.get_ptr(), x, y, lcl_f, lcl_fx, lcl_fy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2ddiff");
        spline2ddiff_results ret_tuple = new spline2ddiff_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.fx = lcl_fx.val;
        ret_tuple.fy = lcl_fy.val;
        return ret_tuple;
    }
    private static native int _jni_spline2ddiff(mut_string error_msg, long c, double x, double y, mut_double f, mut_double fx, mut_double fy, long _xparams);

    public static class spline2ddiff2_results
    {
        public double f;
        public double fx;
        public double fy;
        public double fxx;
        public double fxy;
        public double fyy;
    }
    public static spline2ddiff2_results spline2ddiff2(spline2dinterpolant c, double x, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_fx = new mut_double();
        mut_double lcl_fy = new mut_double();
        mut_double lcl_fxx = new mut_double();
        mut_double lcl_fxy = new mut_double();
        mut_double lcl_fyy = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff2() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2ddiff2(error_msg, c.get_ptr(), x, y, lcl_f, lcl_fx, lcl_fy, lcl_fxx, lcl_fxy, lcl_fyy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2ddiff2");
        spline2ddiff2_results ret_tuple = new spline2ddiff2_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.fx = lcl_fx.val;
        ret_tuple.fy = lcl_fy.val;
        ret_tuple.fxx = lcl_fxx.val;
        ret_tuple.fxy = lcl_fxy.val;
        ret_tuple.fyy = lcl_fyy.val;
        return ret_tuple;
    }
    public static spline2ddiff2_results spline2ddiff2(spline2dinterpolant c, double x, double y) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_fx = new mut_double();
        mut_double lcl_fy = new mut_double();
        mut_double lcl_fxx = new mut_double();
        mut_double lcl_fxy = new mut_double();
        mut_double lcl_fyy = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff2() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2ddiff2(error_msg, c.get_ptr(), x, y, lcl_f, lcl_fx, lcl_fy, lcl_fxx, lcl_fxy, lcl_fyy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2ddiff2");
        spline2ddiff2_results ret_tuple = new spline2ddiff2_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.fx = lcl_fx.val;
        ret_tuple.fy = lcl_fy.val;
        ret_tuple.fxx = lcl_fxx.val;
        ret_tuple.fxy = lcl_fxy.val;
        ret_tuple.fyy = lcl_fyy.val;
        return ret_tuple;
    }
    private static native int _jni_spline2ddiff2(mut_string error_msg, long c, double x, double y, mut_double f, mut_double fx, mut_double fy, mut_double fxx, mut_double fxy, mut_double fyy, long _xparams);

    public static double[] spline2dcalcvbuf(spline2dinterpolant c, double x, double y, double[] f, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_f = new rlc_double1d(f);
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcalcvbuf(error_msg, c.get_ptr(), x, y, lcl_f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcalcvbuf");
        return lcl_f.val;
    }
    public static double[] spline2dcalcvbuf(spline2dinterpolant c, double x, double y, double[] f) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_f = new rlc_double1d(f);
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcalcvbuf(error_msg, c.get_ptr(), x, y, lcl_f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcalcvbuf");
        return lcl_f.val;
    }
    private static native int _jni_spline2dcalcvbuf(mut_string error_msg, long c, double x, double y, rlc_double1d f, long _xparams);

    public static double spline2dcalcvi(spline2dinterpolant c, double x, double y, int i, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcvi() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcvi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcalcvi(error_msg, lcl_result, c.get_ptr(), x, y, i, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcalcvi");
        return lcl_result.val;
    }
    public static double spline2dcalcvi(spline2dinterpolant c, double x, double y, int i) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcvi() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcvi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcalcvi(error_msg, lcl_result, c.get_ptr(), x, y, i, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcalcvi");
        return lcl_result.val;
    }
    private static native int _jni_spline2dcalcvi(mut_string error_msg, mut_double result, long c, double x, double y, int i, long _xparams);

    public static double[] spline2dcalcv(spline2dinterpolant c, double x, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_f = new rlc_double1d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcv() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcalcv(error_msg, c.get_ptr(), x, y, lcl_f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcalcv");
        return lcl_f.val;
    }
    public static double[] spline2dcalcv(spline2dinterpolant c, double x, double y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_f = new rlc_double1d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcv() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcalcv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcalcv(error_msg, c.get_ptr(), x, y, lcl_f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcalcv");
        return lcl_f.val;
    }
    private static native int _jni_spline2dcalcv(mut_string error_msg, long c, double x, double y, rlc_double1d f, long _xparams);

    public static class spline2ddiffvi_results
    {
        public double f;
        public double fx;
        public double fy;
    }
    public static spline2ddiffvi_results spline2ddiffvi(spline2dinterpolant c, double x, double y, int i, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_fx = new mut_double();
        mut_double lcl_fy = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiffvi() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiffvi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2ddiffvi(error_msg, c.get_ptr(), x, y, i, lcl_f, lcl_fx, lcl_fy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2ddiffvi");
        spline2ddiffvi_results ret_tuple = new spline2ddiffvi_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.fx = lcl_fx.val;
        ret_tuple.fy = lcl_fy.val;
        return ret_tuple;
    }
    public static spline2ddiffvi_results spline2ddiffvi(spline2dinterpolant c, double x, double y, int i) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_fx = new mut_double();
        mut_double lcl_fy = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiffvi() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiffvi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2ddiffvi(error_msg, c.get_ptr(), x, y, i, lcl_f, lcl_fx, lcl_fy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2ddiffvi");
        spline2ddiffvi_results ret_tuple = new spline2ddiffvi_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.fx = lcl_fx.val;
        ret_tuple.fy = lcl_fy.val;
        return ret_tuple;
    }
    private static native int _jni_spline2ddiffvi(mut_string error_msg, long c, double x, double y, int i, mut_double f, mut_double fx, mut_double fy, long _xparams);

    public static class spline2ddiff2vi_results
    {
        public double f;
        public double fx;
        public double fy;
        public double fxx;
        public double fxy;
        public double fyy;
    }
    public static spline2ddiff2vi_results spline2ddiff2vi(spline2dinterpolant c, double x, double y, int i, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_fx = new mut_double();
        mut_double lcl_fy = new mut_double();
        mut_double lcl_fxx = new mut_double();
        mut_double lcl_fxy = new mut_double();
        mut_double lcl_fyy = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff2vi() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff2vi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2ddiff2vi(error_msg, c.get_ptr(), x, y, i, lcl_f, lcl_fx, lcl_fy, lcl_fxx, lcl_fxy, lcl_fyy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2ddiff2vi");
        spline2ddiff2vi_results ret_tuple = new spline2ddiff2vi_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.fx = lcl_fx.val;
        ret_tuple.fy = lcl_fy.val;
        ret_tuple.fxx = lcl_fxx.val;
        ret_tuple.fxy = lcl_fxy.val;
        ret_tuple.fyy = lcl_fyy.val;
        return ret_tuple;
    }
    public static spline2ddiff2vi_results spline2ddiff2vi(spline2dinterpolant c, double x, double y, int i) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_fx = new mut_double();
        mut_double lcl_fy = new mut_double();
        mut_double lcl_fxx = new mut_double();
        mut_double lcl_fxy = new mut_double();
        mut_double lcl_fyy = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff2vi() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2ddiff2vi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2ddiff2vi(error_msg, c.get_ptr(), x, y, i, lcl_f, lcl_fx, lcl_fy, lcl_fxx, lcl_fxy, lcl_fyy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2ddiff2vi");
        spline2ddiff2vi_results ret_tuple = new spline2ddiff2vi_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.fx = lcl_fx.val;
        ret_tuple.fy = lcl_fy.val;
        ret_tuple.fxx = lcl_fxx.val;
        ret_tuple.fxy = lcl_fxy.val;
        ret_tuple.fyy = lcl_fyy.val;
        return ret_tuple;
    }
    private static native int _jni_spline2ddiff2vi(mut_string error_msg, long c, double x, double y, int i, mut_double f, mut_double fx, mut_double fy, mut_double fxx, mut_double fxy, mut_double fyy, long _xparams);

    public static void spline2dlintransxy(spline2dinterpolant c, double ax, double bx, double ay, double by, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dlintransxy() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dlintransxy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dlintransxy(error_msg, c.get_ptr(), ax, bx, ay, by, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dlintransxy");
    }
    public static void spline2dlintransxy(spline2dinterpolant c, double ax, double bx, double ay, double by) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dlintransxy() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dlintransxy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dlintransxy(error_msg, c.get_ptr(), ax, bx, ay, by, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dlintransxy");
    }
    private static native int _jni_spline2dlintransxy(mut_string error_msg, long c, double ax, double bx, double ay, double by, long _xparams);

    public static void spline2dlintransf(spline2dinterpolant c, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dlintransf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dlintransf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dlintransf(error_msg, c.get_ptr(), a, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dlintransf");
    }
    public static void spline2dlintransf(spline2dinterpolant c, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dlintransf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dlintransf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dlintransf(error_msg, c.get_ptr(), a, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dlintransf");
    }
    private static native int _jni_spline2dlintransf(mut_string error_msg, long c, double a, double b, long _xparams);

    public static spline2dinterpolant spline2dcopy(spline2dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_cc = new mut_long();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcopy() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcopy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcopy(error_msg, c.get_ptr(), lcl_cc, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcopy");
        return new spline2dinterpolant(lcl_cc.val);
    }
    public static spline2dinterpolant spline2dcopy(spline2dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_cc = new mut_long();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcopy() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dcopy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dcopy(error_msg, c.get_ptr(), lcl_cc, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dcopy");
        return new spline2dinterpolant(lcl_cc.val);
    }
    private static native int _jni_spline2dcopy(mut_string error_msg, long c, mut_long cc, long _xparams);

    public static double[][] spline2dresamplebicubic(double[][] a, int oldheight, int oldwidth, int newheight, int newwidth, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dresamplebicubic(error_msg, a, oldheight, oldwidth, lcl_b, newheight, newwidth, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dresamplebicubic");
        return lcl_b.val;
    }
    public static double[][] spline2dresamplebicubic(double[][] a, int oldheight, int oldwidth, int newheight, int newwidth) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dresamplebicubic(error_msg, a, oldheight, oldwidth, lcl_b, newheight, newwidth, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dresamplebicubic");
        return lcl_b.val;
    }
    private static native int _jni_spline2dresamplebicubic(mut_string error_msg, double[][] a, int oldheight, int oldwidth, rlc_double2d b, int newheight, int newwidth, long _xparams);

    public static double[][] spline2dresamplebilinear(double[][] a, int oldheight, int oldwidth, int newheight, int newwidth, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dresamplebilinear(error_msg, a, oldheight, oldwidth, lcl_b, newheight, newwidth, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dresamplebilinear");
        return lcl_b.val;
    }
    public static double[][] spline2dresamplebilinear(double[][] a, int oldheight, int oldwidth, int newheight, int newwidth) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_b = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dresamplebilinear(error_msg, a, oldheight, oldwidth, lcl_b, newheight, newwidth, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dresamplebilinear");
        return lcl_b.val;
    }
    private static native int _jni_spline2dresamplebilinear(mut_string error_msg, double[][] a, int oldheight, int oldwidth, rlc_double2d b, int newheight, int newwidth, long _xparams);

    public static spline2dinterpolant spline2dbuildbilinearv(double[] x, int n, double[] y, int m, double[] f, int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinearv(error_msg, x, n, y, m, f, d, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinearv");
        return new spline2dinterpolant(lcl_c.val);
    }
    public static spline2dinterpolant spline2dbuildbilinearv(double[] x, int n, double[] y, int m, double[] f, int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinearv(error_msg, x, n, y, m, f, d, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinearv");
        return new spline2dinterpolant(lcl_c.val);
    }
    private static native int _jni_spline2dbuildbilinearv(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, int d, mut_long c, long _xparams);

    public static void spline2dbuildbilinearvbuf(double[] x, int n, double[] y, int m, double[] f, int d, spline2dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbilinearvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbilinearvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinearvbuf(error_msg, x, n, y, m, f, d, c.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinearvbuf");
    }
    public static void spline2dbuildbilinearvbuf(double[] x, int n, double[] y, int m, double[] f, int d, spline2dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbilinearvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbilinearvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinearvbuf(error_msg, x, n, y, m, f, d, c.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinearvbuf");
    }
    private static native int _jni_spline2dbuildbilinearvbuf(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, int d, long c, long _xparams);

    public static spline2dinterpolant spline2dbuildbilinearmissing(double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinearmissing(error_msg, x, n, y, m, f, missing, d, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinearmissing");
        return new spline2dinterpolant(lcl_c.val);
    }
    public static spline2dinterpolant spline2dbuildbilinearmissing(double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinearmissing(error_msg, x, n, y, m, f, missing, d, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinearmissing");
        return new spline2dinterpolant(lcl_c.val);
    }
    private static native int _jni_spline2dbuildbilinearmissing(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, mut_long c, long _xparams);

    public static void spline2dbuildbilinearmissingbuf(double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, spline2dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbilinearmissingbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbilinearmissingbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinearmissingbuf(error_msg, x, n, y, m, f, missing, d, c.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinearmissingbuf");
    }
    public static void spline2dbuildbilinearmissingbuf(double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, spline2dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbilinearmissingbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbilinearmissingbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinearmissingbuf(error_msg, x, n, y, m, f, missing, d, c.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinearmissingbuf");
    }
    private static native int _jni_spline2dbuildbilinearmissingbuf(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, long c, long _xparams);

    public static spline2dinterpolant spline2dbuildbicubicv(double[] x, int n, double[] y, int m, double[] f, int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubicv(error_msg, x, n, y, m, f, d, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubicv");
        return new spline2dinterpolant(lcl_c.val);
    }
    public static spline2dinterpolant spline2dbuildbicubicv(double[] x, int n, double[] y, int m, double[] f, int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubicv(error_msg, x, n, y, m, f, d, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubicv");
        return new spline2dinterpolant(lcl_c.val);
    }
            
    public static spline2dinterpolant spline2dbuildbicubicv(double[] x, double[] y, double[] f, int d, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
    
        n = x.length;
        m = y.length;
        return spline2dbuildbicubicv(x, n, y, m, f, d, _params);
    
    }
    
    public static spline2dinterpolant spline2dbuildbicubicv(double[] x, double[] y, double[] f, int d) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
    
        n = x.length;
        m = y.length;
        return spline2dbuildbicubicv(x, n, y, m, f, d, _params);
    
    }
    private static native int _jni_spline2dbuildbicubicv(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, int d, mut_long c, long _xparams);

    public static spline2dinterpolant spline2dbuildclampedv(double[] x, int n, double[] y, int m, double[] bndbtm, int bndtypebtm, double[] bndtop, int bndtypetop, double[] bndlft, int bndtypelft, double[] bndrgt, int bndtypergt, double[] mixedd, double[] f, int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildclampedv(error_msg, x, n, y, m, bndbtm, bndtypebtm, bndtop, bndtypetop, bndlft, bndtypelft, bndrgt, bndtypergt, mixedd, f, d, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildclampedv");
        return new spline2dinterpolant(lcl_c.val);
    }
    public static spline2dinterpolant spline2dbuildclampedv(double[] x, int n, double[] y, int m, double[] bndbtm, int bndtypebtm, double[] bndtop, int bndtypetop, double[] bndlft, int bndtypelft, double[] bndrgt, int bndtypergt, double[] mixedd, double[] f, int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildclampedv(error_msg, x, n, y, m, bndbtm, bndtypebtm, bndtop, bndtypetop, bndlft, bndtypelft, bndrgt, bndtypergt, mixedd, f, d, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildclampedv");
        return new spline2dinterpolant(lcl_c.val);
    }
            
    public static spline2dinterpolant spline2dbuildclampedv(double[] x, double[] y, double[] bndbtm, int bndtypebtm, double[] bndtop, int bndtypetop, double[] bndlft, int bndtypelft, double[] bndrgt, int bndtypergt, double[] mixedd, double[] f, int d, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
    
        n = x.length;
        m = y.length;
        return spline2dbuildclampedv(x, n, y, m, bndbtm, bndtypebtm, bndtop, bndtypetop, bndlft, bndtypelft, bndrgt, bndtypergt, mixedd, f, d, _params);
    
    }
    
    public static spline2dinterpolant spline2dbuildclampedv(double[] x, double[] y, double[] bndbtm, int bndtypebtm, double[] bndtop, int bndtypetop, double[] bndlft, int bndtypelft, double[] bndrgt, int bndtypergt, double[] mixedd, double[] f, int d) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
    
        n = x.length;
        m = y.length;
        return spline2dbuildclampedv(x, n, y, m, bndbtm, bndtypebtm, bndtop, bndtypetop, bndlft, bndtypelft, bndrgt, bndtypergt, mixedd, f, d, _params);
    
    }
    private static native int _jni_spline2dbuildclampedv(mut_string error_msg, double[] x, int n, double[] y, int m, double[] bndbtm, int bndtypebtm, double[] bndtop, int bndtypetop, double[] bndlft, int bndtypelft, double[] bndrgt, int bndtypergt, double[] mixedd, double[] f, int d, mut_long c, long _xparams);

    public static spline2dinterpolant spline2dbuildhermitev(double[] x, int n, double[] y, int m, double[] f, double[] dfdx, double[] dfdy, double[] d2fdxdy, int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildhermitev(error_msg, x, n, y, m, f, dfdx, dfdy, d2fdxdy, d, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildhermitev");
        return new spline2dinterpolant(lcl_c.val);
    }
    public static spline2dinterpolant spline2dbuildhermitev(double[] x, int n, double[] y, int m, double[] f, double[] dfdx, double[] dfdy, double[] d2fdxdy, int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildhermitev(error_msg, x, n, y, m, f, dfdx, dfdy, d2fdxdy, d, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildhermitev");
        return new spline2dinterpolant(lcl_c.val);
    }
            
    public static spline2dinterpolant spline2dbuildhermitev(double[] x, double[] y, double[] f, double[] dfdx, double[] dfdy, double[] d2fdxdy, int d, alglib.xparams _params) throws alglib.exception
    {
        int n;
        int m;
    
        n = x.length;
        m = y.length;
        return spline2dbuildhermitev(x, n, y, m, f, dfdx, dfdy, d2fdxdy, d, _params);
    
    }
    
    public static spline2dinterpolant spline2dbuildhermitev(double[] x, double[] y, double[] f, double[] dfdx, double[] dfdy, double[] d2fdxdy, int d) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        int m;
    
        n = x.length;
        m = y.length;
        return spline2dbuildhermitev(x, n, y, m, f, dfdx, dfdy, d2fdxdy, d, _params);
    
    }
    private static native int _jni_spline2dbuildhermitev(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, double[] dfdx, double[] dfdy, double[] d2fdxdy, int d, mut_long c, long _xparams);

    public static void spline2dbuildbicubicvbuf(double[] x, int n, double[] y, int m, double[] f, int d, spline2dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbicubicvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbicubicvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubicvbuf(error_msg, x, n, y, m, f, d, c.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubicvbuf");
    }
    public static void spline2dbuildbicubicvbuf(double[] x, int n, double[] y, int m, double[] f, int d, spline2dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbicubicvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbicubicvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubicvbuf(error_msg, x, n, y, m, f, d, c.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubicvbuf");
    }
    private static native int _jni_spline2dbuildbicubicvbuf(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, int d, long c, long _xparams);

    public static spline2dinterpolant spline2dbuildbicubicmissing(double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubicmissing(error_msg, x, n, y, m, f, missing, d, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubicmissing");
        return new spline2dinterpolant(lcl_c.val);
    }
    public static spline2dinterpolant spline2dbuildbicubicmissing(double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubicmissing(error_msg, x, n, y, m, f, missing, d, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubicmissing");
        return new spline2dinterpolant(lcl_c.val);
    }
    private static native int _jni_spline2dbuildbicubicmissing(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, mut_long c, long _xparams);

    public static void spline2dbuildbicubicmissingbuf(double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, spline2dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbicubicmissingbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbicubicmissingbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubicmissingbuf(error_msg, x, n, y, m, f, missing, d, c.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubicmissingbuf");
    }
    public static void spline2dbuildbicubicmissingbuf(double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, spline2dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbicubicmissingbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dbuildbicubicmissingbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubicmissingbuf(error_msg, x, n, y, m, f, missing, d, c.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubicmissingbuf");
    }
    private static native int _jni_spline2dbuildbicubicmissingbuf(mut_string error_msg, double[] x, int n, double[] y, int m, double[] f, boolean[] missing, int d, long c, long _xparams);

    public static class spline2dunpackv_results
    {
        public int m;
        public int n;
        public int d;
        public double[][] tbl;
    }
    public static spline2dunpackv_results spline2dunpackv(spline2dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_m = new mut_int();
        mut_int lcl_n = new mut_int();
        mut_int lcl_d = new mut_int();
        rlc_double2d lcl_tbl = new rlc_double2d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dunpackv() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dunpackv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dunpackv(error_msg, c.get_ptr(), lcl_m, lcl_n, lcl_d, lcl_tbl, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dunpackv");
        spline2dunpackv_results ret_tuple = new spline2dunpackv_results();
        ret_tuple.m = lcl_m.val;
        ret_tuple.n = lcl_n.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.tbl = lcl_tbl.val;
        return ret_tuple;
    }
    public static spline2dunpackv_results spline2dunpackv(spline2dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_m = new mut_int();
        mut_int lcl_n = new mut_int();
        mut_int lcl_d = new mut_int();
        rlc_double2d lcl_tbl = new rlc_double2d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dunpackv() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dunpackv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dunpackv(error_msg, c.get_ptr(), lcl_m, lcl_n, lcl_d, lcl_tbl, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dunpackv");
        spline2dunpackv_results ret_tuple = new spline2dunpackv_results();
        ret_tuple.m = lcl_m.val;
        ret_tuple.n = lcl_n.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.tbl = lcl_tbl.val;
        return ret_tuple;
    }
    private static native int _jni_spline2dunpackv(mut_string error_msg, long c, mut_int m, mut_int n, mut_int d, rlc_double2d tbl, long _xparams);

    public static spline2dinterpolant spline2dbuildbilinear(double[] x, double[] y, double[][] f, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinear(error_msg, x, y, f, m, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinear");
        return new spline2dinterpolant(lcl_c.val);
    }
    public static spline2dinterpolant spline2dbuildbilinear(double[] x, double[] y, double[][] f, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbilinear(error_msg, x, y, f, m, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbilinear");
        return new spline2dinterpolant(lcl_c.val);
    }
    private static native int _jni_spline2dbuildbilinear(mut_string error_msg, double[] x, double[] y, double[][] f, int m, int n, mut_long c, long _xparams);

    public static spline2dinterpolant spline2dbuildbicubic(double[] x, double[] y, double[][] f, int m, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubic(error_msg, x, y, f, m, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubic");
        return new spline2dinterpolant(lcl_c.val);
    }
    public static spline2dinterpolant spline2dbuildbicubic(double[] x, double[] y, double[][] f, int m, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildbicubic(error_msg, x, y, f, m, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildbicubic");
        return new spline2dinterpolant(lcl_c.val);
    }
    private static native int _jni_spline2dbuildbicubic(mut_string error_msg, double[] x, double[] y, double[][] f, int m, int n, mut_long c, long _xparams);

    public static class spline2dunpack_results
    {
        public int m;
        public int n;
        public double[][] tbl;
    }
    public static spline2dunpack_results spline2dunpack(spline2dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_m = new mut_int();
        mut_int lcl_n = new mut_int();
        rlc_double2d lcl_tbl = new rlc_double2d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dunpack() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dunpack(error_msg, c.get_ptr(), lcl_m, lcl_n, lcl_tbl, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dunpack");
        spline2dunpack_results ret_tuple = new spline2dunpack_results();
        ret_tuple.m = lcl_m.val;
        ret_tuple.n = lcl_n.val;
        ret_tuple.tbl = lcl_tbl.val;
        return ret_tuple;
    }
    public static spline2dunpack_results spline2dunpack(spline2dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_m = new mut_int();
        mut_int lcl_n = new mut_int();
        rlc_double2d lcl_tbl = new rlc_double2d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dunpack() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline2dunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dunpack(error_msg, c.get_ptr(), lcl_m, lcl_n, lcl_tbl, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dunpack");
        spline2dunpack_results ret_tuple = new spline2dunpack_results();
        ret_tuple.m = lcl_m.val;
        ret_tuple.n = lcl_n.val;
        ret_tuple.tbl = lcl_tbl.val;
        return ret_tuple;
    }
    private static native int _jni_spline2dunpack(mut_string error_msg, long c, mut_int m, mut_int n, rlc_double2d tbl, long _xparams);

    public static spline2dbuilder spline2dbuildercreate(int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildercreate(error_msg, d, lcl_state, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildercreate");
        return new spline2dbuilder(lcl_state.val);
    }
    public static spline2dbuilder spline2dbuildercreate(int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_state = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildercreate(error_msg, d, lcl_state, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildercreate");
        return new spline2dbuilder(lcl_state.val);
    }
    private static native int _jni_spline2dbuildercreate(mut_string error_msg, int d, mut_long state, long _xparams);

    public static void spline2dbuildersetuserterm(spline2dbuilder state, double v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetuserterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetuserterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetuserterm(error_msg, state.get_ptr(), v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetuserterm");
    }
    public static void spline2dbuildersetuserterm(spline2dbuilder state, double v) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetuserterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetuserterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetuserterm(error_msg, state.get_ptr(), v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetuserterm");
    }
    private static native int _jni_spline2dbuildersetuserterm(mut_string error_msg, long state, double v, long _xparams);

    public static void spline2dbuildersetlinterm(spline2dbuilder state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetlinterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetlinterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetlinterm(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetlinterm");
    }
    public static void spline2dbuildersetlinterm(spline2dbuilder state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetlinterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetlinterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetlinterm(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetlinterm");
    }
    private static native int _jni_spline2dbuildersetlinterm(mut_string error_msg, long state, long _xparams);

    public static void spline2dbuildersetconstterm(spline2dbuilder state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetconstterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetconstterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetconstterm(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetconstterm");
    }
    public static void spline2dbuildersetconstterm(spline2dbuilder state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetconstterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetconstterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetconstterm(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetconstterm");
    }
    private static native int _jni_spline2dbuildersetconstterm(mut_string error_msg, long state, long _xparams);

    public static void spline2dbuildersetzeroterm(spline2dbuilder state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetzeroterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetzeroterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetzeroterm(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetzeroterm");
    }
    public static void spline2dbuildersetzeroterm(spline2dbuilder state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetzeroterm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetzeroterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetzeroterm(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetzeroterm");
    }
    private static native int _jni_spline2dbuildersetzeroterm(mut_string error_msg, long state, long _xparams);

    public static void spline2dbuildersetpoints(spline2dbuilder state, double[][] xy, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetpoints() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetpoints() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetpoints(error_msg, state.get_ptr(), xy, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetpoints");
    }
    public static void spline2dbuildersetpoints(spline2dbuilder state, double[][] xy, int n) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetpoints() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetpoints() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetpoints(error_msg, state.get_ptr(), xy, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetpoints");
    }
    private static native int _jni_spline2dbuildersetpoints(mut_string error_msg, long state, double[][] xy, int n, long _xparams);

    public static void spline2dbuildersetareaauto(spline2dbuilder state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetareaauto() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetareaauto() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetareaauto(error_msg, state.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetareaauto");
    }
    public static void spline2dbuildersetareaauto(spline2dbuilder state) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetareaauto() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetareaauto() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetareaauto(error_msg, state.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetareaauto");
    }
    private static native int _jni_spline2dbuildersetareaauto(mut_string error_msg, long state, long _xparams);

    public static void spline2dbuildersetarea(spline2dbuilder state, double xa, double xb, double ya, double yb, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetarea() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetarea() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetarea(error_msg, state.get_ptr(), xa, xb, ya, yb, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetarea");
    }
    public static void spline2dbuildersetarea(spline2dbuilder state, double xa, double xb, double ya, double yb) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetarea() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetarea() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetarea(error_msg, state.get_ptr(), xa, xb, ya, yb, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetarea");
    }
    private static native int _jni_spline2dbuildersetarea(mut_string error_msg, long state, double xa, double xb, double ya, double yb, long _xparams);

    public static void spline2dbuildersetgrid(spline2dbuilder state, int kx, int ky, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetgrid() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetgrid() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetgrid(error_msg, state.get_ptr(), kx, ky, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetgrid");
    }
    public static void spline2dbuildersetgrid(spline2dbuilder state, int kx, int ky) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetgrid() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetgrid() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetgrid(error_msg, state.get_ptr(), kx, ky, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetgrid");
    }
    private static native int _jni_spline2dbuildersetgrid(mut_string error_msg, long state, int kx, int ky, long _xparams);

    public static void spline2dbuildersetalgofastddm(spline2dbuilder state, int nlayers, double lambdav, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgofastddm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgofastddm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetalgofastddm(error_msg, state.get_ptr(), nlayers, lambdav, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetalgofastddm");
    }
    public static void spline2dbuildersetalgofastddm(spline2dbuilder state, int nlayers, double lambdav) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgofastddm() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgofastddm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetalgofastddm(error_msg, state.get_ptr(), nlayers, lambdav, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetalgofastddm");
    }
    private static native int _jni_spline2dbuildersetalgofastddm(mut_string error_msg, long state, int nlayers, double lambdav, long _xparams);

    public static void spline2dbuildersetalgoblocklls(spline2dbuilder state, double lambdans, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgoblocklls() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgoblocklls() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetalgoblocklls(error_msg, state.get_ptr(), lambdans, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetalgoblocklls");
    }
    public static void spline2dbuildersetalgoblocklls(spline2dbuilder state, double lambdans) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgoblocklls() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgoblocklls() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetalgoblocklls(error_msg, state.get_ptr(), lambdans, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetalgoblocklls");
    }
    private static native int _jni_spline2dbuildersetalgoblocklls(mut_string error_msg, long state, double lambdans, long _xparams);

    public static void spline2dbuildersetalgonaivells(spline2dbuilder state, double lambdans, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgonaivells() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgonaivells() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetalgonaivells(error_msg, state.get_ptr(), lambdans, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetalgonaivells");
    }
    public static void spline2dbuildersetalgonaivells(spline2dbuilder state, double lambdans) throws alglib.exception
    {
        activatealglibcore();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgonaivells() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dbuildersetalgonaivells() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dbuildersetalgonaivells(error_msg, state.get_ptr(), lambdans, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dbuildersetalgonaivells");
    }
    private static native int _jni_spline2dbuildersetalgonaivells(mut_string error_msg, long state, double lambdans, long _xparams);

    public static class spline2dfit_results
    {
        public spline2dinterpolant s;
        public spline2dfitreport rep;
    }
    public static spline2dfit_results spline2dfit(spline2dbuilder state, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dfit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dfit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dfit(error_msg, state.get_ptr(), lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dfit");
        spline2dfit_results ret_tuple = new spline2dfit_results();
        ret_tuple.s = new spline2dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline2dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline2dfit_results spline2dfit(spline2dbuilder state) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        if( state==null )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dfit() is null");
        if( state.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'state' of spline2dfit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline2dfit(error_msg, state.get_ptr(), lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline2dfit");
        spline2dfit_results ret_tuple = new spline2dfit_results();
        ret_tuple.s = new spline2dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline2dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_spline2dfit(mut_string error_msg, long state, mut_long s, mut_object rep, long _xparams);

    
    
    //
    // Subpackage rbfv2
    //
    
    
    
    //
    // Subpackage spline3d
    //
    

    public static class spline3dinterpolant extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected spline3dinterpolant()
        {
            _ptr = 0;
            own  = false;
        }
        protected spline3dinterpolant(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected spline3dinterpolant(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new spline3dinterpolant(0);
            return new spline3dinterpolant(_jni_x_obj_copy_spline3dinterpolant(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_spline3dinterpolant(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_spline3dinterpolant(long x);
    private static native void _jni_x_obj_free_spline3dinterpolant(long x);

    public static double spline3dcalc(spline3dinterpolant c, double x, double y, double z, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalc() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dcalc(error_msg, lcl_result, c.get_ptr(), x, y, z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dcalc");
        return lcl_result.val;
    }
    public static double spline3dcalc(spline3dinterpolant c, double x, double y, double z) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalc() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dcalc(error_msg, lcl_result, c.get_ptr(), x, y, z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dcalc");
        return lcl_result.val;
    }
    private static native int _jni_spline3dcalc(mut_string error_msg, mut_double result, long c, double x, double y, double z, long _xparams);

    public static void spline3dlintransxyz(spline3dinterpolant c, double ax, double bx, double ay, double by, double az, double bz, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dlintransxyz() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dlintransxyz() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dlintransxyz(error_msg, c.get_ptr(), ax, bx, ay, by, az, bz, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dlintransxyz");
    }
    public static void spline3dlintransxyz(spline3dinterpolant c, double ax, double bx, double ay, double by, double az, double bz) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dlintransxyz() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dlintransxyz() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dlintransxyz(error_msg, c.get_ptr(), ax, bx, ay, by, az, bz, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dlintransxyz");
    }
    private static native int _jni_spline3dlintransxyz(mut_string error_msg, long c, double ax, double bx, double ay, double by, double az, double bz, long _xparams);

    public static void spline3dlintransf(spline3dinterpolant c, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dlintransf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dlintransf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dlintransf(error_msg, c.get_ptr(), a, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dlintransf");
    }
    public static void spline3dlintransf(spline3dinterpolant c, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dlintransf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dlintransf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dlintransf(error_msg, c.get_ptr(), a, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dlintransf");
    }
    private static native int _jni_spline3dlintransf(mut_string error_msg, long c, double a, double b, long _xparams);

    public static double[] spline3dresampletrilinear(double[] a, int oldzcount, int oldycount, int oldxcount, int newzcount, int newycount, int newxcount, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_b = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dresampletrilinear(error_msg, a, oldzcount, oldycount, oldxcount, newzcount, newycount, newxcount, lcl_b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dresampletrilinear");
        return lcl_b.val;
    }
    public static double[] spline3dresampletrilinear(double[] a, int oldzcount, int oldycount, int oldxcount, int newzcount, int newycount, int newxcount) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_b = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dresampletrilinear(error_msg, a, oldzcount, oldycount, oldxcount, newzcount, newycount, newxcount, lcl_b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dresampletrilinear");
        return lcl_b.val;
    }
    private static native int _jni_spline3dresampletrilinear(mut_string error_msg, double[] a, int oldzcount, int oldycount, int oldxcount, int newzcount, int newycount, int newxcount, rlc_double1d b, long _xparams);

    public static spline3dinterpolant spline3dbuildtrilinearv(double[] x, int n, double[] y, int m, double[] z, int l, double[] f, int d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dbuildtrilinearv(error_msg, x, n, y, m, z, l, f, d, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dbuildtrilinearv");
        return new spline3dinterpolant(lcl_c.val);
    }
    public static spline3dinterpolant spline3dbuildtrilinearv(double[] x, int n, double[] y, int m, double[] z, int l, double[] f, int d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_c = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dbuildtrilinearv(error_msg, x, n, y, m, z, l, f, d, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dbuildtrilinearv");
        return new spline3dinterpolant(lcl_c.val);
    }
    private static native int _jni_spline3dbuildtrilinearv(mut_string error_msg, double[] x, int n, double[] y, int m, double[] z, int l, double[] f, int d, mut_long c, long _xparams);

    public static void spline3dbuildtrilinearvbuf(double[] x, int n, double[] y, int m, double[] z, int l, double[] f, int d, spline3dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dbuildtrilinearvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dbuildtrilinearvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dbuildtrilinearvbuf(error_msg, x, n, y, m, z, l, f, d, c.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dbuildtrilinearvbuf");
    }
    public static void spline3dbuildtrilinearvbuf(double[] x, int n, double[] y, int m, double[] z, int l, double[] f, int d, spline3dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dbuildtrilinearvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dbuildtrilinearvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dbuildtrilinearvbuf(error_msg, x, n, y, m, z, l, f, d, c.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dbuildtrilinearvbuf");
    }
    private static native int _jni_spline3dbuildtrilinearvbuf(mut_string error_msg, double[] x, int n, double[] y, int m, double[] z, int l, double[] f, int d, long c, long _xparams);

    public static double[] spline3dcalcvbuf(spline3dinterpolant c, double x, double y, double z, double[] f, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_f = new rlc_double1d(f);
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalcvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalcvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dcalcvbuf(error_msg, c.get_ptr(), x, y, z, lcl_f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dcalcvbuf");
        return lcl_f.val;
    }
    public static double[] spline3dcalcvbuf(spline3dinterpolant c, double x, double y, double z, double[] f) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_f = new rlc_double1d(f);
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalcvbuf() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalcvbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dcalcvbuf(error_msg, c.get_ptr(), x, y, z, lcl_f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dcalcvbuf");
        return lcl_f.val;
    }
    private static native int _jni_spline3dcalcvbuf(mut_string error_msg, long c, double x, double y, double z, rlc_double1d f, long _xparams);

    public static double[] spline3dcalcv(spline3dinterpolant c, double x, double y, double z, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_f = new rlc_double1d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalcv() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalcv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dcalcv(error_msg, c.get_ptr(), x, y, z, lcl_f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dcalcv");
        return lcl_f.val;
    }
    public static double[] spline3dcalcv(spline3dinterpolant c, double x, double y, double z) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_f = new rlc_double1d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalcv() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dcalcv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dcalcv(error_msg, c.get_ptr(), x, y, z, lcl_f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dcalcv");
        return lcl_f.val;
    }
    private static native int _jni_spline3dcalcv(mut_string error_msg, long c, double x, double y, double z, rlc_double1d f, long _xparams);

    public static class spline3dunpackv_results
    {
        public int n;
        public int m;
        public int l;
        public int d;
        public int stype;
        public double[][] tbl;
    }
    public static spline3dunpackv_results spline3dunpackv(spline3dinterpolant c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        mut_int lcl_m = new mut_int();
        mut_int lcl_l = new mut_int();
        mut_int lcl_d = new mut_int();
        mut_int lcl_stype = new mut_int();
        rlc_double2d lcl_tbl = new rlc_double2d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dunpackv() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dunpackv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dunpackv(error_msg, c.get_ptr(), lcl_n, lcl_m, lcl_l, lcl_d, lcl_stype, lcl_tbl, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dunpackv");
        spline3dunpackv_results ret_tuple = new spline3dunpackv_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.m = lcl_m.val;
        ret_tuple.l = lcl_l.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.stype = lcl_stype.val;
        ret_tuple.tbl = lcl_tbl.val;
        return ret_tuple;
    }
    public static spline3dunpackv_results spline3dunpackv(spline3dinterpolant c) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_n = new mut_int();
        mut_int lcl_m = new mut_int();
        mut_int lcl_l = new mut_int();
        mut_int lcl_d = new mut_int();
        mut_int lcl_stype = new mut_int();
        rlc_double2d lcl_tbl = new rlc_double2d();
        if( c==null )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dunpackv() is null");
        if( c.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'c' of spline3dunpackv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline3dunpackv(error_msg, c.get_ptr(), lcl_n, lcl_m, lcl_l, lcl_d, lcl_stype, lcl_tbl, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline3dunpackv");
        spline3dunpackv_results ret_tuple = new spline3dunpackv_results();
        ret_tuple.n = lcl_n.val;
        ret_tuple.m = lcl_m.val;
        ret_tuple.l = lcl_l.val;
        ret_tuple.d = lcl_d.val;
        ret_tuple.stype = lcl_stype.val;
        ret_tuple.tbl = lcl_tbl.val;
        return ret_tuple;
    }
    private static native int _jni_spline3dunpackv(mut_string error_msg, long c, mut_int n, mut_int m, mut_int l, mut_int d, mut_int stype, rlc_double2d tbl, long _xparams);

    
    
    //
    // Subpackage intcomp
    //
    
    public static class nsfitspheremcc_results
    {
        public double[] cx;
        public double rhi;
    }
    public static nsfitspheremcc_results nsfitspheremcc(double[][] xy, int npoints, int nx, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nsfitspheremcc(error_msg, xy, npoints, nx, lcl_cx, lcl_rhi, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nsfitspheremcc");
        nsfitspheremcc_results ret_tuple = new nsfitspheremcc_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    public static nsfitspheremcc_results nsfitspheremcc(double[][] xy, int npoints, int nx) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nsfitspheremcc(error_msg, xy, npoints, nx, lcl_cx, lcl_rhi, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nsfitspheremcc");
        nsfitspheremcc_results ret_tuple = new nsfitspheremcc_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    private static native int _jni_nsfitspheremcc(mut_string error_msg, double[][] xy, int npoints, int nx, rlc_double1d cx, mut_double rhi, long _xparams);

    public static class nsfitspheremic_results
    {
        public double[] cx;
        public double rlo;
    }
    public static nsfitspheremic_results nsfitspheremic(double[][] xy, int npoints, int nx, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nsfitspheremic(error_msg, xy, npoints, nx, lcl_cx, lcl_rlo, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nsfitspheremic");
        nsfitspheremic_results ret_tuple = new nsfitspheremic_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        return ret_tuple;
    }
    public static nsfitspheremic_results nsfitspheremic(double[][] xy, int npoints, int nx) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nsfitspheremic(error_msg, xy, npoints, nx, lcl_cx, lcl_rlo, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nsfitspheremic");
        nsfitspheremic_results ret_tuple = new nsfitspheremic_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        return ret_tuple;
    }
    private static native int _jni_nsfitspheremic(mut_string error_msg, double[][] xy, int npoints, int nx, rlc_double1d cx, mut_double rlo, long _xparams);

    public static class nsfitspheremzc_results
    {
        public double[] cx;
        public double rlo;
        public double rhi;
    }
    public static nsfitspheremzc_results nsfitspheremzc(double[][] xy, int npoints, int nx, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nsfitspheremzc(error_msg, xy, npoints, nx, lcl_cx, lcl_rlo, lcl_rhi, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nsfitspheremzc");
        nsfitspheremzc_results ret_tuple = new nsfitspheremzc_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    public static nsfitspheremzc_results nsfitspheremzc(double[][] xy, int npoints, int nx) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nsfitspheremzc(error_msg, xy, npoints, nx, lcl_cx, lcl_rlo, lcl_rhi, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nsfitspheremzc");
        nsfitspheremzc_results ret_tuple = new nsfitspheremzc_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    private static native int _jni_nsfitspheremzc(mut_string error_msg, double[][] xy, int npoints, int nx, rlc_double1d cx, mut_double rlo, mut_double rhi, long _xparams);

    public static class nsfitspherex_results
    {
        public double[] cx;
        public double rlo;
        public double rhi;
    }
    public static nsfitspherex_results nsfitspherex(double[][] xy, int npoints, int nx, int problemtype, double epsx, int aulits, double penalty, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nsfitspherex(error_msg, xy, npoints, nx, problemtype, epsx, aulits, penalty, lcl_cx, lcl_rlo, lcl_rhi, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nsfitspherex");
        nsfitspherex_results ret_tuple = new nsfitspherex_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    public static nsfitspherex_results nsfitspherex(double[][] xy, int npoints, int nx, int problemtype, double epsx, int aulits, double penalty) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_cx = new rlc_double1d();
        mut_double lcl_rlo = new mut_double();
        mut_double lcl_rhi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_nsfitspherex(error_msg, xy, npoints, nx, problemtype, epsx, aulits, penalty, lcl_cx, lcl_rlo, lcl_rhi, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "nsfitspherex");
        nsfitspherex_results ret_tuple = new nsfitspherex_results();
        ret_tuple.cx = lcl_cx.val;
        ret_tuple.rlo = lcl_rlo.val;
        ret_tuple.rhi = lcl_rhi.val;
        return ret_tuple;
    }
    private static native int _jni_nsfitspherex(mut_string error_msg, double[][] xy, int npoints, int nx, int problemtype, double epsx, int aulits, double penalty, rlc_double1d cx, mut_double rlo, mut_double rhi, long _xparams);

    public static class spline1dfitpenalized_results
    {
        public int info;
        public spline1dinterpolant s;
        public spline1dfitreport rep;
    }
    public static spline1dfitpenalized_results spline1dfitpenalized(double[] x, double[] y, int n, int m, double rho, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfitpenalized(error_msg, x, y, n, m, rho, lcl_info, lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfitpenalized");
        spline1dfitpenalized_results ret_tuple = new spline1dfitpenalized_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline1dfitpenalized_results spline1dfitpenalized(double[] x, double[] y, int n, int m, double rho) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfitpenalized(error_msg, x, y, n, m, rho, lcl_info, lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfitpenalized");
        spline1dfitpenalized_results ret_tuple = new spline1dfitpenalized_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spline1dfitpenalized_results spline1dfitpenalized(double[] x, double[] y, int m, double rho, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfitpenalized(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfitpenalized(x, y, n, m, rho, _params);
    
    }
    
    public static spline1dfitpenalized_results spline1dfitpenalized(double[] x, double[] y, int m, double rho) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfitpenalized(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfitpenalized(x, y, n, m, rho, _params);
    
    }
    private static native int _jni_spline1dfitpenalized(mut_string error_msg, double[] x, double[] y, int n, int m, double rho, mut_int info, mut_long s, mut_object rep, long _xparams);

    public static class spline1dfitpenalizedw_results
    {
        public int info;
        public spline1dinterpolant s;
        public spline1dfitreport rep;
    }
    public static spline1dfitpenalizedw_results spline1dfitpenalizedw(double[] x, double[] y, double[] w, int n, int m, double rho, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfitpenalizedw(error_msg, x, y, w, n, m, rho, lcl_info, lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfitpenalizedw");
        spline1dfitpenalizedw_results ret_tuple = new spline1dfitpenalizedw_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline1dfitpenalizedw_results spline1dfitpenalizedw(double[] x, double[] y, double[] w, int n, int m, double rho) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfitpenalizedw(error_msg, x, y, w, n, m, rho, lcl_info, lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfitpenalizedw");
        spline1dfitpenalizedw_results ret_tuple = new spline1dfitpenalizedw_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spline1dfitpenalizedw_results spline1dfitpenalizedw(double[] x, double[] y, double[] w, int m, double rho, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length) || (x.length!=w.length))
            throw new exception("Error while calling spline1dfitpenalizedw(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfitpenalizedw(x, y, w, n, m, rho, _params);
    
    }
    
    public static spline1dfitpenalizedw_results spline1dfitpenalizedw(double[] x, double[] y, double[] w, int m, double rho) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length) || (x.length!=w.length))
            throw new exception("Error while calling spline1dfitpenalizedw(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfitpenalizedw(x, y, w, n, m, rho, _params);
    
    }
    private static native int _jni_spline1dfitpenalizedw(mut_string error_msg, double[] x, double[] y, double[] w, int n, int m, double rho, mut_int info, mut_long s, mut_object rep, long _xparams);

    public static class spline1dfitcubic_results
    {
        public spline1dinterpolant s;
        public spline1dfitreport rep;
    }
    public static spline1dfitcubic_results spline1dfitcubic(double[] x, double[] y, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfitcubic(error_msg, x, y, n, m, lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfitcubic");
        spline1dfitcubic_results ret_tuple = new spline1dfitcubic_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline1dfitcubic_results spline1dfitcubic(double[] x, double[] y, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfitcubic(error_msg, x, y, n, m, lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfitcubic");
        spline1dfitcubic_results ret_tuple = new spline1dfitcubic_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spline1dfitcubic_results spline1dfitcubic(double[] x, double[] y, int m, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfitcubic(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfitcubic(x, y, n, m, _params);
    
    }
    
    public static spline1dfitcubic_results spline1dfitcubic(double[] x, double[] y, int m) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfitcubic(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfitcubic(x, y, n, m, _params);
    
    }
    private static native int _jni_spline1dfitcubic(mut_string error_msg, double[] x, double[] y, int n, int m, mut_long s, mut_object rep, long _xparams);

    public static class spline1dfithermite_results
    {
        public spline1dinterpolant s;
        public spline1dfitreport rep;
    }
    public static spline1dfithermite_results spline1dfithermite(double[] x, double[] y, int n, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfithermite(error_msg, x, y, n, m, lcl_s, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfithermite");
        spline1dfithermite_results ret_tuple = new spline1dfithermite_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
    public static spline1dfithermite_results spline1dfithermite(double[] x, double[] y, int n, int m) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_spline1dfithermite(error_msg, x, y, n, m, lcl_s, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "spline1dfithermite");
        spline1dfithermite_results ret_tuple = new spline1dfithermite_results();
        ret_tuple.s = new spline1dinterpolant(lcl_s.val);
        ret_tuple.rep = (spline1dfitreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static spline1dfithermite_results spline1dfithermite(double[] x, double[] y, int m, alglib.xparams _params) throws alglib.exception
    {
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfithermite(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfithermite(x, y, n, m, _params);
    
    }
    
    public static spline1dfithermite_results spline1dfithermite(double[] x, double[] y, int m) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
        if( (x.length!=y.length))
            throw new exception("Error while calling spline1dfithermite(): looks like one of arguments has wrong size");
        n = x.length;
        return spline1dfithermite(x, y, n, m, _params);
    
    }
    private static native int _jni_spline1dfithermite(mut_string error_msg, double[] x, double[] y, int n, int m, mut_long s, mut_object rep, long _xparams);

    
    
    //
    // Subpackage rbf
    //
    

    public static class rbfcalcbuffer extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected rbfcalcbuffer()
        {
            _ptr = 0;
            own  = false;
        }
        protected rbfcalcbuffer(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected rbfcalcbuffer(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new rbfcalcbuffer(0);
            return new rbfcalcbuffer(_jni_x_obj_copy_rbfcalcbuffer(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_rbfcalcbuffer(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_rbfcalcbuffer(long x);
    private static native void _jni_x_obj_free_rbfcalcbuffer(long x);


    public static class rbfmodel extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected rbfmodel()
        {
            _ptr = 0;
            own  = false;
        }
        protected rbfmodel(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected rbfmodel(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new rbfmodel(0);
            return new rbfmodel(_jni_x_obj_copy_rbfmodel(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_rbfmodel(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_rbfmodel(long x);
    private static native void _jni_x_obj_free_rbfmodel(long x);


        public static class rbfreport extends alglibobject
        {
            public double rmserror;
            public double maxerror;
            public int arows;
            public int acols;
            public int annz;
            public int iterationscount;
            public int nmv;
            public int terminationtype;
            public alglibobject make_copy()
            {
                rbfreport dst = new rbfreport();
                dst.rmserror = rmserror;
                dst.maxerror = maxerror;
                dst.arows = arows;
                dst.acols = acols;
                dst.annz = annz;
                dst.iterationscount = iterationscount;
                dst.nmv = nmv;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    private static native int _jni_rbfserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String rbfserialize(rbfmodel obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of rbfserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of rbfserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_rbfserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_rbfunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static rbfmodel rbfunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_rbfunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfunserialize");
        return new rbfmodel(lcl_result.val);
    }

    public static rbfmodel rbfcreate(int nx, int ny, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcreate(error_msg, nx, ny, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcreate");
        return new rbfmodel(lcl_s.val);
    }
    public static rbfmodel rbfcreate(int nx, int ny) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcreate(error_msg, nx, ny, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcreate");
        return new rbfmodel(lcl_s.val);
    }
    private static native int _jni_rbfcreate(mut_string error_msg, int nx, int ny, mut_long s, long _xparams);

    public static rbfcalcbuffer rbfcreatecalcbuffer(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcreatecalcbuffer() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcreatecalcbuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcreatecalcbuffer(error_msg, s.get_ptr(), lcl_buf, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcreatecalcbuffer");
        return new rbfcalcbuffer(lcl_buf.val);
    }
    public static rbfcalcbuffer rbfcreatecalcbuffer(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcreatecalcbuffer() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcreatecalcbuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcreatecalcbuffer(error_msg, s.get_ptr(), lcl_buf, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcreatecalcbuffer");
        return new rbfcalcbuffer(lcl_buf.val);
    }
    private static native int _jni_rbfcreatecalcbuffer(mut_string error_msg, long s, mut_long buf, long _xparams);

    public static void rbfsetpoints(rbfmodel s, double[][] xy, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetpoints() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetpoints() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetpoints(error_msg, s.get_ptr(), xy, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetpoints");
    }
    public static void rbfsetpoints(rbfmodel s, double[][] xy, int n) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetpoints() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetpoints() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetpoints(error_msg, s.get_ptr(), xy, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetpoints");
    }
            
    public static void rbfsetpoints(rbfmodel s, double[][] xy, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = ap.rows(xy);
        rbfsetpoints(s, xy, n, _params);
    
    }
    
    public static void rbfsetpoints(rbfmodel s, double[][] xy) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = ap.rows(xy);
        rbfsetpoints(s, xy, n, _params);
    
    }
    private static native int _jni_rbfsetpoints(mut_string error_msg, long s, double[][] xy, int n, long _xparams);

    public static void rbfsetpointsandscales(rbfmodel r, double[][] xy, int n, double[] s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( r==null )
            throw new alglib.exception("ALGLIB: parameter 'r' of rbfsetpointsandscales() is null");
        if( r.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'r' of rbfsetpointsandscales() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetpointsandscales(error_msg, r.get_ptr(), xy, n, s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetpointsandscales");
    }
    public static void rbfsetpointsandscales(rbfmodel r, double[][] xy, int n, double[] s) throws alglib.exception
    {
        activatealglibcore();
        if( r==null )
            throw new alglib.exception("ALGLIB: parameter 'r' of rbfsetpointsandscales() is null");
        if( r.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'r' of rbfsetpointsandscales() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetpointsandscales(error_msg, r.get_ptr(), xy, n, s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetpointsandscales");
    }
            
    public static void rbfsetpointsandscales(rbfmodel r, double[][] xy, double[] s, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = ap.rows(xy);
        rbfsetpointsandscales(r, xy, n, s, _params);
    
    }
    
    public static void rbfsetpointsandscales(rbfmodel r, double[][] xy, double[] s) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = ap.rows(xy);
        rbfsetpointsandscales(r, xy, n, s, _params);
    
    }
    private static native int _jni_rbfsetpointsandscales(mut_string error_msg, long r, double[][] xy, int n, double[] s, long _xparams);

    public static void rbfsetalgoqnn(rbfmodel s, double q, double z, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgoqnn() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgoqnn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgoqnn(error_msg, s.get_ptr(), q, z, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgoqnn");
    }
    public static void rbfsetalgoqnn(rbfmodel s, double q, double z) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgoqnn() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgoqnn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgoqnn(error_msg, s.get_ptr(), q, z, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgoqnn");
    }
            
    public static void rbfsetalgoqnn(rbfmodel s, alglib.xparams _params) throws alglib.exception
    {
        double q;
        double z;
    
        q = 1.0;
        z = 5.0;
        rbfsetalgoqnn(s, q, z, _params);
    
    }
    
    public static void rbfsetalgoqnn(rbfmodel s) throws alglib.exception
    {
        alglib.xparams _params = null;
        double q;
        double z;
    
        q = 1.0;
        z = 5.0;
        rbfsetalgoqnn(s, q, z, _params);
    
    }
    private static native int _jni_rbfsetalgoqnn(mut_string error_msg, long s, double q, double z, long _xparams);

    public static void rbfsetalgomultilayer(rbfmodel s, double rbase, int nlayers, double lambdav, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultilayer() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultilayer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgomultilayer(error_msg, s.get_ptr(), rbase, nlayers, lambdav, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgomultilayer");
    }
    public static void rbfsetalgomultilayer(rbfmodel s, double rbase, int nlayers, double lambdav) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultilayer() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultilayer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgomultilayer(error_msg, s.get_ptr(), rbase, nlayers, lambdav, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgomultilayer");
    }
            
    public static void rbfsetalgomultilayer(rbfmodel s, double rbase, int nlayers, alglib.xparams _params) throws alglib.exception
    {
        double lambdav;
    
        lambdav = 0.01;
        rbfsetalgomultilayer(s, rbase, nlayers, lambdav, _params);
    
    }
    
    public static void rbfsetalgomultilayer(rbfmodel s, double rbase, int nlayers) throws alglib.exception
    {
        alglib.xparams _params = null;
        double lambdav;
    
        lambdav = 0.01;
        rbfsetalgomultilayer(s, rbase, nlayers, lambdav, _params);
    
    }
    private static native int _jni_rbfsetalgomultilayer(mut_string error_msg, long s, double rbase, int nlayers, double lambdav, long _xparams);

    public static void rbfsetalgohierarchical(rbfmodel s, double rbase, int nlayers, double lambdans, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgohierarchical() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgohierarchical() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgohierarchical(error_msg, s.get_ptr(), rbase, nlayers, lambdans, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgohierarchical");
    }
    public static void rbfsetalgohierarchical(rbfmodel s, double rbase, int nlayers, double lambdans) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgohierarchical() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgohierarchical() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgohierarchical(error_msg, s.get_ptr(), rbase, nlayers, lambdans, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgohierarchical");
    }
    private static native int _jni_rbfsetalgohierarchical(mut_string error_msg, long s, double rbase, int nlayers, double lambdans, long _xparams);

    public static void rbfsetalgothinplatespline(rbfmodel s, double lambdav, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgothinplatespline() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgothinplatespline() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgothinplatespline(error_msg, s.get_ptr(), lambdav, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgothinplatespline");
    }
    public static void rbfsetalgothinplatespline(rbfmodel s, double lambdav) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgothinplatespline() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgothinplatespline() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgothinplatespline(error_msg, s.get_ptr(), lambdav, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgothinplatespline");
    }
            
    public static void rbfsetalgothinplatespline(rbfmodel s, alglib.xparams _params) throws alglib.exception
    {
        double lambdav;
    
        lambdav = 0.0;
        rbfsetalgothinplatespline(s, lambdav, _params);
    
    }
    
    public static void rbfsetalgothinplatespline(rbfmodel s) throws alglib.exception
    {
        alglib.xparams _params = null;
        double lambdav;
    
        lambdav = 0.0;
        rbfsetalgothinplatespline(s, lambdav, _params);
    
    }
    private static native int _jni_rbfsetalgothinplatespline(mut_string error_msg, long s, double lambdav, long _xparams);

    public static void rbfsetalgomultiquadricmanual(rbfmodel s, double alpha, double lambdav, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultiquadricmanual() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultiquadricmanual() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgomultiquadricmanual(error_msg, s.get_ptr(), alpha, lambdav, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgomultiquadricmanual");
    }
    public static void rbfsetalgomultiquadricmanual(rbfmodel s, double alpha, double lambdav) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultiquadricmanual() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultiquadricmanual() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgomultiquadricmanual(error_msg, s.get_ptr(), alpha, lambdav, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgomultiquadricmanual");
    }
            
    public static void rbfsetalgomultiquadricmanual(rbfmodel s, double alpha, alglib.xparams _params) throws alglib.exception
    {
        double lambdav;
    
        lambdav = 0.0;
        rbfsetalgomultiquadricmanual(s, alpha, lambdav, _params);
    
    }
    
    public static void rbfsetalgomultiquadricmanual(rbfmodel s, double alpha) throws alglib.exception
    {
        alglib.xparams _params = null;
        double lambdav;
    
        lambdav = 0.0;
        rbfsetalgomultiquadricmanual(s, alpha, lambdav, _params);
    
    }
    private static native int _jni_rbfsetalgomultiquadricmanual(mut_string error_msg, long s, double alpha, double lambdav, long _xparams);

    public static void rbfsetalgomultiquadricauto(rbfmodel s, double lambdav, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultiquadricauto() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultiquadricauto() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgomultiquadricauto(error_msg, s.get_ptr(), lambdav, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgomultiquadricauto");
    }
    public static void rbfsetalgomultiquadricauto(rbfmodel s, double lambdav) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultiquadricauto() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgomultiquadricauto() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgomultiquadricauto(error_msg, s.get_ptr(), lambdav, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgomultiquadricauto");
    }
            
    public static void rbfsetalgomultiquadricauto(rbfmodel s, alglib.xparams _params) throws alglib.exception
    {
        double lambdav;
    
        lambdav = 0.0;
        rbfsetalgomultiquadricauto(s, lambdav, _params);
    
    }
    
    public static void rbfsetalgomultiquadricauto(rbfmodel s) throws alglib.exception
    {
        alglib.xparams _params = null;
        double lambdav;
    
        lambdav = 0.0;
        rbfsetalgomultiquadricauto(s, lambdav, _params);
    
    }
    private static native int _jni_rbfsetalgomultiquadricauto(mut_string error_msg, long s, double lambdav, long _xparams);

    public static void rbfsetalgobiharmonic(rbfmodel s, double lambdav, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgobiharmonic() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgobiharmonic() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgobiharmonic(error_msg, s.get_ptr(), lambdav, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgobiharmonic");
    }
    public static void rbfsetalgobiharmonic(rbfmodel s, double lambdav) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgobiharmonic() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetalgobiharmonic() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetalgobiharmonic(error_msg, s.get_ptr(), lambdav, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetalgobiharmonic");
    }
            
    public static void rbfsetalgobiharmonic(rbfmodel s, alglib.xparams _params) throws alglib.exception
    {
        double lambdav;
    
        lambdav = 0.0;
        rbfsetalgobiharmonic(s, lambdav, _params);
    
    }
    
    public static void rbfsetalgobiharmonic(rbfmodel s) throws alglib.exception
    {
        alglib.xparams _params = null;
        double lambdav;
    
        lambdav = 0.0;
        rbfsetalgobiharmonic(s, lambdav, _params);
    
    }
    private static native int _jni_rbfsetalgobiharmonic(mut_string error_msg, long s, double lambdav, long _xparams);

    public static void rbfsetlinterm(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetlinterm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetlinterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetlinterm(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetlinterm");
    }
    public static void rbfsetlinterm(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetlinterm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetlinterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetlinterm(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetlinterm");
    }
    private static native int _jni_rbfsetlinterm(mut_string error_msg, long s, long _xparams);

    public static void rbfsetconstterm(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetconstterm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetconstterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetconstterm(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetconstterm");
    }
    public static void rbfsetconstterm(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetconstterm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetconstterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetconstterm(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetconstterm");
    }
    private static native int _jni_rbfsetconstterm(mut_string error_msg, long s, long _xparams);

    public static void rbfsetzeroterm(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetzeroterm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetzeroterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetzeroterm(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetzeroterm");
    }
    public static void rbfsetzeroterm(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetzeroterm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetzeroterm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetzeroterm(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetzeroterm");
    }
    private static native int _jni_rbfsetzeroterm(mut_string error_msg, long s, long _xparams);

    public static void rbfsetv2bf(rbfmodel s, int bf, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2bf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2bf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetv2bf(error_msg, s.get_ptr(), bf, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetv2bf");
    }
    public static void rbfsetv2bf(rbfmodel s, int bf) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2bf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2bf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetv2bf(error_msg, s.get_ptr(), bf, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetv2bf");
    }
    private static native int _jni_rbfsetv2bf(mut_string error_msg, long s, int bf, long _xparams);

    public static void rbfsetv2its(rbfmodel s, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2its() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2its() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetv2its(error_msg, s.get_ptr(), maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetv2its");
    }
    public static void rbfsetv2its(rbfmodel s, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2its() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2its() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetv2its(error_msg, s.get_ptr(), maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetv2its");
    }
    private static native int _jni_rbfsetv2its(mut_string error_msg, long s, int maxits, long _xparams);

    public static void rbfsetv2supportr(rbfmodel s, double r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2supportr() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2supportr() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetv2supportr(error_msg, s.get_ptr(), r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetv2supportr");
    }
    public static void rbfsetv2supportr(rbfmodel s, double r) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2supportr() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv2supportr() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetv2supportr(error_msg, s.get_ptr(), r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetv2supportr");
    }
    private static native int _jni_rbfsetv2supportr(mut_string error_msg, long s, double r, long _xparams);

    public static void rbfsetv3tol(rbfmodel s, double tol, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv3tol() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv3tol() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetv3tol(error_msg, s.get_ptr(), tol, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetv3tol");
    }
    public static void rbfsetv3tol(rbfmodel s, double tol) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv3tol() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetv3tol() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetv3tol(error_msg, s.get_ptr(), tol, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetv3tol");
    }
    private static native int _jni_rbfsetv3tol(mut_string error_msg, long s, double tol, long _xparams);

    public static rbfreport rbfbuildmodel(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfbuildmodel() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfbuildmodel() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfbuildmodel(error_msg, s.get_ptr(), lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfbuildmodel");
        return (rbfreport)lcl_rep.val;
    }
    public static rbfreport rbfbuildmodel(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfbuildmodel() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfbuildmodel() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfbuildmodel(error_msg, s.get_ptr(), lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfbuildmodel");
        return (rbfreport)lcl_rep.val;
    }
    private static native int _jni_rbfbuildmodel(mut_string error_msg, long s, mut_object rep, long _xparams);

    public static double rbfcalc1(rbfmodel s, double x0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc1() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalc1(error_msg, lcl_result, s.get_ptr(), x0, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalc1");
        return lcl_result.val;
    }
    public static double rbfcalc1(rbfmodel s, double x0) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc1() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalc1(error_msg, lcl_result, s.get_ptr(), x0, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalc1");
        return lcl_result.val;
    }
    private static native int _jni_rbfcalc1(mut_string error_msg, mut_double result, long s, double x0, long _xparams);

    public static double rbfcalc2(rbfmodel s, double x0, double x1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalc2(error_msg, lcl_result, s.get_ptr(), x0, x1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalc2");
        return lcl_result.val;
    }
    public static double rbfcalc2(rbfmodel s, double x0, double x1) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalc2(error_msg, lcl_result, s.get_ptr(), x0, x1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalc2");
        return lcl_result.val;
    }
    private static native int _jni_rbfcalc2(mut_string error_msg, mut_double result, long s, double x0, double x1, long _xparams);

    public static double rbfcalc3(rbfmodel s, double x0, double x1, double x2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc3() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc3() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalc3(error_msg, lcl_result, s.get_ptr(), x0, x1, x2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalc3");
        return lcl_result.val;
    }
    public static double rbfcalc3(rbfmodel s, double x0, double x1, double x2) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc3() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc3() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalc3(error_msg, lcl_result, s.get_ptr(), x0, x1, x2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalc3");
        return lcl_result.val;
    }
    private static native int _jni_rbfcalc3(mut_string error_msg, mut_double result, long s, double x0, double x1, double x2, long _xparams);

    public static class rbfdiff1_results
    {
        public double y;
        public double dy0;
    }
    public static rbfdiff1_results rbfdiff1(rbfmodel s, double x0, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy0 = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff1() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiff1(error_msg, s.get_ptr(), x0, lcl_y, lcl_dy0, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiff1");
        rbfdiff1_results ret_tuple = new rbfdiff1_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy0 = lcl_dy0.val;
        return ret_tuple;
    }
    public static rbfdiff1_results rbfdiff1(rbfmodel s, double x0) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy0 = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff1() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff1() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiff1(error_msg, s.get_ptr(), x0, lcl_y, lcl_dy0, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiff1");
        rbfdiff1_results ret_tuple = new rbfdiff1_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy0 = lcl_dy0.val;
        return ret_tuple;
    }
    private static native int _jni_rbfdiff1(mut_string error_msg, long s, double x0, mut_double y, mut_double dy0, long _xparams);

    public static class rbfdiff2_results
    {
        public double y;
        public double dy0;
        public double dy1;
    }
    public static rbfdiff2_results rbfdiff2(rbfmodel s, double x0, double x1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy0 = new mut_double();
        mut_double lcl_dy1 = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiff2(error_msg, s.get_ptr(), x0, x1, lcl_y, lcl_dy0, lcl_dy1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiff2");
        rbfdiff2_results ret_tuple = new rbfdiff2_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy0 = lcl_dy0.val;
        ret_tuple.dy1 = lcl_dy1.val;
        return ret_tuple;
    }
    public static rbfdiff2_results rbfdiff2(rbfmodel s, double x0, double x1) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy0 = new mut_double();
        mut_double lcl_dy1 = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiff2(error_msg, s.get_ptr(), x0, x1, lcl_y, lcl_dy0, lcl_dy1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiff2");
        rbfdiff2_results ret_tuple = new rbfdiff2_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy0 = lcl_dy0.val;
        ret_tuple.dy1 = lcl_dy1.val;
        return ret_tuple;
    }
    private static native int _jni_rbfdiff2(mut_string error_msg, long s, double x0, double x1, mut_double y, mut_double dy0, mut_double dy1, long _xparams);

    public static class rbfdiff3_results
    {
        public double y;
        public double dy0;
        public double dy1;
        public double dy2;
    }
    public static rbfdiff3_results rbfdiff3(rbfmodel s, double x0, double x1, double x2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy0 = new mut_double();
        mut_double lcl_dy1 = new mut_double();
        mut_double lcl_dy2 = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff3() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff3() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiff3(error_msg, s.get_ptr(), x0, x1, x2, lcl_y, lcl_dy0, lcl_dy1, lcl_dy2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiff3");
        rbfdiff3_results ret_tuple = new rbfdiff3_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy0 = lcl_dy0.val;
        ret_tuple.dy1 = lcl_dy1.val;
        ret_tuple.dy2 = lcl_dy2.val;
        return ret_tuple;
    }
    public static rbfdiff3_results rbfdiff3(rbfmodel s, double x0, double x1, double x2) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_y = new mut_double();
        mut_double lcl_dy0 = new mut_double();
        mut_double lcl_dy1 = new mut_double();
        mut_double lcl_dy2 = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff3() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff3() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiff3(error_msg, s.get_ptr(), x0, x1, x2, lcl_y, lcl_dy0, lcl_dy1, lcl_dy2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiff3");
        rbfdiff3_results ret_tuple = new rbfdiff3_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy0 = lcl_dy0.val;
        ret_tuple.dy1 = lcl_dy1.val;
        ret_tuple.dy2 = lcl_dy2.val;
        return ret_tuple;
    }
    private static native int _jni_rbfdiff3(mut_string error_msg, long s, double x0, double x1, double x2, mut_double y, mut_double dy0, mut_double dy1, mut_double dy2, long _xparams);

    public static void rbfsetfastevaltol(rbfmodel s, double tol, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetfastevaltol() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetfastevaltol() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetfastevaltol(error_msg, s.get_ptr(), tol, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetfastevaltol");
    }
    public static void rbfsetfastevaltol(rbfmodel s, double tol) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetfastevaltol() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfsetfastevaltol() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfsetfastevaltol(error_msg, s.get_ptr(), tol, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfsetfastevaltol");
    }
    private static native int _jni_rbfsetfastevaltol(mut_string error_msg, long s, double tol, long _xparams);

    public static double[] rbffastcalc(rbfmodel s, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbffastcalc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbffastcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbffastcalc(error_msg, s.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbffastcalc");
        return lcl_y.val;
    }
    public static double[] rbffastcalc(rbfmodel s, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbffastcalc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbffastcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbffastcalc(error_msg, s.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbffastcalc");
        return lcl_y.val;
    }
    private static native int _jni_rbffastcalc(mut_string error_msg, long s, double[] x, rlc_double1d y, long _xparams);

    public static double[] rbfcalc(rbfmodel s, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalc(error_msg, s.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalc");
        return lcl_y.val;
    }
    public static double[] rbfcalc(rbfmodel s, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalc(error_msg, s.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalc");
        return lcl_y.val;
    }
    private static native int _jni_rbfcalc(mut_string error_msg, long s, double[] x, rlc_double1d y, long _xparams);

    public static class rbfdiff_results
    {
        public double[] y;
        public double[] dy;
    }
    public static rbfdiff_results rbfdiff(rbfmodel s, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        rlc_double1d lcl_dy = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiff(error_msg, s.get_ptr(), x, lcl_y, lcl_dy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiff");
        rbfdiff_results ret_tuple = new rbfdiff_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        return ret_tuple;
    }
    public static rbfdiff_results rbfdiff(rbfmodel s, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        rlc_double1d lcl_dy = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiff() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiff(error_msg, s.get_ptr(), x, lcl_y, lcl_dy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiff");
        rbfdiff_results ret_tuple = new rbfdiff_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        return ret_tuple;
    }
    private static native int _jni_rbfdiff(mut_string error_msg, long s, double[] x, rlc_double1d y, rlc_double1d dy, long _xparams);

    public static class rbfhess_results
    {
        public double[] y;
        public double[] dy;
        public double[] d2y;
    }
    public static rbfhess_results rbfhess(rbfmodel s, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        rlc_double1d lcl_dy = new rlc_double1d();
        rlc_double1d lcl_d2y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfhess() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfhess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfhess(error_msg, s.get_ptr(), x, lcl_y, lcl_dy, lcl_d2y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfhess");
        rbfhess_results ret_tuple = new rbfhess_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        return ret_tuple;
    }
    public static rbfhess_results rbfhess(rbfmodel s, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        rlc_double1d lcl_dy = new rlc_double1d();
        rlc_double1d lcl_d2y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfhess() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfhess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfhess(error_msg, s.get_ptr(), x, lcl_y, lcl_dy, lcl_d2y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfhess");
        rbfhess_results ret_tuple = new rbfhess_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        return ret_tuple;
    }
    private static native int _jni_rbfhess(mut_string error_msg, long s, double[] x, rlc_double1d y, rlc_double1d dy, rlc_double1d d2y, long _xparams);

    public static double[] rbfcalcbuf(rbfmodel s, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalcbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalcbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalcbuf(error_msg, s.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalcbuf");
        return lcl_y.val;
    }
    public static double[] rbfcalcbuf(rbfmodel s, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalcbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfcalcbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfcalcbuf(error_msg, s.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfcalcbuf");
        return lcl_y.val;
    }
    private static native int _jni_rbfcalcbuf(mut_string error_msg, long s, double[] x, rlc_double1d y, long _xparams);

    public static class rbfdiffbuf_results
    {
        public double[] y;
        public double[] dy;
    }
    public static rbfdiffbuf_results rbfdiffbuf(rbfmodel s, double[] x, double[] y, double[] dy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        rlc_double1d lcl_dy = new rlc_double1d(dy);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiffbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiffbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiffbuf(error_msg, s.get_ptr(), x, lcl_y, lcl_dy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiffbuf");
        rbfdiffbuf_results ret_tuple = new rbfdiffbuf_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        return ret_tuple;
    }
    public static rbfdiffbuf_results rbfdiffbuf(rbfmodel s, double[] x, double[] y, double[] dy) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        rlc_double1d lcl_dy = new rlc_double1d(dy);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiffbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfdiffbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfdiffbuf(error_msg, s.get_ptr(), x, lcl_y, lcl_dy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfdiffbuf");
        rbfdiffbuf_results ret_tuple = new rbfdiffbuf_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        return ret_tuple;
    }
    private static native int _jni_rbfdiffbuf(mut_string error_msg, long s, double[] x, rlc_double1d y, rlc_double1d dy, long _xparams);

    public static class rbfhessbuf_results
    {
        public double[] y;
        public double[] dy;
        public double[] d2y;
    }
    public static rbfhessbuf_results rbfhessbuf(rbfmodel s, double[] x, double[] y, double[] dy, double[] d2y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        rlc_double1d lcl_dy = new rlc_double1d(dy);
        rlc_double1d lcl_d2y = new rlc_double1d(d2y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfhessbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfhessbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfhessbuf(error_msg, s.get_ptr(), x, lcl_y, lcl_dy, lcl_d2y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfhessbuf");
        rbfhessbuf_results ret_tuple = new rbfhessbuf_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        return ret_tuple;
    }
    public static rbfhessbuf_results rbfhessbuf(rbfmodel s, double[] x, double[] y, double[] dy, double[] d2y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        rlc_double1d lcl_dy = new rlc_double1d(dy);
        rlc_double1d lcl_d2y = new rlc_double1d(d2y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfhessbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfhessbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfhessbuf(error_msg, s.get_ptr(), x, lcl_y, lcl_dy, lcl_d2y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfhessbuf");
        rbfhessbuf_results ret_tuple = new rbfhessbuf_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        return ret_tuple;
    }
    private static native int _jni_rbfhessbuf(mut_string error_msg, long s, double[] x, rlc_double1d y, rlc_double1d dy, rlc_double1d d2y, long _xparams);

    public static double[] rbftscalcbuf(rbfmodel s, rbfcalcbuffer buf, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftscalcbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftscalcbuf() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftscalcbuf() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftscalcbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbftscalcbuf(error_msg, s.get_ptr(), buf.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbftscalcbuf");
        return lcl_y.val;
    }
    public static double[] rbftscalcbuf(rbfmodel s, rbfcalcbuffer buf, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftscalcbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftscalcbuf() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftscalcbuf() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftscalcbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbftscalcbuf(error_msg, s.get_ptr(), buf.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbftscalcbuf");
        return lcl_y.val;
    }
    private static native int _jni_rbftscalcbuf(mut_string error_msg, long s, long buf, double[] x, rlc_double1d y, long _xparams);

    public static class rbftsdiffbuf_results
    {
        public double[] y;
        public double[] dy;
    }
    public static rbftsdiffbuf_results rbftsdiffbuf(rbfmodel s, rbfcalcbuffer buf, double[] x, double[] y, double[] dy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        rlc_double1d lcl_dy = new rlc_double1d(dy);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftsdiffbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftsdiffbuf() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftsdiffbuf() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftsdiffbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbftsdiffbuf(error_msg, s.get_ptr(), buf.get_ptr(), x, lcl_y, lcl_dy, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbftsdiffbuf");
        rbftsdiffbuf_results ret_tuple = new rbftsdiffbuf_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        return ret_tuple;
    }
    public static rbftsdiffbuf_results rbftsdiffbuf(rbfmodel s, rbfcalcbuffer buf, double[] x, double[] y, double[] dy) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        rlc_double1d lcl_dy = new rlc_double1d(dy);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftsdiffbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftsdiffbuf() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftsdiffbuf() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftsdiffbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbftsdiffbuf(error_msg, s.get_ptr(), buf.get_ptr(), x, lcl_y, lcl_dy, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbftsdiffbuf");
        rbftsdiffbuf_results ret_tuple = new rbftsdiffbuf_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        return ret_tuple;
    }
    private static native int _jni_rbftsdiffbuf(mut_string error_msg, long s, long buf, double[] x, rlc_double1d y, rlc_double1d dy, long _xparams);

    public static class rbftshessbuf_results
    {
        public double[] y;
        public double[] dy;
        public double[] d2y;
    }
    public static rbftshessbuf_results rbftshessbuf(rbfmodel s, rbfcalcbuffer buf, double[] x, double[] y, double[] dy, double[] d2y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        rlc_double1d lcl_dy = new rlc_double1d(dy);
        rlc_double1d lcl_d2y = new rlc_double1d(d2y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftshessbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftshessbuf() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftshessbuf() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftshessbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbftshessbuf(error_msg, s.get_ptr(), buf.get_ptr(), x, lcl_y, lcl_dy, lcl_d2y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbftshessbuf");
        rbftshessbuf_results ret_tuple = new rbftshessbuf_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        return ret_tuple;
    }
    public static rbftshessbuf_results rbftshessbuf(rbfmodel s, rbfcalcbuffer buf, double[] x, double[] y, double[] dy, double[] d2y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        rlc_double1d lcl_dy = new rlc_double1d(dy);
        rlc_double1d lcl_d2y = new rlc_double1d(d2y);
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftshessbuf() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbftshessbuf() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftshessbuf() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of rbftshessbuf() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbftshessbuf(error_msg, s.get_ptr(), buf.get_ptr(), x, lcl_y, lcl_dy, lcl_d2y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbftshessbuf");
        rbftshessbuf_results ret_tuple = new rbftshessbuf_results();
        ret_tuple.y = lcl_y.val;
        ret_tuple.dy = lcl_dy.val;
        ret_tuple.d2y = lcl_d2y.val;
        return ret_tuple;
    }
    private static native int _jni_rbftshessbuf(mut_string error_msg, long s, long buf, double[] x, rlc_double1d y, rlc_double1d dy, rlc_double1d d2y, long _xparams);

    public static double[][] rbfgridcalc2(rbfmodel s, double[] x0, int n0, double[] x1, int n1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_y = new rlc_double2d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc2(error_msg, s.get_ptr(), x0, n0, x1, n1, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc2");
        return lcl_y.val;
    }
    public static double[][] rbfgridcalc2(rbfmodel s, double[] x0, int n0, double[] x1, int n1) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_y = new rlc_double2d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc2(error_msg, s.get_ptr(), x0, n0, x1, n1, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc2");
        return lcl_y.val;
    }
    private static native int _jni_rbfgridcalc2(mut_string error_msg, long s, double[] x0, int n0, double[] x1, int n1, rlc_double2d y, long _xparams);

    public static double[] rbfgridcalc2v(rbfmodel s, double[] x0, int n0, double[] x1, int n1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2v() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2v() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc2v(error_msg, s.get_ptr(), x0, n0, x1, n1, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc2v");
        return lcl_y.val;
    }
    public static double[] rbfgridcalc2v(rbfmodel s, double[] x0, int n0, double[] x1, int n1) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2v() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2v() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc2v(error_msg, s.get_ptr(), x0, n0, x1, n1, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc2v");
        return lcl_y.val;
    }
    private static native int _jni_rbfgridcalc2v(mut_string error_msg, long s, double[] x0, int n0, double[] x1, int n1, rlc_double1d y, long _xparams);

    public static double[] rbfgridcalc2vsubset(rbfmodel s, double[] x0, int n0, double[] x1, int n1, boolean[] flagy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2vsubset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2vsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc2vsubset(error_msg, s.get_ptr(), x0, n0, x1, n1, flagy, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc2vsubset");
        return lcl_y.val;
    }
    public static double[] rbfgridcalc2vsubset(rbfmodel s, double[] x0, int n0, double[] x1, int n1, boolean[] flagy) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2vsubset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc2vsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc2vsubset(error_msg, s.get_ptr(), x0, n0, x1, n1, flagy, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc2vsubset");
        return lcl_y.val;
    }
    private static native int _jni_rbfgridcalc2vsubset(mut_string error_msg, long s, double[] x0, int n0, double[] x1, int n1, boolean[] flagy, rlc_double1d y, long _xparams);

    public static double[] rbfgridcalc3v(rbfmodel s, double[] x0, int n0, double[] x1, int n1, double[] x2, int n2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc3v() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc3v() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc3v(error_msg, s.get_ptr(), x0, n0, x1, n1, x2, n2, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc3v");
        return lcl_y.val;
    }
    public static double[] rbfgridcalc3v(rbfmodel s, double[] x0, int n0, double[] x1, int n1, double[] x2, int n2) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc3v() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc3v() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc3v(error_msg, s.get_ptr(), x0, n0, x1, n1, x2, n2, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc3v");
        return lcl_y.val;
    }
    private static native int _jni_rbfgridcalc3v(mut_string error_msg, long s, double[] x0, int n0, double[] x1, int n1, double[] x2, int n2, rlc_double1d y, long _xparams);

    public static double[] rbfgridcalc3vsubset(rbfmodel s, double[] x0, int n0, double[] x1, int n1, double[] x2, int n2, boolean[] flagy, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc3vsubset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc3vsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc3vsubset(error_msg, s.get_ptr(), x0, n0, x1, n1, x2, n2, flagy, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc3vsubset");
        return lcl_y.val;
    }
    public static double[] rbfgridcalc3vsubset(rbfmodel s, double[] x0, int n0, double[] x1, int n1, double[] x2, int n2, boolean[] flagy) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc3vsubset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgridcalc3vsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgridcalc3vsubset(error_msg, s.get_ptr(), x0, n0, x1, n1, x2, n2, flagy, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgridcalc3vsubset");
        return lcl_y.val;
    }
    private static native int _jni_rbfgridcalc3vsubset(mut_string error_msg, long s, double[] x0, int n0, double[] x1, int n1, double[] x2, int n2, boolean[] flagy, rlc_double1d y, long _xparams);

    public static class rbfunpack_results
    {
        public int nx;
        public int ny;
        public double[][] xwr;
        public int nc;
        public double[][] v;
        public int modelversion;
    }
    public static rbfunpack_results rbfunpack(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_nx = new mut_int();
        mut_int lcl_ny = new mut_int();
        rlc_double2d lcl_xwr = new rlc_double2d();
        mut_int lcl_nc = new mut_int();
        rlc_double2d lcl_v = new rlc_double2d();
        mut_int lcl_modelversion = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfunpack() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfunpack(error_msg, s.get_ptr(), lcl_nx, lcl_ny, lcl_xwr, lcl_nc, lcl_v, lcl_modelversion, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfunpack");
        rbfunpack_results ret_tuple = new rbfunpack_results();
        ret_tuple.nx = lcl_nx.val;
        ret_tuple.ny = lcl_ny.val;
        ret_tuple.xwr = lcl_xwr.val;
        ret_tuple.nc = lcl_nc.val;
        ret_tuple.v = lcl_v.val;
        ret_tuple.modelversion = lcl_modelversion.val;
        return ret_tuple;
    }
    public static rbfunpack_results rbfunpack(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_nx = new mut_int();
        mut_int lcl_ny = new mut_int();
        rlc_double2d lcl_xwr = new rlc_double2d();
        mut_int lcl_nc = new mut_int();
        rlc_double2d lcl_v = new rlc_double2d();
        mut_int lcl_modelversion = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfunpack() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfunpack(error_msg, s.get_ptr(), lcl_nx, lcl_ny, lcl_xwr, lcl_nc, lcl_v, lcl_modelversion, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfunpack");
        rbfunpack_results ret_tuple = new rbfunpack_results();
        ret_tuple.nx = lcl_nx.val;
        ret_tuple.ny = lcl_ny.val;
        ret_tuple.xwr = lcl_xwr.val;
        ret_tuple.nc = lcl_nc.val;
        ret_tuple.v = lcl_v.val;
        ret_tuple.modelversion = lcl_modelversion.val;
        return ret_tuple;
    }
    private static native int _jni_rbfunpack(mut_string error_msg, long s, mut_int nx, mut_int ny, rlc_double2d xwr, mut_int nc, rlc_double2d v, mut_int modelversion, long _xparams);

    public static int rbfgetmodelversion(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgetmodelversion() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgetmodelversion() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgetmodelversion(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgetmodelversion");
        return lcl_result.val;
    }
    public static int rbfgetmodelversion(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgetmodelversion() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfgetmodelversion() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfgetmodelversion(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfgetmodelversion");
        return lcl_result.val;
    }
    private static native int _jni_rbfgetmodelversion(mut_string error_msg, mut_int result, long s, long _xparams);

    public static double rbfpeekprogress(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfpeekprogress() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfpeekprogress() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfpeekprogress(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfpeekprogress");
        return lcl_result.val;
    }
    public static double rbfpeekprogress(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfpeekprogress() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfpeekprogress() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfpeekprogress(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfpeekprogress");
        return lcl_result.val;
    }
    private static native int _jni_rbfpeekprogress(mut_string error_msg, mut_double result, long s, long _xparams);

    public static void rbfrequesttermination(rbfmodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfrequesttermination() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfrequesttermination(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfrequesttermination");
    }
    public static void rbfrequesttermination(rbfmodel s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfrequesttermination() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of rbfrequesttermination() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_rbfrequesttermination(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "rbfrequesttermination");
    }
    private static native int _jni_rbfrequesttermination(mut_string error_msg, long s, long _xparams);

    
    
    //
    // Subpackage fft
    //
    
    public static void fftc1d(complex[] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftc1d(error_msg, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftc1d");
    }
    public static void fftc1d(complex[] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftc1d(error_msg, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftc1d");
    }
            
    public static void fftc1d(complex[] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = a.length;
        fftc1d(a, n, _params);
    
    }
    
    public static void fftc1d(complex[] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = a.length;
        fftc1d(a, n, _params);
    
    }
    private static native int _jni_fftc1d(mut_string error_msg, complex[] a, int n, long _xparams);

    public static void fftc1dinv(complex[] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftc1dinv(error_msg, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftc1dinv");
    }
    public static void fftc1dinv(complex[] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftc1dinv(error_msg, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftc1dinv");
    }
            
    public static void fftc1dinv(complex[] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = a.length;
        fftc1dinv(a, n, _params);
    
    }
    
    public static void fftc1dinv(complex[] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = a.length;
        fftc1dinv(a, n, _params);
    
    }
    private static native int _jni_fftc1dinv(mut_string error_msg, complex[] a, int n, long _xparams);

    public static complex[] fftr1d(double[] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_f = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftr1d(error_msg, a, n, lcl_f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftr1d");
        return lcl_f.val;
    }
    public static complex[] fftr1d(double[] a, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_f = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftr1d(error_msg, a, n, lcl_f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftr1d");
        return lcl_f.val;
    }
            
    public static complex[] fftr1d(double[] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = a.length;
        return fftr1d(a, n, _params);
    
    }
    
    public static complex[] fftr1d(double[] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = a.length;
        return fftr1d(a, n, _params);
    
    }
    private static native int _jni_fftr1d(mut_string error_msg, double[] a, int n, rlc_complex1d f, long _xparams);

    public static complex[] fftr1dbuf(double[] a, int n, complex[] f, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_f = new rlc_complex1d(f);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftr1dbuf(error_msg, a, n, lcl_f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftr1dbuf");
        return lcl_f.val;
    }
    public static complex[] fftr1dbuf(double[] a, int n, complex[] f) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_f = new rlc_complex1d(f);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftr1dbuf(error_msg, a, n, lcl_f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftr1dbuf");
        return lcl_f.val;
    }
            
    public static complex[] fftr1dbuf(double[] a, complex[] f, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = a.length;
        return fftr1dbuf(a, n, f, _params);
    
    }
    
    public static complex[] fftr1dbuf(double[] a, complex[] f) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = a.length;
        return fftr1dbuf(a, n, f, _params);
    
    }
    private static native int _jni_fftr1dbuf(mut_string error_msg, double[] a, int n, rlc_complex1d f, long _xparams);

    public static double[] fftr1dinv(complex[] f, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftr1dinv(error_msg, f, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftr1dinv");
        return lcl_a.val;
    }
    public static double[] fftr1dinv(complex[] f, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftr1dinv(error_msg, f, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftr1dinv");
        return lcl_a.val;
    }
            
    public static double[] fftr1dinv(complex[] f, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = f.length;
        return fftr1dinv(f, n, _params);
    
    }
    
    public static double[] fftr1dinv(complex[] f) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = f.length;
        return fftr1dinv(f, n, _params);
    
    }
    private static native int _jni_fftr1dinv(mut_string error_msg, complex[] f, int n, rlc_double1d a, long _xparams);

    public static double[] fftr1dinvbuf(complex[] f, int n, double[] a, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftr1dinvbuf(error_msg, f, n, lcl_a, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftr1dinvbuf");
        return lcl_a.val;
    }
    public static double[] fftr1dinvbuf(complex[] f, int n, double[] a) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d(a);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fftr1dinvbuf(error_msg, f, n, lcl_a, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fftr1dinvbuf");
        return lcl_a.val;
    }
            
    public static double[] fftr1dinvbuf(complex[] f, double[] a, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = f.length;
        return fftr1dinvbuf(f, n, a, _params);
    
    }
    
    public static double[] fftr1dinvbuf(complex[] f, double[] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = f.length;
        return fftr1dinvbuf(f, n, a, _params);
    
    }
    private static native int _jni_fftr1dinvbuf(mut_string error_msg, complex[] f, int n, rlc_double1d a, long _xparams);

    
    
    //
    // Subpackage fht
    //
    
    public static void fhtr1d(double[] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fhtr1d(error_msg, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fhtr1d");
    }
    public static void fhtr1d(double[] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fhtr1d(error_msg, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fhtr1d");
    }
    private static native int _jni_fhtr1d(mut_string error_msg, double[] a, int n, long _xparams);

    public static void fhtr1dinv(double[] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fhtr1dinv(error_msg, a, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fhtr1dinv");
    }
    public static void fhtr1dinv(double[] a, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fhtr1dinv(error_msg, a, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fhtr1dinv");
    }
    private static native int _jni_fhtr1dinv(mut_string error_msg, double[] a, int n, long _xparams);

    
    
    //
    // Subpackage conv
    //
    
    public static complex[] convc1d(complex[] a, int m, complex[] b, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1d(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1d");
        return lcl_r.val;
    }
    public static complex[] convc1d(complex[] a, int m, complex[] b, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1d(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1d");
        return lcl_r.val;
    }
    private static native int _jni_convc1d(mut_string error_msg, complex[] a, int m, complex[] b, int n, rlc_complex1d r, long _xparams);

    public static complex[] convc1dbuf(complex[] a, int m, complex[] b, int n, complex[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dbuf(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dbuf");
        return lcl_r.val;
    }
    public static complex[] convc1dbuf(complex[] a, int m, complex[] b, int n, complex[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dbuf(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dbuf");
        return lcl_r.val;
    }
    private static native int _jni_convc1dbuf(mut_string error_msg, complex[] a, int m, complex[] b, int n, rlc_complex1d r, long _xparams);

    public static complex[] convc1dinv(complex[] a, int m, complex[] b, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dinv(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dinv");
        return lcl_r.val;
    }
    public static complex[] convc1dinv(complex[] a, int m, complex[] b, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dinv(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dinv");
        return lcl_r.val;
    }
    private static native int _jni_convc1dinv(mut_string error_msg, complex[] a, int m, complex[] b, int n, rlc_complex1d r, long _xparams);

    public static complex[] convc1dinvbuf(complex[] a, int m, complex[] b, int n, complex[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dinvbuf(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dinvbuf");
        return lcl_r.val;
    }
    public static complex[] convc1dinvbuf(complex[] a, int m, complex[] b, int n, complex[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dinvbuf(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dinvbuf");
        return lcl_r.val;
    }
    private static native int _jni_convc1dinvbuf(mut_string error_msg, complex[] a, int m, complex[] b, int n, rlc_complex1d r, long _xparams);

    public static complex[] convc1dcircular(complex[] s, int m, complex[] r, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_c = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dcircular(error_msg, s, m, r, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dcircular");
        return lcl_c.val;
    }
    public static complex[] convc1dcircular(complex[] s, int m, complex[] r, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_c = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dcircular(error_msg, s, m, r, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dcircular");
        return lcl_c.val;
    }
    private static native int _jni_convc1dcircular(mut_string error_msg, complex[] s, int m, complex[] r, int n, rlc_complex1d c, long _xparams);

    public static complex[] convc1dcircularbuf(complex[] s, int m, complex[] r, int n, complex[] c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_c = new rlc_complex1d(c);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dcircularbuf(error_msg, s, m, r, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dcircularbuf");
        return lcl_c.val;
    }
    public static complex[] convc1dcircularbuf(complex[] s, int m, complex[] r, int n, complex[] c) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_c = new rlc_complex1d(c);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dcircularbuf(error_msg, s, m, r, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dcircularbuf");
        return lcl_c.val;
    }
    private static native int _jni_convc1dcircularbuf(mut_string error_msg, complex[] s, int m, complex[] r, int n, rlc_complex1d c, long _xparams);

    public static complex[] convc1dcircularinv(complex[] a, int m, complex[] b, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dcircularinv(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dcircularinv");
        return lcl_r.val;
    }
    public static complex[] convc1dcircularinv(complex[] a, int m, complex[] b, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dcircularinv(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dcircularinv");
        return lcl_r.val;
    }
    private static native int _jni_convc1dcircularinv(mut_string error_msg, complex[] a, int m, complex[] b, int n, rlc_complex1d r, long _xparams);

    public static complex[] convc1dcircularinvbuf(complex[] a, int m, complex[] b, int n, complex[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dcircularinvbuf(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dcircularinvbuf");
        return lcl_r.val;
    }
    public static complex[] convc1dcircularinvbuf(complex[] a, int m, complex[] b, int n, complex[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convc1dcircularinvbuf(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convc1dcircularinvbuf");
        return lcl_r.val;
    }
    private static native int _jni_convc1dcircularinvbuf(mut_string error_msg, complex[] a, int m, complex[] b, int n, rlc_complex1d r, long _xparams);

    public static double[] convr1d(double[] a, int m, double[] b, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1d(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1d");
        return lcl_r.val;
    }
    public static double[] convr1d(double[] a, int m, double[] b, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1d(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1d");
        return lcl_r.val;
    }
    private static native int _jni_convr1d(mut_string error_msg, double[] a, int m, double[] b, int n, rlc_double1d r, long _xparams);

    public static double[] convr1dbuf(double[] a, int m, double[] b, int n, double[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dbuf(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dbuf");
        return lcl_r.val;
    }
    public static double[] convr1dbuf(double[] a, int m, double[] b, int n, double[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dbuf(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dbuf");
        return lcl_r.val;
    }
    private static native int _jni_convr1dbuf(mut_string error_msg, double[] a, int m, double[] b, int n, rlc_double1d r, long _xparams);

    public static double[] convr1dinv(double[] a, int m, double[] b, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dinv(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dinv");
        return lcl_r.val;
    }
    public static double[] convr1dinv(double[] a, int m, double[] b, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dinv(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dinv");
        return lcl_r.val;
    }
    private static native int _jni_convr1dinv(mut_string error_msg, double[] a, int m, double[] b, int n, rlc_double1d r, long _xparams);

    public static double[] convr1dinvbuf(double[] a, int m, double[] b, int n, double[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dinvbuf(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dinvbuf");
        return lcl_r.val;
    }
    public static double[] convr1dinvbuf(double[] a, int m, double[] b, int n, double[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dinvbuf(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dinvbuf");
        return lcl_r.val;
    }
    private static native int _jni_convr1dinvbuf(mut_string error_msg, double[] a, int m, double[] b, int n, rlc_double1d r, long _xparams);

    public static double[] convr1dcircular(double[] s, int m, double[] r, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dcircular(error_msg, s, m, r, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dcircular");
        return lcl_c.val;
    }
    public static double[] convr1dcircular(double[] s, int m, double[] r, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dcircular(error_msg, s, m, r, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dcircular");
        return lcl_c.val;
    }
    private static native int _jni_convr1dcircular(mut_string error_msg, double[] s, int m, double[] r, int n, rlc_double1d c, long _xparams);

    public static double[] convr1dcircularbuf(double[] s, int m, double[] r, int n, double[] c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d(c);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dcircularbuf(error_msg, s, m, r, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dcircularbuf");
        return lcl_c.val;
    }
    public static double[] convr1dcircularbuf(double[] s, int m, double[] r, int n, double[] c) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d(c);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dcircularbuf(error_msg, s, m, r, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dcircularbuf");
        return lcl_c.val;
    }
    private static native int _jni_convr1dcircularbuf(mut_string error_msg, double[] s, int m, double[] r, int n, rlc_double1d c, long _xparams);

    public static double[] convr1dcircularinv(double[] a, int m, double[] b, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dcircularinv(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dcircularinv");
        return lcl_r.val;
    }
    public static double[] convr1dcircularinv(double[] a, int m, double[] b, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dcircularinv(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dcircularinv");
        return lcl_r.val;
    }
    private static native int _jni_convr1dcircularinv(mut_string error_msg, double[] a, int m, double[] b, int n, rlc_double1d r, long _xparams);

    public static double[] convr1dcircularinvbuf(double[] a, int m, double[] b, int n, double[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dcircularinvbuf(error_msg, a, m, b, n, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dcircularinvbuf");
        return lcl_r.val;
    }
    public static double[] convr1dcircularinvbuf(double[] a, int m, double[] b, int n, double[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_convr1dcircularinvbuf(error_msg, a, m, b, n, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "convr1dcircularinvbuf");
        return lcl_r.val;
    }
    private static native int _jni_convr1dcircularinvbuf(mut_string error_msg, double[] a, int m, double[] b, int n, rlc_double1d r, long _xparams);

    
    
    //
    // Subpackage corr
    //
    
    public static complex[] corrc1d(complex[] signal, int n, complex[] pattern, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrc1d(error_msg, signal, n, pattern, m, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrc1d");
        return lcl_r.val;
    }
    public static complex[] corrc1d(complex[] signal, int n, complex[] pattern, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrc1d(error_msg, signal, n, pattern, m, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrc1d");
        return lcl_r.val;
    }
    private static native int _jni_corrc1d(mut_string error_msg, complex[] signal, int n, complex[] pattern, int m, rlc_complex1d r, long _xparams);

    public static complex[] corrc1dbuf(complex[] signal, int n, complex[] pattern, int m, complex[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrc1dbuf(error_msg, signal, n, pattern, m, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrc1dbuf");
        return lcl_r.val;
    }
    public static complex[] corrc1dbuf(complex[] signal, int n, complex[] pattern, int m, complex[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_r = new rlc_complex1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrc1dbuf(error_msg, signal, n, pattern, m, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrc1dbuf");
        return lcl_r.val;
    }
    private static native int _jni_corrc1dbuf(mut_string error_msg, complex[] signal, int n, complex[] pattern, int m, rlc_complex1d r, long _xparams);

    public static complex[] corrc1dcircular(complex[] signal, int m, complex[] pattern, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_c = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrc1dcircular(error_msg, signal, m, pattern, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrc1dcircular");
        return lcl_c.val;
    }
    public static complex[] corrc1dcircular(complex[] signal, int m, complex[] pattern, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_c = new rlc_complex1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrc1dcircular(error_msg, signal, m, pattern, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrc1dcircular");
        return lcl_c.val;
    }
    private static native int _jni_corrc1dcircular(mut_string error_msg, complex[] signal, int m, complex[] pattern, int n, rlc_complex1d c, long _xparams);

    public static complex[] corrc1dcircularbuf(complex[] signal, int m, complex[] pattern, int n, complex[] c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_c = new rlc_complex1d(c);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrc1dcircularbuf(error_msg, signal, m, pattern, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrc1dcircularbuf");
        return lcl_c.val;
    }
    public static complex[] corrc1dcircularbuf(complex[] signal, int m, complex[] pattern, int n, complex[] c) throws alglib.exception
    {
        activatealglibcore();
        rlc_complex1d lcl_c = new rlc_complex1d(c);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrc1dcircularbuf(error_msg, signal, m, pattern, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrc1dcircularbuf");
        return lcl_c.val;
    }
    private static native int _jni_corrc1dcircularbuf(mut_string error_msg, complex[] signal, int m, complex[] pattern, int n, rlc_complex1d c, long _xparams);

    public static double[] corrr1d(double[] signal, int n, double[] pattern, int m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrr1d(error_msg, signal, n, pattern, m, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrr1d");
        return lcl_r.val;
    }
    public static double[] corrr1d(double[] signal, int n, double[] pattern, int m) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrr1d(error_msg, signal, n, pattern, m, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrr1d");
        return lcl_r.val;
    }
    private static native int _jni_corrr1d(mut_string error_msg, double[] signal, int n, double[] pattern, int m, rlc_double1d r, long _xparams);

    public static double[] corrr1dbuf(double[] signal, int n, double[] pattern, int m, double[] r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrr1dbuf(error_msg, signal, n, pattern, m, lcl_r, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrr1dbuf");
        return lcl_r.val;
    }
    public static double[] corrr1dbuf(double[] signal, int n, double[] pattern, int m, double[] r) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_r = new rlc_double1d(r);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrr1dbuf(error_msg, signal, n, pattern, m, lcl_r, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrr1dbuf");
        return lcl_r.val;
    }
    private static native int _jni_corrr1dbuf(mut_string error_msg, double[] signal, int n, double[] pattern, int m, rlc_double1d r, long _xparams);

    public static double[] corrr1dcircular(double[] signal, int m, double[] pattern, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrr1dcircular(error_msg, signal, m, pattern, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrr1dcircular");
        return lcl_c.val;
    }
    public static double[] corrr1dcircular(double[] signal, int m, double[] pattern, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrr1dcircular(error_msg, signal, m, pattern, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrr1dcircular");
        return lcl_c.val;
    }
    private static native int _jni_corrr1dcircular(mut_string error_msg, double[] signal, int m, double[] pattern, int n, rlc_double1d c, long _xparams);

    public static double[] corrr1dcircularbuf(double[] signal, int m, double[] pattern, int n, double[] c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d(c);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrr1dcircularbuf(error_msg, signal, m, pattern, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrr1dcircularbuf");
        return lcl_c.val;
    }
    public static double[] corrr1dcircularbuf(double[] signal, int m, double[] pattern, int n, double[] c) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d(c);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_corrr1dcircularbuf(error_msg, signal, m, pattern, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "corrr1dcircularbuf");
        return lcl_c.val;
    }
    private static native int _jni_corrr1dcircularbuf(mut_string error_msg, double[] signal, int m, double[] pattern, int n, rlc_double1d c, long _xparams);

    
    
    //
    // Subpackage expintegrals
    //
    
    public static double exponentialintegralei(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_exponentialintegralei(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "exponentialintegralei");
        return lcl_result.val;
    }
    public static double exponentialintegralei(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_exponentialintegralei(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "exponentialintegralei");
        return lcl_result.val;
    }
    private static native int _jni_exponentialintegralei(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double exponentialintegralen(double x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_exponentialintegralen(error_msg, lcl_result, x, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "exponentialintegralen");
        return lcl_result.val;
    }
    public static double exponentialintegralen(double x, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_exponentialintegralen(error_msg, lcl_result, x, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "exponentialintegralen");
        return lcl_result.val;
    }
    private static native int _jni_exponentialintegralen(mut_string error_msg, mut_double result, double x, int n, long _xparams);

    
    
    //
    // Subpackage jacobianelliptic
    //
    
    public static class jacobianellipticfunctions_results
    {
        public double sn;
        public double cn;
        public double dn;
        public double ph;
    }
    public static jacobianellipticfunctions_results jacobianellipticfunctions(double u, double m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_sn = new mut_double();
        mut_double lcl_cn = new mut_double();
        mut_double lcl_dn = new mut_double();
        mut_double lcl_ph = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_jacobianellipticfunctions(error_msg, u, m, lcl_sn, lcl_cn, lcl_dn, lcl_ph, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "jacobianellipticfunctions");
        jacobianellipticfunctions_results ret_tuple = new jacobianellipticfunctions_results();
        ret_tuple.sn = lcl_sn.val;
        ret_tuple.cn = lcl_cn.val;
        ret_tuple.dn = lcl_dn.val;
        ret_tuple.ph = lcl_ph.val;
        return ret_tuple;
    }
    public static jacobianellipticfunctions_results jacobianellipticfunctions(double u, double m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_sn = new mut_double();
        mut_double lcl_cn = new mut_double();
        mut_double lcl_dn = new mut_double();
        mut_double lcl_ph = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_jacobianellipticfunctions(error_msg, u, m, lcl_sn, lcl_cn, lcl_dn, lcl_ph, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "jacobianellipticfunctions");
        jacobianellipticfunctions_results ret_tuple = new jacobianellipticfunctions_results();
        ret_tuple.sn = lcl_sn.val;
        ret_tuple.cn = lcl_cn.val;
        ret_tuple.dn = lcl_dn.val;
        ret_tuple.ph = lcl_ph.val;
        return ret_tuple;
    }
    private static native int _jni_jacobianellipticfunctions(mut_string error_msg, double u, double m, mut_double sn, mut_double cn, mut_double dn, mut_double ph, long _xparams);

    
    
    //
    // Subpackage trigintegrals
    //
    
    public static class sinecosineintegrals_results
    {
        public double si;
        public double ci;
    }
    public static sinecosineintegrals_results sinecosineintegrals(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_si = new mut_double();
        mut_double lcl_ci = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sinecosineintegrals(error_msg, x, lcl_si, lcl_ci, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sinecosineintegrals");
        sinecosineintegrals_results ret_tuple = new sinecosineintegrals_results();
        ret_tuple.si = lcl_si.val;
        ret_tuple.ci = lcl_ci.val;
        return ret_tuple;
    }
    public static sinecosineintegrals_results sinecosineintegrals(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_si = new mut_double();
        mut_double lcl_ci = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_sinecosineintegrals(error_msg, x, lcl_si, lcl_ci, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "sinecosineintegrals");
        sinecosineintegrals_results ret_tuple = new sinecosineintegrals_results();
        ret_tuple.si = lcl_si.val;
        ret_tuple.ci = lcl_ci.val;
        return ret_tuple;
    }
    private static native int _jni_sinecosineintegrals(mut_string error_msg, double x, mut_double si, mut_double ci, long _xparams);

    public static class hyperbolicsinecosineintegrals_results
    {
        public double shi;
        public double chi;
    }
    public static hyperbolicsinecosineintegrals_results hyperbolicsinecosineintegrals(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_shi = new mut_double();
        mut_double lcl_chi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hyperbolicsinecosineintegrals(error_msg, x, lcl_shi, lcl_chi, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hyperbolicsinecosineintegrals");
        hyperbolicsinecosineintegrals_results ret_tuple = new hyperbolicsinecosineintegrals_results();
        ret_tuple.shi = lcl_shi.val;
        ret_tuple.chi = lcl_chi.val;
        return ret_tuple;
    }
    public static hyperbolicsinecosineintegrals_results hyperbolicsinecosineintegrals(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_shi = new mut_double();
        mut_double lcl_chi = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hyperbolicsinecosineintegrals(error_msg, x, lcl_shi, lcl_chi, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hyperbolicsinecosineintegrals");
        hyperbolicsinecosineintegrals_results ret_tuple = new hyperbolicsinecosineintegrals_results();
        ret_tuple.shi = lcl_shi.val;
        ret_tuple.chi = lcl_chi.val;
        return ret_tuple;
    }
    private static native int _jni_hyperbolicsinecosineintegrals(mut_string error_msg, double x, mut_double shi, mut_double chi, long _xparams);

    
    
    //
    // Subpackage chebyshev
    //
    
    public static double chebyshevcalculate(int r, int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chebyshevcalculate(error_msg, lcl_result, r, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chebyshevcalculate");
        return lcl_result.val;
    }
    public static double chebyshevcalculate(int r, int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chebyshevcalculate(error_msg, lcl_result, r, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chebyshevcalculate");
        return lcl_result.val;
    }
    private static native int _jni_chebyshevcalculate(mut_string error_msg, mut_double result, int r, int n, double x, long _xparams);

    public static double chebyshevsum(double[] c, int r, int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chebyshevsum(error_msg, lcl_result, c, r, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chebyshevsum");
        return lcl_result.val;
    }
    public static double chebyshevsum(double[] c, int r, int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chebyshevsum(error_msg, lcl_result, c, r, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chebyshevsum");
        return lcl_result.val;
    }
    private static native int _jni_chebyshevsum(mut_string error_msg, mut_double result, double[] c, int r, int n, double x, long _xparams);

    public static double[] chebyshevcoefficients(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chebyshevcoefficients(error_msg, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chebyshevcoefficients");
        return lcl_c.val;
    }
    public static double[] chebyshevcoefficients(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_chebyshevcoefficients(error_msg, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "chebyshevcoefficients");
        return lcl_c.val;
    }
    private static native int _jni_chebyshevcoefficients(mut_string error_msg, int n, rlc_double1d c, long _xparams);

    public static double[] fromchebyshev(double[] a, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_b = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fromchebyshev(error_msg, a, n, lcl_b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fromchebyshev");
        return lcl_b.val;
    }
    public static double[] fromchebyshev(double[] a, int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_b = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fromchebyshev(error_msg, a, n, lcl_b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fromchebyshev");
        return lcl_b.val;
    }
    private static native int _jni_fromchebyshev(mut_string error_msg, double[] a, int n, rlc_double1d b, long _xparams);

    
    
    //
    // Subpackage poissondistr
    //
    
    public static double poissondistribution(int k, double m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_poissondistribution(error_msg, lcl_result, k, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "poissondistribution");
        return lcl_result.val;
    }
    public static double poissondistribution(int k, double m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_poissondistribution(error_msg, lcl_result, k, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "poissondistribution");
        return lcl_result.val;
    }
    private static native int _jni_poissondistribution(mut_string error_msg, mut_double result, int k, double m, long _xparams);

    public static double poissoncdistribution(int k, double m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_poissoncdistribution(error_msg, lcl_result, k, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "poissoncdistribution");
        return lcl_result.val;
    }
    public static double poissoncdistribution(int k, double m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_poissoncdistribution(error_msg, lcl_result, k, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "poissoncdistribution");
        return lcl_result.val;
    }
    private static native int _jni_poissoncdistribution(mut_string error_msg, mut_double result, int k, double m, long _xparams);

    public static double invpoissondistribution(int k, double y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invpoissondistribution(error_msg, lcl_result, k, y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invpoissondistribution");
        return lcl_result.val;
    }
    public static double invpoissondistribution(int k, double y) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_invpoissondistribution(error_msg, lcl_result, k, y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "invpoissondistribution");
        return lcl_result.val;
    }
    private static native int _jni_invpoissondistribution(mut_string error_msg, mut_double result, int k, double y, long _xparams);

    
    
    //
    // Subpackage betaf
    //
    
    public static double beta(double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_beta(error_msg, lcl_result, a, b, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "beta");
        return lcl_result.val;
    }
    public static double beta(double a, double b) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_beta(error_msg, lcl_result, a, b, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "beta");
        return lcl_result.val;
    }
    private static native int _jni_beta(mut_string error_msg, mut_double result, double a, double b, long _xparams);

    
    
    //
    // Subpackage fresnel
    //
    
    public static class fresnelintegral_results
    {
        public double c;
        public double s;
    }
    public static fresnelintegral_results fresnelintegral(double x, double c, double s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_c = new mut_double(c);
        mut_double lcl_s = new mut_double(s);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fresnelintegral(error_msg, x, lcl_c, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fresnelintegral");
        fresnelintegral_results ret_tuple = new fresnelintegral_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.s = lcl_s.val;
        return ret_tuple;
    }
    public static fresnelintegral_results fresnelintegral(double x, double c, double s) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_c = new mut_double(c);
        mut_double lcl_s = new mut_double(s);
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fresnelintegral(error_msg, x, lcl_c, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fresnelintegral");
        fresnelintegral_results ret_tuple = new fresnelintegral_results();
        ret_tuple.c = lcl_c.val;
        ret_tuple.s = lcl_s.val;
        return ret_tuple;
    }
    private static native int _jni_fresnelintegral(mut_string error_msg, double x, mut_double c, mut_double s, long _xparams);

    
    
    //
    // Subpackage psif
    //
    
    public static double psi(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_psi(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "psi");
        return lcl_result.val;
    }
    public static double psi(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_psi(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "psi");
        return lcl_result.val;
    }
    private static native int _jni_psi(mut_string error_msg, mut_double result, double x, long _xparams);

    
    
    //
    // Subpackage airyf
    //
    
    public static class airy_results
    {
        public double ai;
        public double aip;
        public double bi;
        public double bip;
    }
    public static airy_results airy(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_ai = new mut_double();
        mut_double lcl_aip = new mut_double();
        mut_double lcl_bi = new mut_double();
        mut_double lcl_bip = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_airy(error_msg, x, lcl_ai, lcl_aip, lcl_bi, lcl_bip, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "airy");
        airy_results ret_tuple = new airy_results();
        ret_tuple.ai = lcl_ai.val;
        ret_tuple.aip = lcl_aip.val;
        ret_tuple.bi = lcl_bi.val;
        ret_tuple.bip = lcl_bip.val;
        return ret_tuple;
    }
    public static airy_results airy(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_ai = new mut_double();
        mut_double lcl_aip = new mut_double();
        mut_double lcl_bi = new mut_double();
        mut_double lcl_bip = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_airy(error_msg, x, lcl_ai, lcl_aip, lcl_bi, lcl_bip, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "airy");
        airy_results ret_tuple = new airy_results();
        ret_tuple.ai = lcl_ai.val;
        ret_tuple.aip = lcl_aip.val;
        ret_tuple.bi = lcl_bi.val;
        ret_tuple.bip = lcl_bip.val;
        return ret_tuple;
    }
    private static native int _jni_airy(mut_string error_msg, double x, mut_double ai, mut_double aip, mut_double bi, mut_double bip, long _xparams);

    
    
    //
    // Subpackage dawson
    //
    
    public static double dawsonintegral(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dawsonintegral(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dawsonintegral");
        return lcl_result.val;
    }
    public static double dawsonintegral(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dawsonintegral(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dawsonintegral");
        return lcl_result.val;
    }
    private static native int _jni_dawsonintegral(mut_string error_msg, mut_double result, double x, long _xparams);

    
    
    //
    // Subpackage hermite
    //
    
    public static double hermitecalculate(int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hermitecalculate(error_msg, lcl_result, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hermitecalculate");
        return lcl_result.val;
    }
    public static double hermitecalculate(int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hermitecalculate(error_msg, lcl_result, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hermitecalculate");
        return lcl_result.val;
    }
    private static native int _jni_hermitecalculate(mut_string error_msg, mut_double result, int n, double x, long _xparams);

    public static double hermitesum(double[] c, int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hermitesum(error_msg, lcl_result, c, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hermitesum");
        return lcl_result.val;
    }
    public static double hermitesum(double[] c, int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hermitesum(error_msg, lcl_result, c, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hermitesum");
        return lcl_result.val;
    }
    private static native int _jni_hermitesum(mut_string error_msg, mut_double result, double[] c, int n, double x, long _xparams);

    public static double[] hermitecoefficients(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hermitecoefficients(error_msg, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hermitecoefficients");
        return lcl_c.val;
    }
    public static double[] hermitecoefficients(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_hermitecoefficients(error_msg, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "hermitecoefficients");
        return lcl_c.val;
    }
    private static native int _jni_hermitecoefficients(mut_string error_msg, int n, rlc_double1d c, long _xparams);

    
    
    //
    // Subpackage legendre
    //
    
    public static double legendrecalculate(int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_legendrecalculate(error_msg, lcl_result, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "legendrecalculate");
        return lcl_result.val;
    }
    public static double legendrecalculate(int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_legendrecalculate(error_msg, lcl_result, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "legendrecalculate");
        return lcl_result.val;
    }
    private static native int _jni_legendrecalculate(mut_string error_msg, mut_double result, int n, double x, long _xparams);

    public static double legendresum(double[] c, int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_legendresum(error_msg, lcl_result, c, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "legendresum");
        return lcl_result.val;
    }
    public static double legendresum(double[] c, int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_legendresum(error_msg, lcl_result, c, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "legendresum");
        return lcl_result.val;
    }
    private static native int _jni_legendresum(mut_string error_msg, mut_double result, double[] c, int n, double x, long _xparams);

    public static double[] legendrecoefficients(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_legendrecoefficients(error_msg, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "legendrecoefficients");
        return lcl_c.val;
    }
    public static double[] legendrecoefficients(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_legendrecoefficients(error_msg, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "legendrecoefficients");
        return lcl_c.val;
    }
    private static native int _jni_legendrecoefficients(mut_string error_msg, int n, rlc_double1d c, long _xparams);

    
    
    //
    // Subpackage bessel
    //
    
    public static double besselj0(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselj0(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselj0");
        return lcl_result.val;
    }
    public static double besselj0(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselj0(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselj0");
        return lcl_result.val;
    }
    private static native int _jni_besselj0(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double besselj1(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselj1(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselj1");
        return lcl_result.val;
    }
    public static double besselj1(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselj1(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselj1");
        return lcl_result.val;
    }
    private static native int _jni_besselj1(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double besseljn(int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besseljn(error_msg, lcl_result, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besseljn");
        return lcl_result.val;
    }
    public static double besseljn(int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besseljn(error_msg, lcl_result, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besseljn");
        return lcl_result.val;
    }
    private static native int _jni_besseljn(mut_string error_msg, mut_double result, int n, double x, long _xparams);

    public static double bessely0(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_bessely0(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "bessely0");
        return lcl_result.val;
    }
    public static double bessely0(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_bessely0(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "bessely0");
        return lcl_result.val;
    }
    private static native int _jni_bessely0(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double bessely1(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_bessely1(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "bessely1");
        return lcl_result.val;
    }
    public static double bessely1(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_bessely1(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "bessely1");
        return lcl_result.val;
    }
    private static native int _jni_bessely1(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double besselyn(int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselyn(error_msg, lcl_result, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselyn");
        return lcl_result.val;
    }
    public static double besselyn(int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselyn(error_msg, lcl_result, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselyn");
        return lcl_result.val;
    }
    private static native int _jni_besselyn(mut_string error_msg, mut_double result, int n, double x, long _xparams);

    public static double besseli0(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besseli0(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besseli0");
        return lcl_result.val;
    }
    public static double besseli0(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besseli0(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besseli0");
        return lcl_result.val;
    }
    private static native int _jni_besseli0(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double besseli1(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besseli1(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besseli1");
        return lcl_result.val;
    }
    public static double besseli1(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besseli1(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besseli1");
        return lcl_result.val;
    }
    private static native int _jni_besseli1(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double besselk0(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselk0(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselk0");
        return lcl_result.val;
    }
    public static double besselk0(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselk0(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselk0");
        return lcl_result.val;
    }
    private static native int _jni_besselk0(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double besselk1(double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselk1(error_msg, lcl_result, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselk1");
        return lcl_result.val;
    }
    public static double besselk1(double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselk1(error_msg, lcl_result, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselk1");
        return lcl_result.val;
    }
    private static native int _jni_besselk1(mut_string error_msg, mut_double result, double x, long _xparams);

    public static double besselkn(int nn, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselkn(error_msg, lcl_result, nn, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselkn");
        return lcl_result.val;
    }
    public static double besselkn(int nn, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_besselkn(error_msg, lcl_result, nn, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "besselkn");
        return lcl_result.val;
    }
    private static native int _jni_besselkn(mut_string error_msg, mut_double result, int nn, double x, long _xparams);

    
    
    //
    // Subpackage laguerre
    //
    
    public static double laguerrecalculate(int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_laguerrecalculate(error_msg, lcl_result, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "laguerrecalculate");
        return lcl_result.val;
    }
    public static double laguerrecalculate(int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_laguerrecalculate(error_msg, lcl_result, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "laguerrecalculate");
        return lcl_result.val;
    }
    private static native int _jni_laguerrecalculate(mut_string error_msg, mut_double result, int n, double x, long _xparams);

    public static double laguerresum(double[] c, int n, double x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_laguerresum(error_msg, lcl_result, c, n, x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "laguerresum");
        return lcl_result.val;
    }
    public static double laguerresum(double[] c, int n, double x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_laguerresum(error_msg, lcl_result, c, n, x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "laguerresum");
        return lcl_result.val;
    }
    private static native int _jni_laguerresum(mut_string error_msg, mut_double result, double[] c, int n, double x, long _xparams);

    public static double[] laguerrecoefficients(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_laguerrecoefficients(error_msg, n, lcl_c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "laguerrecoefficients");
        return lcl_c.val;
    }
    public static double[] laguerrecoefficients(int n) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_c = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_laguerrecoefficients(error_msg, n, lcl_c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "laguerrecoefficients");
        return lcl_c.val;
    }
    private static native int _jni_laguerrecoefficients(mut_string error_msg, int n, rlc_double1d c, long _xparams);

    
    
    //
    // Subpackage elliptic
    //
    
    public static double ellipticintegralk(double m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ellipticintegralk(error_msg, lcl_result, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ellipticintegralk");
        return lcl_result.val;
    }
    public static double ellipticintegralk(double m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ellipticintegralk(error_msg, lcl_result, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ellipticintegralk");
        return lcl_result.val;
    }
    private static native int _jni_ellipticintegralk(mut_string error_msg, mut_double result, double m, long _xparams);

    public static double ellipticintegralkhighprecision(double m1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ellipticintegralkhighprecision(error_msg, lcl_result, m1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ellipticintegralkhighprecision");
        return lcl_result.val;
    }
    public static double ellipticintegralkhighprecision(double m1) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ellipticintegralkhighprecision(error_msg, lcl_result, m1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ellipticintegralkhighprecision");
        return lcl_result.val;
    }
    private static native int _jni_ellipticintegralkhighprecision(mut_string error_msg, mut_double result, double m1, long _xparams);

    public static double incompleteellipticintegralk(double phi, double m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompleteellipticintegralk(error_msg, lcl_result, phi, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompleteellipticintegralk");
        return lcl_result.val;
    }
    public static double incompleteellipticintegralk(double phi, double m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompleteellipticintegralk(error_msg, lcl_result, phi, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompleteellipticintegralk");
        return lcl_result.val;
    }
    private static native int _jni_incompleteellipticintegralk(mut_string error_msg, mut_double result, double phi, double m, long _xparams);

    public static double ellipticintegrale(double m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ellipticintegrale(error_msg, lcl_result, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ellipticintegrale");
        return lcl_result.val;
    }
    public static double ellipticintegrale(double m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ellipticintegrale(error_msg, lcl_result, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ellipticintegrale");
        return lcl_result.val;
    }
    private static native int _jni_ellipticintegrale(mut_string error_msg, mut_double result, double m, long _xparams);

    public static double incompleteellipticintegrale(double phi, double m, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompleteellipticintegrale(error_msg, lcl_result, phi, m, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompleteellipticintegrale");
        return lcl_result.val;
    }
    public static double incompleteellipticintegrale(double phi, double m) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_incompleteellipticintegrale(error_msg, lcl_result, phi, m, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "incompleteellipticintegrale");
        return lcl_result.val;
    }
    private static native int _jni_incompleteellipticintegrale(mut_string error_msg, mut_double result, double phi, double m, long _xparams);

    
    
    //
    // Subpackage pca
    //
    
    public static class pcabuildbasis_results
    {
        public double[] s2;
        public double[][] v;
    }
    public static pcabuildbasis_results pcabuildbasis(double[][] x, int npoints, int nvars, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_s2 = new rlc_double1d();
        rlc_double2d lcl_v = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pcabuildbasis(error_msg, x, npoints, nvars, lcl_s2, lcl_v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pcabuildbasis");
        pcabuildbasis_results ret_tuple = new pcabuildbasis_results();
        ret_tuple.s2 = lcl_s2.val;
        ret_tuple.v = lcl_v.val;
        return ret_tuple;
    }
    public static pcabuildbasis_results pcabuildbasis(double[][] x, int npoints, int nvars) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_s2 = new rlc_double1d();
        rlc_double2d lcl_v = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pcabuildbasis(error_msg, x, npoints, nvars, lcl_s2, lcl_v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pcabuildbasis");
        pcabuildbasis_results ret_tuple = new pcabuildbasis_results();
        ret_tuple.s2 = lcl_s2.val;
        ret_tuple.v = lcl_v.val;
        return ret_tuple;
    }
            
    public static pcabuildbasis_results pcabuildbasis(double[][] x, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nvars;
    
        npoints = ap.rows(x);
        nvars = ap.cols(x);
        return pcabuildbasis(x, npoints, nvars, _params);
    
    }
    
    public static pcabuildbasis_results pcabuildbasis(double[][] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nvars;
    
        npoints = ap.rows(x);
        nvars = ap.cols(x);
        return pcabuildbasis(x, npoints, nvars, _params);
    
    }
    private static native int _jni_pcabuildbasis(mut_string error_msg, double[][] x, int npoints, int nvars, rlc_double1d s2, rlc_double2d v, long _xparams);

    public static class pcatruncatedsubspace_results
    {
        public double[] s2;
        public double[][] v;
    }
    public static pcatruncatedsubspace_results pcatruncatedsubspace(double[][] x, int npoints, int nvars, int nneeded, double eps, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_s2 = new rlc_double1d();
        rlc_double2d lcl_v = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pcatruncatedsubspace(error_msg, x, npoints, nvars, nneeded, eps, maxits, lcl_s2, lcl_v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pcatruncatedsubspace");
        pcatruncatedsubspace_results ret_tuple = new pcatruncatedsubspace_results();
        ret_tuple.s2 = lcl_s2.val;
        ret_tuple.v = lcl_v.val;
        return ret_tuple;
    }
    public static pcatruncatedsubspace_results pcatruncatedsubspace(double[][] x, int npoints, int nvars, int nneeded, double eps, int maxits) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_s2 = new rlc_double1d();
        rlc_double2d lcl_v = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pcatruncatedsubspace(error_msg, x, npoints, nvars, nneeded, eps, maxits, lcl_s2, lcl_v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pcatruncatedsubspace");
        pcatruncatedsubspace_results ret_tuple = new pcatruncatedsubspace_results();
        ret_tuple.s2 = lcl_s2.val;
        ret_tuple.v = lcl_v.val;
        return ret_tuple;
    }
            
    public static pcatruncatedsubspace_results pcatruncatedsubspace(double[][] x, int nneeded, double eps, int maxits, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nvars;
    
        npoints = ap.rows(x);
        nvars = ap.cols(x);
        return pcatruncatedsubspace(x, npoints, nvars, nneeded, eps, maxits, _params);
    
    }
    
    public static pcatruncatedsubspace_results pcatruncatedsubspace(double[][] x, int nneeded, double eps, int maxits) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nvars;
    
        npoints = ap.rows(x);
        nvars = ap.cols(x);
        return pcatruncatedsubspace(x, npoints, nvars, nneeded, eps, maxits, _params);
    
    }
    private static native int _jni_pcatruncatedsubspace(mut_string error_msg, double[][] x, int npoints, int nvars, int nneeded, double eps, int maxits, rlc_double1d s2, rlc_double2d v, long _xparams);

    public static class pcatruncatedsubspacesparse_results
    {
        public double[] s2;
        public double[][] v;
    }
    public static pcatruncatedsubspacesparse_results pcatruncatedsubspacesparse(sparsematrix x, int npoints, int nvars, int nneeded, double eps, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_s2 = new rlc_double1d();
        rlc_double2d lcl_v = new rlc_double2d();
        if( x==null )
            throw new alglib.exception("ALGLIB: parameter 'x' of pcatruncatedsubspacesparse() is null");
        if( x.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'x' of pcatruncatedsubspacesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pcatruncatedsubspacesparse(error_msg, x.get_ptr(), npoints, nvars, nneeded, eps, maxits, lcl_s2, lcl_v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pcatruncatedsubspacesparse");
        pcatruncatedsubspacesparse_results ret_tuple = new pcatruncatedsubspacesparse_results();
        ret_tuple.s2 = lcl_s2.val;
        ret_tuple.v = lcl_v.val;
        return ret_tuple;
    }
    public static pcatruncatedsubspacesparse_results pcatruncatedsubspacesparse(sparsematrix x, int npoints, int nvars, int nneeded, double eps, int maxits) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_s2 = new rlc_double1d();
        rlc_double2d lcl_v = new rlc_double2d();
        if( x==null )
            throw new alglib.exception("ALGLIB: parameter 'x' of pcatruncatedsubspacesparse() is null");
        if( x.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'x' of pcatruncatedsubspacesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_pcatruncatedsubspacesparse(error_msg, x.get_ptr(), npoints, nvars, nneeded, eps, maxits, lcl_s2, lcl_v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "pcatruncatedsubspacesparse");
        pcatruncatedsubspacesparse_results ret_tuple = new pcatruncatedsubspacesparse_results();
        ret_tuple.s2 = lcl_s2.val;
        ret_tuple.v = lcl_v.val;
        return ret_tuple;
    }
    private static native int _jni_pcatruncatedsubspacesparse(mut_string error_msg, long x, int npoints, int nvars, int nneeded, double eps, int maxits, rlc_double1d s2, rlc_double2d v, long _xparams);

    
    
    //
    // Subpackage bdss
    //
    
    public static class dsoptimalsplit2_results
    {
        public int info;
        public double threshold;
        public double pal;
        public double pbl;
        public double par;
        public double pbr;
        public double cve;
    }
    public static dsoptimalsplit2_results dsoptimalsplit2(double[] a, int[] c, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_double lcl_threshold = new mut_double();
        mut_double lcl_pal = new mut_double();
        mut_double lcl_pbl = new mut_double();
        mut_double lcl_par = new mut_double();
        mut_double lcl_pbr = new mut_double();
        mut_double lcl_cve = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dsoptimalsplit2(error_msg, a, c, n, lcl_info, lcl_threshold, lcl_pal, lcl_pbl, lcl_par, lcl_pbr, lcl_cve, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dsoptimalsplit2");
        dsoptimalsplit2_results ret_tuple = new dsoptimalsplit2_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.threshold = lcl_threshold.val;
        ret_tuple.pal = lcl_pal.val;
        ret_tuple.pbl = lcl_pbl.val;
        ret_tuple.par = lcl_par.val;
        ret_tuple.pbr = lcl_pbr.val;
        ret_tuple.cve = lcl_cve.val;
        return ret_tuple;
    }
    public static dsoptimalsplit2_results dsoptimalsplit2(double[] a, int[] c, int n) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_double lcl_threshold = new mut_double();
        mut_double lcl_pal = new mut_double();
        mut_double lcl_pbl = new mut_double();
        mut_double lcl_par = new mut_double();
        mut_double lcl_pbr = new mut_double();
        mut_double lcl_cve = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dsoptimalsplit2(error_msg, a, c, n, lcl_info, lcl_threshold, lcl_pal, lcl_pbl, lcl_par, lcl_pbr, lcl_cve, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dsoptimalsplit2");
        dsoptimalsplit2_results ret_tuple = new dsoptimalsplit2_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.threshold = lcl_threshold.val;
        ret_tuple.pal = lcl_pal.val;
        ret_tuple.pbl = lcl_pbl.val;
        ret_tuple.par = lcl_par.val;
        ret_tuple.pbr = lcl_pbr.val;
        ret_tuple.cve = lcl_cve.val;
        return ret_tuple;
    }
    private static native int _jni_dsoptimalsplit2(mut_string error_msg, double[] a, int[] c, int n, mut_int info, mut_double threshold, mut_double pal, mut_double pbl, mut_double par, mut_double pbr, mut_double cve, long _xparams);

    public static class dsoptimalsplit2fast_results
    {
        public double[] a;
        public int[] c;
        public int[] tiesbuf;
        public int[] cntbuf;
        public double[] bufr;
        public int[] bufi;
        public int info;
        public double threshold;
        public double rms;
        public double cvrms;
    }
    public static dsoptimalsplit2fast_results dsoptimalsplit2fast(double[] a, int[] c, int[] tiesbuf, int[] cntbuf, double[] bufr, int[] bufi, int n, int nc, double alpha, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d(a);
        rlc_int1d lcl_c = new rlc_int1d(c);
        rlc_int1d lcl_tiesbuf = new rlc_int1d(tiesbuf);
        rlc_int1d lcl_cntbuf = new rlc_int1d(cntbuf);
        rlc_double1d lcl_bufr = new rlc_double1d(bufr);
        rlc_int1d lcl_bufi = new rlc_int1d(bufi);
        mut_int lcl_info = new mut_int();
        mut_double lcl_threshold = new mut_double();
        mut_double lcl_rms = new mut_double();
        mut_double lcl_cvrms = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dsoptimalsplit2fast(error_msg, lcl_a, lcl_c, lcl_tiesbuf, lcl_cntbuf, lcl_bufr, lcl_bufi, n, nc, alpha, lcl_info, lcl_threshold, lcl_rms, lcl_cvrms, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dsoptimalsplit2fast");
        dsoptimalsplit2fast_results ret_tuple = new dsoptimalsplit2fast_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.tiesbuf = lcl_tiesbuf.val;
        ret_tuple.cntbuf = lcl_cntbuf.val;
        ret_tuple.bufr = lcl_bufr.val;
        ret_tuple.bufi = lcl_bufi.val;
        ret_tuple.info = lcl_info.val;
        ret_tuple.threshold = lcl_threshold.val;
        ret_tuple.rms = lcl_rms.val;
        ret_tuple.cvrms = lcl_cvrms.val;
        return ret_tuple;
    }
    public static dsoptimalsplit2fast_results dsoptimalsplit2fast(double[] a, int[] c, int[] tiesbuf, int[] cntbuf, double[] bufr, int[] bufi, int n, int nc, double alpha) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d(a);
        rlc_int1d lcl_c = new rlc_int1d(c);
        rlc_int1d lcl_tiesbuf = new rlc_int1d(tiesbuf);
        rlc_int1d lcl_cntbuf = new rlc_int1d(cntbuf);
        rlc_double1d lcl_bufr = new rlc_double1d(bufr);
        rlc_int1d lcl_bufi = new rlc_int1d(bufi);
        mut_int lcl_info = new mut_int();
        mut_double lcl_threshold = new mut_double();
        mut_double lcl_rms = new mut_double();
        mut_double lcl_cvrms = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dsoptimalsplit2fast(error_msg, lcl_a, lcl_c, lcl_tiesbuf, lcl_cntbuf, lcl_bufr, lcl_bufi, n, nc, alpha, lcl_info, lcl_threshold, lcl_rms, lcl_cvrms, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dsoptimalsplit2fast");
        dsoptimalsplit2fast_results ret_tuple = new dsoptimalsplit2fast_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.tiesbuf = lcl_tiesbuf.val;
        ret_tuple.cntbuf = lcl_cntbuf.val;
        ret_tuple.bufr = lcl_bufr.val;
        ret_tuple.bufi = lcl_bufi.val;
        ret_tuple.info = lcl_info.val;
        ret_tuple.threshold = lcl_threshold.val;
        ret_tuple.rms = lcl_rms.val;
        ret_tuple.cvrms = lcl_cvrms.val;
        return ret_tuple;
    }
    private static native int _jni_dsoptimalsplit2fast(mut_string error_msg, rlc_double1d a, rlc_int1d c, rlc_int1d tiesbuf, rlc_int1d cntbuf, rlc_double1d bufr, rlc_int1d bufi, int n, int nc, double alpha, mut_int info, mut_double threshold, mut_double rms, mut_double cvrms, long _xparams);

    
    
    //
    // Subpackage mlpbase
    //
    

        public static class modelerrors extends alglibobject
        {
            public double relclserror;
            public double avgce;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public alglibobject make_copy()
            {
                modelerrors dst = new modelerrors();
                dst.relclserror = relclserror;
                dst.avgce = avgce;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                return dst;
            }
        }


    public static class multilayerperceptron extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected multilayerperceptron()
        {
            _ptr = 0;
            own  = false;
        }
        protected multilayerperceptron(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected multilayerperceptron(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new multilayerperceptron(0);
            return new multilayerperceptron(_jni_x_obj_copy_multilayerperceptron(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_multilayerperceptron(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_multilayerperceptron(long x);
    private static native void _jni_x_obj_free_multilayerperceptron(long x);

    private static native int _jni_mlpserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String mlpserialize(multilayerperceptron obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of mlpserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of mlpserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_mlpserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_mlpunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static multilayerperceptron mlpunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_mlpunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpunserialize");
        return new multilayerperceptron(lcl_result.val);
    }

    public static multilayerperceptron mlpcreate0(int nin, int nout, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreate0(error_msg, nin, nout, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreate0");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreate0(int nin, int nout) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreate0(error_msg, nin, nout, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreate0");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreate0(mut_string error_msg, int nin, int nout, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreate1(int nin, int nhid, int nout, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreate1(error_msg, nin, nhid, nout, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreate1");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreate1(int nin, int nhid, int nout) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreate1(error_msg, nin, nhid, nout, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreate1");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreate1(mut_string error_msg, int nin, int nhid, int nout, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreate2(int nin, int nhid1, int nhid2, int nout, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreate2(error_msg, nin, nhid1, nhid2, nout, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreate2");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreate2(int nin, int nhid1, int nhid2, int nout) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreate2(error_msg, nin, nhid1, nhid2, nout, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreate2");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreate2(mut_string error_msg, int nin, int nhid1, int nhid2, int nout, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreateb0(int nin, int nout, double b, double d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreateb0(error_msg, nin, nout, b, d, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreateb0");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreateb0(int nin, int nout, double b, double d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreateb0(error_msg, nin, nout, b, d, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreateb0");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreateb0(mut_string error_msg, int nin, int nout, double b, double d, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreateb1(int nin, int nhid, int nout, double b, double d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreateb1(error_msg, nin, nhid, nout, b, d, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreateb1");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreateb1(int nin, int nhid, int nout, double b, double d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreateb1(error_msg, nin, nhid, nout, b, d, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreateb1");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreateb1(mut_string error_msg, int nin, int nhid, int nout, double b, double d, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreateb2(int nin, int nhid1, int nhid2, int nout, double b, double d, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreateb2(error_msg, nin, nhid1, nhid2, nout, b, d, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreateb2");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreateb2(int nin, int nhid1, int nhid2, int nout, double b, double d) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreateb2(error_msg, nin, nhid1, nhid2, nout, b, d, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreateb2");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreateb2(mut_string error_msg, int nin, int nhid1, int nhid2, int nout, double b, double d, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreater0(int nin, int nout, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreater0(error_msg, nin, nout, a, b, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreater0");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreater0(int nin, int nout, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreater0(error_msg, nin, nout, a, b, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreater0");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreater0(mut_string error_msg, int nin, int nout, double a, double b, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreater1(int nin, int nhid, int nout, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreater1(error_msg, nin, nhid, nout, a, b, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreater1");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreater1(int nin, int nhid, int nout, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreater1(error_msg, nin, nhid, nout, a, b, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreater1");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreater1(mut_string error_msg, int nin, int nhid, int nout, double a, double b, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreater2(int nin, int nhid1, int nhid2, int nout, double a, double b, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreater2(error_msg, nin, nhid1, nhid2, nout, a, b, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreater2");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreater2(int nin, int nhid1, int nhid2, int nout, double a, double b) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreater2(error_msg, nin, nhid1, nhid2, nout, a, b, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreater2");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreater2(mut_string error_msg, int nin, int nhid1, int nhid2, int nout, double a, double b, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreatec0(int nin, int nout, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatec0(error_msg, nin, nout, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatec0");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreatec0(int nin, int nout) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatec0(error_msg, nin, nout, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatec0");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreatec0(mut_string error_msg, int nin, int nout, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreatec1(int nin, int nhid, int nout, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatec1(error_msg, nin, nhid, nout, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatec1");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreatec1(int nin, int nhid, int nout) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatec1(error_msg, nin, nhid, nout, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatec1");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreatec1(mut_string error_msg, int nin, int nhid, int nout, mut_long network, long _xparams);

    public static multilayerperceptron mlpcreatec2(int nin, int nhid1, int nhid2, int nout, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatec2(error_msg, nin, nhid1, nhid2, nout, lcl_network, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatec2");
        return new multilayerperceptron(lcl_network.val);
    }
    public static multilayerperceptron mlpcreatec2(int nin, int nhid1, int nhid2, int nout) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatec2(error_msg, nin, nhid1, nhid2, nout, lcl_network, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatec2");
        return new multilayerperceptron(lcl_network.val);
    }
    private static native int _jni_mlpcreatec2(mut_string error_msg, int nin, int nhid1, int nhid2, int nout, mut_long network, long _xparams);

    public static multilayerperceptron mlpcopy(multilayerperceptron network1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network2 = new mut_long();
        if( network1==null )
            throw new alglib.exception("ALGLIB: parameter 'network1' of mlpcopy() is null");
        if( network1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network1' of mlpcopy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcopy(error_msg, network1.get_ptr(), lcl_network2, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcopy");
        return new multilayerperceptron(lcl_network2.val);
    }
    public static multilayerperceptron mlpcopy(multilayerperceptron network1) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_network2 = new mut_long();
        if( network1==null )
            throw new alglib.exception("ALGLIB: parameter 'network1' of mlpcopy() is null");
        if( network1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network1' of mlpcopy() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcopy(error_msg, network1.get_ptr(), lcl_network2, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcopy");
        return new multilayerperceptron(lcl_network2.val);
    }
    private static native int _jni_mlpcopy(mut_string error_msg, long network1, mut_long network2, long _xparams);

    public static void mlpcopytunableparameters(multilayerperceptron network1, multilayerperceptron network2, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( network1==null )
            throw new alglib.exception("ALGLIB: parameter 'network1' of mlpcopytunableparameters() is null");
        if( network1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network1' of mlpcopytunableparameters() points to deallocated ALGLIB object");
        if( network2==null )
            throw new alglib.exception("ALGLIB: parameter 'network2' of mlpcopytunableparameters() is null");
        if( network2.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network2' of mlpcopytunableparameters() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcopytunableparameters(error_msg, network1.get_ptr(), network2.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcopytunableparameters");
    }
    public static void mlpcopytunableparameters(multilayerperceptron network1, multilayerperceptron network2) throws alglib.exception
    {
        activatealglibcore();
        if( network1==null )
            throw new alglib.exception("ALGLIB: parameter 'network1' of mlpcopytunableparameters() is null");
        if( network1.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network1' of mlpcopytunableparameters() points to deallocated ALGLIB object");
        if( network2==null )
            throw new alglib.exception("ALGLIB: parameter 'network2' of mlpcopytunableparameters() is null");
        if( network2.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network2' of mlpcopytunableparameters() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcopytunableparameters(error_msg, network1.get_ptr(), network2.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcopytunableparameters");
    }
    private static native int _jni_mlpcopytunableparameters(mut_string error_msg, long network1, long network2, long _xparams);

    public static void mlprandomize(multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprandomize() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprandomize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprandomize(error_msg, network.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprandomize");
    }
    public static void mlprandomize(multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprandomize() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprandomize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprandomize(error_msg, network.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprandomize");
    }
    private static native int _jni_mlprandomize(mut_string error_msg, long network, long _xparams);

    public static void mlprandomizefull(multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprandomizefull() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprandomizefull() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprandomizefull(error_msg, network.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprandomizefull");
    }
    public static void mlprandomizefull(multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprandomizefull() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprandomizefull() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprandomizefull(error_msg, network.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprandomizefull");
    }
    private static native int _jni_mlprandomizefull(mut_string error_msg, long network, long _xparams);

    public static void mlpinitpreprocessor(multilayerperceptron network, double[][] xy, int ssize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpinitpreprocessor() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpinitpreprocessor() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpinitpreprocessor(error_msg, network.get_ptr(), xy, ssize, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpinitpreprocessor");
    }
    public static void mlpinitpreprocessor(multilayerperceptron network, double[][] xy, int ssize) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpinitpreprocessor() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpinitpreprocessor() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpinitpreprocessor(error_msg, network.get_ptr(), xy, ssize, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpinitpreprocessor");
    }
    private static native int _jni_mlpinitpreprocessor(mut_string error_msg, long network, double[][] xy, int ssize, long _xparams);

    public static class mlpproperties_results
    {
        public int nin;
        public int nout;
        public int wcount;
    }
    public static mlpproperties_results mlpproperties(multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_nin = new mut_int();
        mut_int lcl_nout = new mut_int();
        mut_int lcl_wcount = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpproperties() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpproperties() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpproperties(error_msg, network.get_ptr(), lcl_nin, lcl_nout, lcl_wcount, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpproperties");
        mlpproperties_results ret_tuple = new mlpproperties_results();
        ret_tuple.nin = lcl_nin.val;
        ret_tuple.nout = lcl_nout.val;
        ret_tuple.wcount = lcl_wcount.val;
        return ret_tuple;
    }
    public static mlpproperties_results mlpproperties(multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_nin = new mut_int();
        mut_int lcl_nout = new mut_int();
        mut_int lcl_wcount = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpproperties() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpproperties() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpproperties(error_msg, network.get_ptr(), lcl_nin, lcl_nout, lcl_wcount, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpproperties");
        mlpproperties_results ret_tuple = new mlpproperties_results();
        ret_tuple.nin = lcl_nin.val;
        ret_tuple.nout = lcl_nout.val;
        ret_tuple.wcount = lcl_wcount.val;
        return ret_tuple;
    }
    private static native int _jni_mlpproperties(mut_string error_msg, long network, mut_int nin, mut_int nout, mut_int wcount, long _xparams);

    public static int mlpgetinputscount(multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetinputscount() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetinputscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetinputscount(error_msg, lcl_result, network.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetinputscount");
        return lcl_result.val;
    }
    public static int mlpgetinputscount(multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetinputscount() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetinputscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetinputscount(error_msg, lcl_result, network.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetinputscount");
        return lcl_result.val;
    }
    private static native int _jni_mlpgetinputscount(mut_string error_msg, mut_int result, long network, long _xparams);

    public static int mlpgetoutputscount(multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetoutputscount() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetoutputscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetoutputscount(error_msg, lcl_result, network.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetoutputscount");
        return lcl_result.val;
    }
    public static int mlpgetoutputscount(multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetoutputscount() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetoutputscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetoutputscount(error_msg, lcl_result, network.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetoutputscount");
        return lcl_result.val;
    }
    private static native int _jni_mlpgetoutputscount(mut_string error_msg, mut_int result, long network, long _xparams);

    public static int mlpgetweightscount(multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetweightscount() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetweightscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetweightscount(error_msg, lcl_result, network.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetweightscount");
        return lcl_result.val;
    }
    public static int mlpgetweightscount(multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetweightscount() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetweightscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetweightscount(error_msg, lcl_result, network.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetweightscount");
        return lcl_result.val;
    }
    private static native int _jni_mlpgetweightscount(mut_string error_msg, mut_int result, long network, long _xparams);

    public static boolean mlpissoftmax(multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpissoftmax() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpissoftmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpissoftmax(error_msg, lcl_result, network.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpissoftmax");
        return lcl_result.val;
    }
    public static boolean mlpissoftmax(multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpissoftmax() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpissoftmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpissoftmax(error_msg, lcl_result, network.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpissoftmax");
        return lcl_result.val;
    }
    private static native int _jni_mlpissoftmax(mut_string error_msg, mut_boolean result, long network, long _xparams);

    public static int mlpgetlayerscount(multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetlayerscount() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetlayerscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetlayerscount(error_msg, lcl_result, network.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetlayerscount");
        return lcl_result.val;
    }
    public static int mlpgetlayerscount(multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetlayerscount() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetlayerscount() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetlayerscount(error_msg, lcl_result, network.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetlayerscount");
        return lcl_result.val;
    }
    private static native int _jni_mlpgetlayerscount(mut_string error_msg, mut_int result, long network, long _xparams);

    public static int mlpgetlayersize(multilayerperceptron network, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetlayersize() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetlayersize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetlayersize(error_msg, lcl_result, network.get_ptr(), k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetlayersize");
        return lcl_result.val;
    }
    public static int mlpgetlayersize(multilayerperceptron network, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetlayersize() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetlayersize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetlayersize(error_msg, lcl_result, network.get_ptr(), k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetlayersize");
        return lcl_result.val;
    }
    private static native int _jni_mlpgetlayersize(mut_string error_msg, mut_int result, long network, int k, long _xparams);

    public static class mlpgetinputscaling_results
    {
        public double mean;
        public double sigma;
    }
    public static mlpgetinputscaling_results mlpgetinputscaling(multilayerperceptron network, int i, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_mean = new mut_double();
        mut_double lcl_sigma = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetinputscaling() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetinputscaling() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetinputscaling(error_msg, network.get_ptr(), i, lcl_mean, lcl_sigma, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetinputscaling");
        mlpgetinputscaling_results ret_tuple = new mlpgetinputscaling_results();
        ret_tuple.mean = lcl_mean.val;
        ret_tuple.sigma = lcl_sigma.val;
        return ret_tuple;
    }
    public static mlpgetinputscaling_results mlpgetinputscaling(multilayerperceptron network, int i) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_mean = new mut_double();
        mut_double lcl_sigma = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetinputscaling() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetinputscaling() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetinputscaling(error_msg, network.get_ptr(), i, lcl_mean, lcl_sigma, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetinputscaling");
        mlpgetinputscaling_results ret_tuple = new mlpgetinputscaling_results();
        ret_tuple.mean = lcl_mean.val;
        ret_tuple.sigma = lcl_sigma.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgetinputscaling(mut_string error_msg, long network, int i, mut_double mean, mut_double sigma, long _xparams);

    public static class mlpgetoutputscaling_results
    {
        public double mean;
        public double sigma;
    }
    public static mlpgetoutputscaling_results mlpgetoutputscaling(multilayerperceptron network, int i, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_mean = new mut_double();
        mut_double lcl_sigma = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetoutputscaling() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetoutputscaling() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetoutputscaling(error_msg, network.get_ptr(), i, lcl_mean, lcl_sigma, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetoutputscaling");
        mlpgetoutputscaling_results ret_tuple = new mlpgetoutputscaling_results();
        ret_tuple.mean = lcl_mean.val;
        ret_tuple.sigma = lcl_sigma.val;
        return ret_tuple;
    }
    public static mlpgetoutputscaling_results mlpgetoutputscaling(multilayerperceptron network, int i) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_mean = new mut_double();
        mut_double lcl_sigma = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetoutputscaling() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetoutputscaling() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetoutputscaling(error_msg, network.get_ptr(), i, lcl_mean, lcl_sigma, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetoutputscaling");
        mlpgetoutputscaling_results ret_tuple = new mlpgetoutputscaling_results();
        ret_tuple.mean = lcl_mean.val;
        ret_tuple.sigma = lcl_sigma.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgetoutputscaling(mut_string error_msg, long network, int i, mut_double mean, mut_double sigma, long _xparams);

    public static class mlpgetneuroninfo_results
    {
        public int fkind;
        public double threshold;
    }
    public static mlpgetneuroninfo_results mlpgetneuroninfo(multilayerperceptron network, int k, int i, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_fkind = new mut_int();
        mut_double lcl_threshold = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetneuroninfo() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetneuroninfo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetneuroninfo(error_msg, network.get_ptr(), k, i, lcl_fkind, lcl_threshold, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetneuroninfo");
        mlpgetneuroninfo_results ret_tuple = new mlpgetneuroninfo_results();
        ret_tuple.fkind = lcl_fkind.val;
        ret_tuple.threshold = lcl_threshold.val;
        return ret_tuple;
    }
    public static mlpgetneuroninfo_results mlpgetneuroninfo(multilayerperceptron network, int k, int i) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_fkind = new mut_int();
        mut_double lcl_threshold = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetneuroninfo() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetneuroninfo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetneuroninfo(error_msg, network.get_ptr(), k, i, lcl_fkind, lcl_threshold, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetneuroninfo");
        mlpgetneuroninfo_results ret_tuple = new mlpgetneuroninfo_results();
        ret_tuple.fkind = lcl_fkind.val;
        ret_tuple.threshold = lcl_threshold.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgetneuroninfo(mut_string error_msg, long network, int k, int i, mut_int fkind, mut_double threshold, long _xparams);

    public static double mlpgetweight(multilayerperceptron network, int k0, int i0, int k1, int i1, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetweight() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetweight() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetweight(error_msg, lcl_result, network.get_ptr(), k0, i0, k1, i1, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetweight");
        return lcl_result.val;
    }
    public static double mlpgetweight(multilayerperceptron network, int k0, int i0, int k1, int i1) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetweight() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgetweight() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgetweight(error_msg, lcl_result, network.get_ptr(), k0, i0, k1, i1, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgetweight");
        return lcl_result.val;
    }
    private static native int _jni_mlpgetweight(mut_string error_msg, mut_double result, long network, int k0, int i0, int k1, int i1, long _xparams);

    public static void mlpsetinputscaling(multilayerperceptron network, int i, double mean, double sigma, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetinputscaling() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetinputscaling() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetinputscaling(error_msg, network.get_ptr(), i, mean, sigma, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetinputscaling");
    }
    public static void mlpsetinputscaling(multilayerperceptron network, int i, double mean, double sigma) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetinputscaling() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetinputscaling() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetinputscaling(error_msg, network.get_ptr(), i, mean, sigma, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetinputscaling");
    }
    private static native int _jni_mlpsetinputscaling(mut_string error_msg, long network, int i, double mean, double sigma, long _xparams);

    public static void mlpsetoutputscaling(multilayerperceptron network, int i, double mean, double sigma, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetoutputscaling() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetoutputscaling() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetoutputscaling(error_msg, network.get_ptr(), i, mean, sigma, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetoutputscaling");
    }
    public static void mlpsetoutputscaling(multilayerperceptron network, int i, double mean, double sigma) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetoutputscaling() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetoutputscaling() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetoutputscaling(error_msg, network.get_ptr(), i, mean, sigma, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetoutputscaling");
    }
    private static native int _jni_mlpsetoutputscaling(mut_string error_msg, long network, int i, double mean, double sigma, long _xparams);

    public static void mlpsetneuroninfo(multilayerperceptron network, int k, int i, int fkind, double threshold, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetneuroninfo() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetneuroninfo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetneuroninfo(error_msg, network.get_ptr(), k, i, fkind, threshold, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetneuroninfo");
    }
    public static void mlpsetneuroninfo(multilayerperceptron network, int k, int i, int fkind, double threshold) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetneuroninfo() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetneuroninfo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetneuroninfo(error_msg, network.get_ptr(), k, i, fkind, threshold, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetneuroninfo");
    }
    private static native int _jni_mlpsetneuroninfo(mut_string error_msg, long network, int k, int i, int fkind, double threshold, long _xparams);

    public static void mlpsetweight(multilayerperceptron network, int k0, int i0, int k1, int i1, double w, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetweight() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetweight() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetweight(error_msg, network.get_ptr(), k0, i0, k1, i1, w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetweight");
    }
    public static void mlpsetweight(multilayerperceptron network, int k0, int i0, int k1, int i1, double w) throws alglib.exception
    {
        activatealglibcore();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetweight() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpsetweight() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetweight(error_msg, network.get_ptr(), k0, i0, k1, i1, w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetweight");
    }
    private static native int _jni_mlpsetweight(mut_string error_msg, long network, int k0, int i0, int k1, int i1, double w, long _xparams);

    public static class mlpactivationfunction_results
    {
        public double f;
        public double df;
        public double d2f;
    }
    public static mlpactivationfunction_results mlpactivationfunction(double net, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_df = new mut_double();
        mut_double lcl_d2f = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpactivationfunction(error_msg, net, k, lcl_f, lcl_df, lcl_d2f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpactivationfunction");
        mlpactivationfunction_results ret_tuple = new mlpactivationfunction_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.df = lcl_df.val;
        ret_tuple.d2f = lcl_d2f.val;
        return ret_tuple;
    }
    public static mlpactivationfunction_results mlpactivationfunction(double net, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_f = new mut_double();
        mut_double lcl_df = new mut_double();
        mut_double lcl_d2f = new mut_double();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpactivationfunction(error_msg, net, k, lcl_f, lcl_df, lcl_d2f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpactivationfunction");
        mlpactivationfunction_results ret_tuple = new mlpactivationfunction_results();
        ret_tuple.f = lcl_f.val;
        ret_tuple.df = lcl_df.val;
        ret_tuple.d2f = lcl_d2f.val;
        return ret_tuple;
    }
    private static native int _jni_mlpactivationfunction(mut_string error_msg, double net, int k, mut_double f, mut_double df, mut_double d2f, long _xparams);

    public static double[] mlpprocess(multilayerperceptron network, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpprocess() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpprocess(error_msg, network.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpprocess");
        return lcl_y.val;
    }
    public static double[] mlpprocess(multilayerperceptron network, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpprocess() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpprocess(error_msg, network.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpprocess");
        return lcl_y.val;
    }
    private static native int _jni_mlpprocess(mut_string error_msg, long network, double[] x, rlc_double1d y, long _xparams);

    public static double[] mlpprocessi(multilayerperceptron network, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpprocessi() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpprocessi(error_msg, network.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpprocessi");
        return lcl_y.val;
    }
    public static double[] mlpprocessi(multilayerperceptron network, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpprocessi() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpprocessi(error_msg, network.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpprocessi");
        return lcl_y.val;
    }
    private static native int _jni_mlpprocessi(mut_string error_msg, long network, double[] x, rlc_double1d y, long _xparams);

    public static double mlperror(multilayerperceptron network, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperror(error_msg, lcl_result, network.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperror");
        return lcl_result.val;
    }
    public static double mlperror(multilayerperceptron network, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperror(error_msg, lcl_result, network.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperror");
        return lcl_result.val;
    }
    private static native int _jni_mlperror(mut_string error_msg, mut_double result, long network, double[][] xy, int npoints, long _xparams);

    public static double mlperrorsparse(multilayerperceptron network, sparsematrix xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlperrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlperrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperrorsparse");
        return lcl_result.val;
    }
    public static double mlperrorsparse(multilayerperceptron network, sparsematrix xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlperrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlperrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperrorsparse");
        return lcl_result.val;
    }
    private static native int _jni_mlperrorsparse(mut_string error_msg, mut_double result, long network, long xy, int npoints, long _xparams);

    public static double mlperrorn(multilayerperceptron network, double[][] xy, int ssize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorn() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperrorn(error_msg, lcl_result, network.get_ptr(), xy, ssize, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperrorn");
        return lcl_result.val;
    }
    public static double mlperrorn(multilayerperceptron network, double[][] xy, int ssize) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorn() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperrorn(error_msg, lcl_result, network.get_ptr(), xy, ssize, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperrorn");
        return lcl_result.val;
    }
    private static native int _jni_mlperrorn(mut_string error_msg, mut_double result, long network, double[][] xy, int ssize, long _xparams);

    public static int mlpclserror(multilayerperceptron network, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpclserror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpclserror(error_msg, lcl_result, network.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpclserror");
        return lcl_result.val;
    }
    public static int mlpclserror(multilayerperceptron network, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpclserror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpclserror(error_msg, lcl_result, network.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpclserror");
        return lcl_result.val;
    }
    private static native int _jni_mlpclserror(mut_string error_msg, mut_int result, long network, double[][] xy, int npoints, long _xparams);

    public static double mlprelclserror(multilayerperceptron network, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprelclserror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprelclserror(error_msg, lcl_result, network.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprelclserror");
        return lcl_result.val;
    }
    public static double mlprelclserror(multilayerperceptron network, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprelclserror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprelclserror(error_msg, lcl_result, network.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprelclserror");
        return lcl_result.val;
    }
    private static native int _jni_mlprelclserror(mut_string error_msg, mut_double result, long network, double[][] xy, int npoints, long _xparams);

    public static double mlprelclserrorsparse(multilayerperceptron network, sparsematrix xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprelclserrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprelclserrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlprelclserrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlprelclserrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprelclserrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprelclserrorsparse");
        return lcl_result.val;
    }
    public static double mlprelclserrorsparse(multilayerperceptron network, sparsematrix xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprelclserrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprelclserrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlprelclserrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlprelclserrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprelclserrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprelclserrorsparse");
        return lcl_result.val;
    }
    private static native int _jni_mlprelclserrorsparse(mut_string error_msg, mut_double result, long network, long xy, int npoints, long _xparams);

    public static double mlpavgce(multilayerperceptron network, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgce() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgce(error_msg, lcl_result, network.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgce");
        return lcl_result.val;
    }
    public static double mlpavgce(multilayerperceptron network, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgce() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgce(error_msg, lcl_result, network.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgce");
        return lcl_result.val;
    }
    private static native int _jni_mlpavgce(mut_string error_msg, mut_double result, long network, double[][] xy, int npoints, long _xparams);

    public static double mlpavgcesparse(multilayerperceptron network, sparsematrix xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgcesparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgcesparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgcesparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgcesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgcesparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgcesparse");
        return lcl_result.val;
    }
    public static double mlpavgcesparse(multilayerperceptron network, sparsematrix xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgcesparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgcesparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgcesparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgcesparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgcesparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgcesparse");
        return lcl_result.val;
    }
    private static native int _jni_mlpavgcesparse(mut_string error_msg, mut_double result, long network, long xy, int npoints, long _xparams);

    public static double mlprmserror(multilayerperceptron network, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprmserror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprmserror(error_msg, lcl_result, network.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprmserror");
        return lcl_result.val;
    }
    public static double mlprmserror(multilayerperceptron network, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprmserror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprmserror(error_msg, lcl_result, network.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprmserror");
        return lcl_result.val;
    }
    private static native int _jni_mlprmserror(mut_string error_msg, mut_double result, long network, double[][] xy, int npoints, long _xparams);

    public static double mlprmserrorsparse(multilayerperceptron network, sparsematrix xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprmserrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprmserrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlprmserrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlprmserrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprmserrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprmserrorsparse");
        return lcl_result.val;
    }
    public static double mlprmserrorsparse(multilayerperceptron network, sparsematrix xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprmserrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlprmserrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlprmserrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlprmserrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlprmserrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlprmserrorsparse");
        return lcl_result.val;
    }
    private static native int _jni_mlprmserrorsparse(mut_string error_msg, mut_double result, long network, long xy, int npoints, long _xparams);

    public static double mlpavgerror(multilayerperceptron network, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgerror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgerror(error_msg, lcl_result, network.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgerror");
        return lcl_result.val;
    }
    public static double mlpavgerror(multilayerperceptron network, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgerror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgerror(error_msg, lcl_result, network.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgerror");
        return lcl_result.val;
    }
    private static native int _jni_mlpavgerror(mut_string error_msg, mut_double result, long network, double[][] xy, int npoints, long _xparams);

    public static double mlpavgerrorsparse(multilayerperceptron network, sparsematrix xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgerrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgerrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgerrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgerrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgerrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgerrorsparse");
        return lcl_result.val;
    }
    public static double mlpavgerrorsparse(multilayerperceptron network, sparsematrix xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgerrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgerrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgerrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgerrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgerrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgerrorsparse");
        return lcl_result.val;
    }
    private static native int _jni_mlpavgerrorsparse(mut_string error_msg, mut_double result, long network, long xy, int npoints, long _xparams);

    public static double mlpavgrelerror(multilayerperceptron network, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgrelerror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgrelerror(error_msg, lcl_result, network.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgrelerror");
        return lcl_result.val;
    }
    public static double mlpavgrelerror(multilayerperceptron network, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgrelerror() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgrelerror(error_msg, lcl_result, network.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgrelerror");
        return lcl_result.val;
    }
    private static native int _jni_mlpavgrelerror(mut_string error_msg, mut_double result, long network, double[][] xy, int npoints, long _xparams);

    public static double mlpavgrelerrorsparse(multilayerperceptron network, sparsematrix xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgrelerrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgrelerrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgrelerrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgrelerrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgrelerrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgrelerrorsparse");
        return lcl_result.val;
    }
    public static double mlpavgrelerrorsparse(multilayerperceptron network, sparsematrix xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgrelerrorsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpavgrelerrorsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgrelerrorsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpavgrelerrorsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpavgrelerrorsparse(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpavgrelerrorsparse");
        return lcl_result.val;
    }
    private static native int _jni_mlpavgrelerrorsparse(mut_string error_msg, mut_double result, long network, long xy, int npoints, long _xparams);

    public static class mlpgrad_results
    {
        public double e;
        public double[] grad;
    }
    public static mlpgrad_results mlpgrad(multilayerperceptron network, double[] x, double[] desiredy, double[] grad, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgrad() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgrad() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgrad(error_msg, network.get_ptr(), x, desiredy, lcl_e, lcl_grad, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgrad");
        mlpgrad_results ret_tuple = new mlpgrad_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    public static mlpgrad_results mlpgrad(multilayerperceptron network, double[] x, double[] desiredy, double[] grad) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgrad() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgrad() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgrad(error_msg, network.get_ptr(), x, desiredy, lcl_e, lcl_grad, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgrad");
        mlpgrad_results ret_tuple = new mlpgrad_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgrad(mut_string error_msg, long network, double[] x, double[] desiredy, mut_double e, rlc_double1d grad, long _xparams);

    public static class mlpgradn_results
    {
        public double e;
        public double[] grad;
    }
    public static mlpgradn_results mlpgradn(multilayerperceptron network, double[] x, double[] desiredy, double[] grad, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradn() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradn(error_msg, network.get_ptr(), x, desiredy, lcl_e, lcl_grad, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradn");
        mlpgradn_results ret_tuple = new mlpgradn_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    public static mlpgradn_results mlpgradn(multilayerperceptron network, double[] x, double[] desiredy, double[] grad) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradn() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradn() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradn(error_msg, network.get_ptr(), x, desiredy, lcl_e, lcl_grad, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradn");
        mlpgradn_results ret_tuple = new mlpgradn_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgradn(mut_string error_msg, long network, double[] x, double[] desiredy, mut_double e, rlc_double1d grad, long _xparams);

    public static class mlpgradbatch_results
    {
        public double e;
        public double[] grad;
    }
    public static mlpgradbatch_results mlpgradbatch(multilayerperceptron network, double[][] xy, int ssize, double[] grad, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatch() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradbatch(error_msg, network.get_ptr(), xy, ssize, lcl_e, lcl_grad, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradbatch");
        mlpgradbatch_results ret_tuple = new mlpgradbatch_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    public static mlpgradbatch_results mlpgradbatch(multilayerperceptron network, double[][] xy, int ssize, double[] grad) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatch() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradbatch(error_msg, network.get_ptr(), xy, ssize, lcl_e, lcl_grad, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradbatch");
        mlpgradbatch_results ret_tuple = new mlpgradbatch_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgradbatch(mut_string error_msg, long network, double[][] xy, int ssize, mut_double e, rlc_double1d grad, long _xparams);

    public static class mlpgradbatchsparse_results
    {
        public double e;
        public double[] grad;
    }
    public static mlpgradbatchsparse_results mlpgradbatchsparse(multilayerperceptron network, sparsematrix xy, int ssize, double[] grad, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpgradbatchsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpgradbatchsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradbatchsparse(error_msg, network.get_ptr(), xy.get_ptr(), ssize, lcl_e, lcl_grad, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradbatchsparse");
        mlpgradbatchsparse_results ret_tuple = new mlpgradbatchsparse_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    public static mlpgradbatchsparse_results mlpgradbatchsparse(multilayerperceptron network, sparsematrix xy, int ssize, double[] grad) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsparse() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsparse() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpgradbatchsparse() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpgradbatchsparse() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradbatchsparse(error_msg, network.get_ptr(), xy.get_ptr(), ssize, lcl_e, lcl_grad, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradbatchsparse");
        mlpgradbatchsparse_results ret_tuple = new mlpgradbatchsparse_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgradbatchsparse(mut_string error_msg, long network, long xy, int ssize, mut_double e, rlc_double1d grad, long _xparams);

    public static class mlpgradbatchsubset_results
    {
        public double e;
        public double[] grad;
    }
    public static mlpgradbatchsubset_results mlpgradbatchsubset(multilayerperceptron network, double[][] xy, int setsize, int[] idx, int subsetsize, double[] grad, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradbatchsubset(error_msg, network.get_ptr(), xy, setsize, idx, subsetsize, lcl_e, lcl_grad, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradbatchsubset");
        mlpgradbatchsubset_results ret_tuple = new mlpgradbatchsubset_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    public static mlpgradbatchsubset_results mlpgradbatchsubset(multilayerperceptron network, double[][] xy, int setsize, int[] idx, int subsetsize, double[] grad) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradbatchsubset(error_msg, network.get_ptr(), xy, setsize, idx, subsetsize, lcl_e, lcl_grad, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradbatchsubset");
        mlpgradbatchsubset_results ret_tuple = new mlpgradbatchsubset_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgradbatchsubset(mut_string error_msg, long network, double[][] xy, int setsize, int[] idx, int subsetsize, mut_double e, rlc_double1d grad, long _xparams);

    public static class mlpgradbatchsparsesubset_results
    {
        public double e;
        public double[] grad;
    }
    public static mlpgradbatchsparsesubset_results mlpgradbatchsparsesubset(multilayerperceptron network, sparsematrix xy, int setsize, int[] idx, int subsetsize, double[] grad, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsparsesubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsparsesubset() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpgradbatchsparsesubset() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpgradbatchsparsesubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradbatchsparsesubset(error_msg, network.get_ptr(), xy.get_ptr(), setsize, idx, subsetsize, lcl_e, lcl_grad, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradbatchsparsesubset");
        mlpgradbatchsparsesubset_results ret_tuple = new mlpgradbatchsparsesubset_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    public static mlpgradbatchsparsesubset_results mlpgradbatchsparsesubset(multilayerperceptron network, sparsematrix xy, int setsize, int[] idx, int subsetsize, double[] grad) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsparsesubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradbatchsparsesubset() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpgradbatchsparsesubset() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpgradbatchsparsesubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradbatchsparsesubset(error_msg, network.get_ptr(), xy.get_ptr(), setsize, idx, subsetsize, lcl_e, lcl_grad, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradbatchsparsesubset");
        mlpgradbatchsparsesubset_results ret_tuple = new mlpgradbatchsparsesubset_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgradbatchsparsesubset(mut_string error_msg, long network, long xy, int setsize, int[] idx, int subsetsize, mut_double e, rlc_double1d grad, long _xparams);

    public static class mlpgradnbatch_results
    {
        public double e;
        public double[] grad;
    }
    public static mlpgradnbatch_results mlpgradnbatch(multilayerperceptron network, double[][] xy, int ssize, double[] grad, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradnbatch() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradnbatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradnbatch(error_msg, network.get_ptr(), xy, ssize, lcl_e, lcl_grad, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradnbatch");
        mlpgradnbatch_results ret_tuple = new mlpgradnbatch_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    public static mlpgradnbatch_results mlpgradnbatch(multilayerperceptron network, double[][] xy, int ssize, double[] grad) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradnbatch() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpgradnbatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpgradnbatch(error_msg, network.get_ptr(), xy, ssize, lcl_e, lcl_grad, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpgradnbatch");
        mlpgradnbatch_results ret_tuple = new mlpgradnbatch_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        return ret_tuple;
    }
    private static native int _jni_mlpgradnbatch(mut_string error_msg, long network, double[][] xy, int ssize, mut_double e, rlc_double1d grad, long _xparams);

    public static class mlphessiannbatch_results
    {
        public double e;
        public double[] grad;
        public double[][] h;
    }
    public static mlphessiannbatch_results mlphessiannbatch(multilayerperceptron network, double[][] xy, int ssize, double[] grad, double[][] h, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        rlc_double2d lcl_h = new rlc_double2d(h);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlphessiannbatch() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlphessiannbatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlphessiannbatch(error_msg, network.get_ptr(), xy, ssize, lcl_e, lcl_grad, lcl_h, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlphessiannbatch");
        mlphessiannbatch_results ret_tuple = new mlphessiannbatch_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        ret_tuple.h = lcl_h.val;
        return ret_tuple;
    }
    public static mlphessiannbatch_results mlphessiannbatch(multilayerperceptron network, double[][] xy, int ssize, double[] grad, double[][] h) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        rlc_double2d lcl_h = new rlc_double2d(h);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlphessiannbatch() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlphessiannbatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlphessiannbatch(error_msg, network.get_ptr(), xy, ssize, lcl_e, lcl_grad, lcl_h, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlphessiannbatch");
        mlphessiannbatch_results ret_tuple = new mlphessiannbatch_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        ret_tuple.h = lcl_h.val;
        return ret_tuple;
    }
    private static native int _jni_mlphessiannbatch(mut_string error_msg, long network, double[][] xy, int ssize, mut_double e, rlc_double1d grad, rlc_double2d h, long _xparams);

    public static class mlphessianbatch_results
    {
        public double e;
        public double[] grad;
        public double[][] h;
    }
    public static mlphessianbatch_results mlphessianbatch(multilayerperceptron network, double[][] xy, int ssize, double[] grad, double[][] h, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        rlc_double2d lcl_h = new rlc_double2d(h);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlphessianbatch() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlphessianbatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlphessianbatch(error_msg, network.get_ptr(), xy, ssize, lcl_e, lcl_grad, lcl_h, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlphessianbatch");
        mlphessianbatch_results ret_tuple = new mlphessianbatch_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        ret_tuple.h = lcl_h.val;
        return ret_tuple;
    }
    public static mlphessianbatch_results mlphessianbatch(multilayerperceptron network, double[][] xy, int ssize, double[] grad, double[][] h) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_e = new mut_double();
        rlc_double1d lcl_grad = new rlc_double1d(grad);
        rlc_double2d lcl_h = new rlc_double2d(h);
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlphessianbatch() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlphessianbatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlphessianbatch(error_msg, network.get_ptr(), xy, ssize, lcl_e, lcl_grad, lcl_h, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlphessianbatch");
        mlphessianbatch_results ret_tuple = new mlphessianbatch_results();
        ret_tuple.e = lcl_e.val;
        ret_tuple.grad = lcl_grad.val;
        ret_tuple.h = lcl_h.val;
        return ret_tuple;
    }
    private static native int _jni_mlphessianbatch(mut_string error_msg, long network, double[][] xy, int ssize, mut_double e, rlc_double1d grad, rlc_double2d h, long _xparams);

    public static modelerrors mlpallerrorssubset(multilayerperceptron network, double[][] xy, int setsize, int[] subset, int subsetsize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpallerrorssubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpallerrorssubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpallerrorssubset(error_msg, network.get_ptr(), xy, setsize, subset, subsetsize, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpallerrorssubset");
        return (modelerrors)lcl_rep.val;
    }
    public static modelerrors mlpallerrorssubset(multilayerperceptron network, double[][] xy, int setsize, int[] subset, int subsetsize) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpallerrorssubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpallerrorssubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpallerrorssubset(error_msg, network.get_ptr(), xy, setsize, subset, subsetsize, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpallerrorssubset");
        return (modelerrors)lcl_rep.val;
    }
    private static native int _jni_mlpallerrorssubset(mut_string error_msg, long network, double[][] xy, int setsize, int[] subset, int subsetsize, mut_object rep, long _xparams);

    public static modelerrors mlpallerrorssparsesubset(multilayerperceptron network, sparsematrix xy, int setsize, int[] subset, int subsetsize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpallerrorssparsesubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpallerrorssparsesubset() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpallerrorssparsesubset() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpallerrorssparsesubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpallerrorssparsesubset(error_msg, network.get_ptr(), xy.get_ptr(), setsize, subset, subsetsize, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpallerrorssparsesubset");
        return (modelerrors)lcl_rep.val;
    }
    public static modelerrors mlpallerrorssparsesubset(multilayerperceptron network, sparsematrix xy, int setsize, int[] subset, int subsetsize) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpallerrorssparsesubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpallerrorssparsesubset() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpallerrorssparsesubset() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpallerrorssparsesubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpallerrorssparsesubset(error_msg, network.get_ptr(), xy.get_ptr(), setsize, subset, subsetsize, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpallerrorssparsesubset");
        return (modelerrors)lcl_rep.val;
    }
    private static native int _jni_mlpallerrorssparsesubset(mut_string error_msg, long network, long xy, int setsize, int[] subset, int subsetsize, mut_object rep, long _xparams);

    public static double mlperrorsubset(multilayerperceptron network, double[][] xy, int setsize, int[] subset, int subsetsize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperrorsubset(error_msg, lcl_result, network.get_ptr(), xy, setsize, subset, subsetsize, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperrorsubset");
        return lcl_result.val;
    }
    public static double mlperrorsubset(multilayerperceptron network, double[][] xy, int setsize, int[] subset, int subsetsize) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperrorsubset(error_msg, lcl_result, network.get_ptr(), xy, setsize, subset, subsetsize, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperrorsubset");
        return lcl_result.val;
    }
    private static native int _jni_mlperrorsubset(mut_string error_msg, mut_double result, long network, double[][] xy, int setsize, int[] subset, int subsetsize, long _xparams);

    public static double mlperrorsparsesubset(multilayerperceptron network, sparsematrix xy, int setsize, int[] subset, int subsetsize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsparsesubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsparsesubset() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlperrorsparsesubset() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlperrorsparsesubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperrorsparsesubset(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), setsize, subset, subsetsize, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperrorsparsesubset");
        return lcl_result.val;
    }
    public static double mlperrorsparsesubset(multilayerperceptron network, sparsematrix xy, int setsize, int[] subset, int subsetsize) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsparsesubset() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlperrorsparsesubset() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlperrorsparsesubset() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlperrorsparsesubset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperrorsparsesubset(error_msg, lcl_result, network.get_ptr(), xy.get_ptr(), setsize, subset, subsetsize, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperrorsparsesubset");
        return lcl_result.val;
    }
    private static native int _jni_mlperrorsparsesubset(mut_string error_msg, mut_double result, long network, long xy, int setsize, int[] subset, int subsetsize, long _xparams);

    
    
    //
    // Subpackage mlpe
    //
    

    public static class mlpensemble extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected mlpensemble()
        {
            _ptr = 0;
            own  = false;
        }
        protected mlpensemble(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected mlpensemble(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new mlpensemble(0);
            return new mlpensemble(_jni_x_obj_copy_mlpensemble(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_mlpensemble(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_mlpensemble(long x);
    private static native void _jni_x_obj_free_mlpensemble(long x);

    private static native int _jni_mlpeserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String mlpeserialize(mlpensemble obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of mlpeserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of mlpeserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_mlpeserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_mlpeunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static mlpensemble mlpeunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpeunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_mlpeunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeunserialize");
        return new mlpensemble(lcl_result.val);
    }

    public static mlpensemble mlpecreate0(int nin, int nout, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreate0(error_msg, nin, nout, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreate0");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreate0(int nin, int nout, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreate0(error_msg, nin, nout, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreate0");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreate0(mut_string error_msg, int nin, int nout, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreate1(int nin, int nhid, int nout, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreate1(error_msg, nin, nhid, nout, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreate1");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreate1(int nin, int nhid, int nout, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreate1(error_msg, nin, nhid, nout, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreate1");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreate1(mut_string error_msg, int nin, int nhid, int nout, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreate2(int nin, int nhid1, int nhid2, int nout, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreate2(error_msg, nin, nhid1, nhid2, nout, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreate2");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreate2(int nin, int nhid1, int nhid2, int nout, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreate2(error_msg, nin, nhid1, nhid2, nout, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreate2");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreate2(mut_string error_msg, int nin, int nhid1, int nhid2, int nout, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreateb0(int nin, int nout, double b, double d, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreateb0(error_msg, nin, nout, b, d, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreateb0");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreateb0(int nin, int nout, double b, double d, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreateb0(error_msg, nin, nout, b, d, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreateb0");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreateb0(mut_string error_msg, int nin, int nout, double b, double d, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreateb1(int nin, int nhid, int nout, double b, double d, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreateb1(error_msg, nin, nhid, nout, b, d, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreateb1");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreateb1(int nin, int nhid, int nout, double b, double d, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreateb1(error_msg, nin, nhid, nout, b, d, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreateb1");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreateb1(mut_string error_msg, int nin, int nhid, int nout, double b, double d, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreateb2(int nin, int nhid1, int nhid2, int nout, double b, double d, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreateb2(error_msg, nin, nhid1, nhid2, nout, b, d, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreateb2");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreateb2(int nin, int nhid1, int nhid2, int nout, double b, double d, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreateb2(error_msg, nin, nhid1, nhid2, nout, b, d, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreateb2");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreateb2(mut_string error_msg, int nin, int nhid1, int nhid2, int nout, double b, double d, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreater0(int nin, int nout, double a, double b, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreater0(error_msg, nin, nout, a, b, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreater0");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreater0(int nin, int nout, double a, double b, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreater0(error_msg, nin, nout, a, b, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreater0");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreater0(mut_string error_msg, int nin, int nout, double a, double b, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreater1(int nin, int nhid, int nout, double a, double b, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreater1(error_msg, nin, nhid, nout, a, b, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreater1");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreater1(int nin, int nhid, int nout, double a, double b, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreater1(error_msg, nin, nhid, nout, a, b, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreater1");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreater1(mut_string error_msg, int nin, int nhid, int nout, double a, double b, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreater2(int nin, int nhid1, int nhid2, int nout, double a, double b, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreater2(error_msg, nin, nhid1, nhid2, nout, a, b, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreater2");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreater2(int nin, int nhid1, int nhid2, int nout, double a, double b, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreater2(error_msg, nin, nhid1, nhid2, nout, a, b, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreater2");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreater2(mut_string error_msg, int nin, int nhid1, int nhid2, int nout, double a, double b, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreatec0(int nin, int nout, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreatec0(error_msg, nin, nout, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreatec0");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreatec0(int nin, int nout, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreatec0(error_msg, nin, nout, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreatec0");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreatec0(mut_string error_msg, int nin, int nout, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreatec1(int nin, int nhid, int nout, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreatec1(error_msg, nin, nhid, nout, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreatec1");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreatec1(int nin, int nhid, int nout, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreatec1(error_msg, nin, nhid, nout, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreatec1");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreatec1(mut_string error_msg, int nin, int nhid, int nout, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreatec2(int nin, int nhid1, int nhid2, int nout, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreatec2(error_msg, nin, nhid1, nhid2, nout, ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreatec2");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreatec2(int nin, int nhid1, int nhid2, int nout, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreatec2(error_msg, nin, nhid1, nhid2, nout, ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreatec2");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreatec2(mut_string error_msg, int nin, int nhid1, int nhid2, int nout, int ensemblesize, mut_long ensemble, long _xparams);

    public static mlpensemble mlpecreatefromnetwork(multilayerperceptron network, int ensemblesize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpecreatefromnetwork() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpecreatefromnetwork() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreatefromnetwork(error_msg, network.get_ptr(), ensemblesize, lcl_ensemble, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreatefromnetwork");
        return new mlpensemble(lcl_ensemble.val);
    }
    public static mlpensemble mlpecreatefromnetwork(multilayerperceptron network, int ensemblesize) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_ensemble = new mut_long();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpecreatefromnetwork() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpecreatefromnetwork() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpecreatefromnetwork(error_msg, network.get_ptr(), ensemblesize, lcl_ensemble, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpecreatefromnetwork");
        return new mlpensemble(lcl_ensemble.val);
    }
    private static native int _jni_mlpecreatefromnetwork(mut_string error_msg, long network, int ensemblesize, mut_long ensemble, long _xparams);

    public static void mlperandomize(mlpensemble ensemble, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlperandomize() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlperandomize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperandomize(error_msg, ensemble.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperandomize");
    }
    public static void mlperandomize(mlpensemble ensemble) throws alglib.exception
    {
        activatealglibcore();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlperandomize() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlperandomize() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperandomize(error_msg, ensemble.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperandomize");
    }
    private static native int _jni_mlperandomize(mut_string error_msg, long ensemble, long _xparams);

    public static class mlpeproperties_results
    {
        public int nin;
        public int nout;
    }
    public static mlpeproperties_results mlpeproperties(mlpensemble ensemble, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_nin = new mut_int();
        mut_int lcl_nout = new mut_int();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeproperties() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeproperties() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeproperties(error_msg, ensemble.get_ptr(), lcl_nin, lcl_nout, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeproperties");
        mlpeproperties_results ret_tuple = new mlpeproperties_results();
        ret_tuple.nin = lcl_nin.val;
        ret_tuple.nout = lcl_nout.val;
        return ret_tuple;
    }
    public static mlpeproperties_results mlpeproperties(mlpensemble ensemble) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_nin = new mut_int();
        mut_int lcl_nout = new mut_int();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeproperties() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeproperties() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeproperties(error_msg, ensemble.get_ptr(), lcl_nin, lcl_nout, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeproperties");
        mlpeproperties_results ret_tuple = new mlpeproperties_results();
        ret_tuple.nin = lcl_nin.val;
        ret_tuple.nout = lcl_nout.val;
        return ret_tuple;
    }
    private static native int _jni_mlpeproperties(mut_string error_msg, long ensemble, mut_int nin, mut_int nout, long _xparams);

    public static boolean mlpeissoftmax(mlpensemble ensemble, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeissoftmax() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeissoftmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeissoftmax(error_msg, lcl_result, ensemble.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeissoftmax");
        return lcl_result.val;
    }
    public static boolean mlpeissoftmax(mlpensemble ensemble) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeissoftmax() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeissoftmax() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeissoftmax(error_msg, lcl_result, ensemble.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeissoftmax");
        return lcl_result.val;
    }
    private static native int _jni_mlpeissoftmax(mut_string error_msg, mut_boolean result, long ensemble, long _xparams);

    public static double[] mlpeprocess(mlpensemble ensemble, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeprocess() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeprocess(error_msg, ensemble.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeprocess");
        return lcl_y.val;
    }
    public static double[] mlpeprocess(mlpensemble ensemble, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeprocess() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeprocess(error_msg, ensemble.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeprocess");
        return lcl_y.val;
    }
    private static native int _jni_mlpeprocess(mut_string error_msg, long ensemble, double[] x, rlc_double1d y, long _xparams);

    public static double[] mlpeprocessi(mlpensemble ensemble, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeprocessi() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeprocessi(error_msg, ensemble.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeprocessi");
        return lcl_y.val;
    }
    public static double[] mlpeprocessi(mlpensemble ensemble, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeprocessi() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeprocessi(error_msg, ensemble.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeprocessi");
        return lcl_y.val;
    }
    private static native int _jni_mlpeprocessi(mut_string error_msg, long ensemble, double[] x, rlc_double1d y, long _xparams);

    public static double mlperelclserror(mlpensemble ensemble, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlperelclserror() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlperelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperelclserror(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperelclserror");
        return lcl_result.val;
    }
    public static double mlperelclserror(mlpensemble ensemble, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlperelclserror() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlperelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlperelclserror(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlperelclserror");
        return lcl_result.val;
    }
    private static native int _jni_mlperelclserror(mut_string error_msg, mut_double result, long ensemble, double[][] xy, int npoints, long _xparams);

    public static double mlpeavgce(mlpensemble ensemble, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgce() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeavgce(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeavgce");
        return lcl_result.val;
    }
    public static double mlpeavgce(mlpensemble ensemble, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgce() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeavgce(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeavgce");
        return lcl_result.val;
    }
    private static native int _jni_mlpeavgce(mut_string error_msg, mut_double result, long ensemble, double[][] xy, int npoints, long _xparams);

    public static double mlpermserror(mlpensemble ensemble, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpermserror() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpermserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpermserror(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpermserror");
        return lcl_result.val;
    }
    public static double mlpermserror(mlpensemble ensemble, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpermserror() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpermserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpermserror(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpermserror");
        return lcl_result.val;
    }
    private static native int _jni_mlpermserror(mut_string error_msg, mut_double result, long ensemble, double[][] xy, int npoints, long _xparams);

    public static double mlpeavgerror(mlpensemble ensemble, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgerror() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeavgerror(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeavgerror");
        return lcl_result.val;
    }
    public static double mlpeavgerror(mlpensemble ensemble, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgerror() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeavgerror(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeavgerror");
        return lcl_result.val;
    }
    private static native int _jni_mlpeavgerror(mut_string error_msg, mut_double result, long ensemble, double[][] xy, int npoints, long _xparams);

    public static double mlpeavgrelerror(mlpensemble ensemble, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgrelerror() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeavgrelerror(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeavgrelerror");
        return lcl_result.val;
    }
    public static double mlpeavgrelerror(mlpensemble ensemble, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgrelerror() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpeavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpeavgrelerror(error_msg, lcl_result, ensemble.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpeavgrelerror");
        return lcl_result.val;
    }
    private static native int _jni_mlpeavgrelerror(mut_string error_msg, mut_double result, long ensemble, double[][] xy, int npoints, long _xparams);

    
    
    //
    // Subpackage clustering
    //
    

    public static class clusterizerstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected clusterizerstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected clusterizerstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected clusterizerstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new clusterizerstate(0);
            return new clusterizerstate(_jni_x_obj_copy_clusterizerstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_clusterizerstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_clusterizerstate(long x);
    private static native void _jni_x_obj_free_clusterizerstate(long x);


        public static class ahcreport extends alglibobject
        {
            public int terminationtype;
            public int npoints;
            public int[] p;
            public int[][] z;
            public int[][] pz;
            public int[][] pm;
            public double[] mergedist;
            public alglibobject make_copy()
            {
                ahcreport dst = new ahcreport();
                dst.terminationtype = terminationtype;
                dst.npoints = npoints;
                dst.p = alglib.make_copy(p);
                dst.z = alglib.make_copy(z);
                dst.pz = alglib.make_copy(pz);
                dst.pm = alglib.make_copy(pm);
                dst.mergedist = alglib.make_copy(mergedist);
                return dst;
            }
        }


        public static class kmeansreport extends alglibobject
        {
            public int npoints;
            public int nfeatures;
            public int terminationtype;
            public int iterationscount;
            public double energy;
            public int k;
            public double[][] c;
            public int[] cidx;
            public alglibobject make_copy()
            {
                kmeansreport dst = new kmeansreport();
                dst.npoints = npoints;
                dst.nfeatures = nfeatures;
                dst.terminationtype = terminationtype;
                dst.iterationscount = iterationscount;
                dst.energy = energy;
                dst.k = k;
                dst.c = alglib.make_copy(c);
                dst.cidx = alglib.make_copy(cidx);
                return dst;
            }
        }

    public static clusterizerstate clusterizercreate(alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizercreate(error_msg, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizercreate");
        return new clusterizerstate(lcl_s.val);
    }
    public static clusterizerstate clusterizercreate() throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizercreate(error_msg, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizercreate");
        return new clusterizerstate(lcl_s.val);
    }
    private static native int _jni_clusterizercreate(mut_string error_msg, mut_long s, long _xparams);

    public static void clusterizersetpoints(clusterizerstate s, double[][] xy, int npoints, int nfeatures, int disttype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetpoints() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetpoints() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetpoints(error_msg, s.get_ptr(), xy, npoints, nfeatures, disttype, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetpoints");
    }
    public static void clusterizersetpoints(clusterizerstate s, double[][] xy, int npoints, int nfeatures, int disttype) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetpoints() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetpoints() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetpoints(error_msg, s.get_ptr(), xy, npoints, nfeatures, disttype, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetpoints");
    }
            
    public static void clusterizersetpoints(clusterizerstate s, double[][] xy, int disttype, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nfeatures;
    
        npoints = ap.rows(xy);
        nfeatures = ap.cols(xy);
        clusterizersetpoints(s, xy, npoints, nfeatures, disttype, _params);
    
    }
    
    public static void clusterizersetpoints(clusterizerstate s, double[][] xy, int disttype) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nfeatures;
    
        npoints = ap.rows(xy);
        nfeatures = ap.cols(xy);
        clusterizersetpoints(s, xy, npoints, nfeatures, disttype, _params);
    
    }
    private static native int _jni_clusterizersetpoints(mut_string error_msg, long s, double[][] xy, int npoints, int nfeatures, int disttype, long _xparams);

    public static void clusterizersetdistances(clusterizerstate s, double[][] d, int npoints, boolean isupper, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetdistances() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetdistances() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetdistances(error_msg, s.get_ptr(), d, npoints, isupper, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetdistances");
    }
    public static void clusterizersetdistances(clusterizerstate s, double[][] d, int npoints, boolean isupper) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetdistances() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetdistances() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetdistances(error_msg, s.get_ptr(), d, npoints, isupper, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetdistances");
    }
            
    public static void clusterizersetdistances(clusterizerstate s, double[][] d, boolean isupper, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        if( (ap.rows(d)!=ap.cols(d)))
            throw new exception("Error while calling clusterizersetdistances(): looks like one of arguments has wrong size");
        npoints = ap.rows(d);
        clusterizersetdistances(s, d, npoints, isupper, _params);
    
    }
    
    public static void clusterizersetdistances(clusterizerstate s, double[][] d, boolean isupper) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        if( (ap.rows(d)!=ap.cols(d)))
            throw new exception("Error while calling clusterizersetdistances(): looks like one of arguments has wrong size");
        npoints = ap.rows(d);
        clusterizersetdistances(s, d, npoints, isupper, _params);
    
    }
    private static native int _jni_clusterizersetdistances(mut_string error_msg, long s, double[][] d, int npoints, boolean isupper, long _xparams);

    public static void clusterizersetahcalgo(clusterizerstate s, int algo, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetahcalgo() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetahcalgo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetahcalgo(error_msg, s.get_ptr(), algo, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetahcalgo");
    }
    public static void clusterizersetahcalgo(clusterizerstate s, int algo) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetahcalgo() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetahcalgo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetahcalgo(error_msg, s.get_ptr(), algo, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetahcalgo");
    }
    private static native int _jni_clusterizersetahcalgo(mut_string error_msg, long s, int algo, long _xparams);

    public static void clusterizersetkmeanslimits(clusterizerstate s, int restarts, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetkmeanslimits() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetkmeanslimits() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetkmeanslimits(error_msg, s.get_ptr(), restarts, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetkmeanslimits");
    }
    public static void clusterizersetkmeanslimits(clusterizerstate s, int restarts, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetkmeanslimits() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetkmeanslimits() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetkmeanslimits(error_msg, s.get_ptr(), restarts, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetkmeanslimits");
    }
    private static native int _jni_clusterizersetkmeanslimits(mut_string error_msg, long s, int restarts, int maxits, long _xparams);

    public static void clusterizersetkmeansinit(clusterizerstate s, int initalgo, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetkmeansinit() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetkmeansinit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetkmeansinit(error_msg, s.get_ptr(), initalgo, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetkmeansinit");
    }
    public static void clusterizersetkmeansinit(clusterizerstate s, int initalgo) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetkmeansinit() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetkmeansinit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetkmeansinit(error_msg, s.get_ptr(), initalgo, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetkmeansinit");
    }
    private static native int _jni_clusterizersetkmeansinit(mut_string error_msg, long s, int initalgo, long _xparams);

    public static void clusterizersetseed(clusterizerstate s, int seed, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetseed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetseed(error_msg, s.get_ptr(), seed, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetseed");
    }
    public static void clusterizersetseed(clusterizerstate s, int seed) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetseed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizersetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizersetseed(error_msg, s.get_ptr(), seed, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizersetseed");
    }
    private static native int _jni_clusterizersetseed(mut_string error_msg, long s, int seed, long _xparams);

    public static ahcreport clusterizerrunahc(clusterizerstate s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizerrunahc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizerrunahc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizerrunahc(error_msg, s.get_ptr(), lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizerrunahc");
        return (ahcreport)lcl_rep.val;
    }
    public static ahcreport clusterizerrunahc(clusterizerstate s) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizerrunahc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizerrunahc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizerrunahc(error_msg, s.get_ptr(), lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizerrunahc");
        return (ahcreport)lcl_rep.val;
    }
    private static native int _jni_clusterizerrunahc(mut_string error_msg, long s, mut_object rep, long _xparams);

    public static kmeansreport clusterizerrunkmeans(clusterizerstate s, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizerrunkmeans() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizerrunkmeans() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizerrunkmeans(error_msg, s.get_ptr(), k, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizerrunkmeans");
        return (kmeansreport)lcl_rep.val;
    }
    public static kmeansreport clusterizerrunkmeans(clusterizerstate s, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizerrunkmeans() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of clusterizerrunkmeans() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizerrunkmeans(error_msg, s.get_ptr(), k, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizerrunkmeans");
        return (kmeansreport)lcl_rep.val;
    }
    private static native int _jni_clusterizerrunkmeans(mut_string error_msg, long s, int k, mut_object rep, long _xparams);

    public static double[][] clusterizergetdistances(double[][] xy, int npoints, int nfeatures, int disttype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_d = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizergetdistances(error_msg, xy, npoints, nfeatures, disttype, lcl_d, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizergetdistances");
        return lcl_d.val;
    }
    public static double[][] clusterizergetdistances(double[][] xy, int npoints, int nfeatures, int disttype) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_d = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizergetdistances(error_msg, xy, npoints, nfeatures, disttype, lcl_d, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizergetdistances");
        return lcl_d.val;
    }
    private static native int _jni_clusterizergetdistances(mut_string error_msg, double[][] xy, int npoints, int nfeatures, int disttype, rlc_double2d d, long _xparams);

    public static class clusterizergetkclusters_results
    {
        public int[] cidx;
        public int[] cz;
    }
    public static clusterizergetkclusters_results clusterizergetkclusters(ahcreport rep, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_cidx = new rlc_int1d();
        rlc_int1d lcl_cz = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizergetkclusters(error_msg, rep, k, lcl_cidx, lcl_cz, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizergetkclusters");
        clusterizergetkclusters_results ret_tuple = new clusterizergetkclusters_results();
        ret_tuple.cidx = lcl_cidx.val;
        ret_tuple.cz = lcl_cz.val;
        return ret_tuple;
    }
    public static clusterizergetkclusters_results clusterizergetkclusters(ahcreport rep, int k) throws alglib.exception
    {
        activatealglibcore();
        rlc_int1d lcl_cidx = new rlc_int1d();
        rlc_int1d lcl_cz = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizergetkclusters(error_msg, rep, k, lcl_cidx, lcl_cz, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizergetkclusters");
        clusterizergetkclusters_results ret_tuple = new clusterizergetkclusters_results();
        ret_tuple.cidx = lcl_cidx.val;
        ret_tuple.cz = lcl_cz.val;
        return ret_tuple;
    }
    private static native int _jni_clusterizergetkclusters(mut_string error_msg, Object rep, int k, rlc_int1d cidx, rlc_int1d cz, long _xparams);

    public static class clusterizerseparatedbydist_results
    {
        public int k;
        public int[] cidx;
        public int[] cz;
    }
    public static clusterizerseparatedbydist_results clusterizerseparatedbydist(ahcreport rep, double r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_k = new mut_int();
        rlc_int1d lcl_cidx = new rlc_int1d();
        rlc_int1d lcl_cz = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizerseparatedbydist(error_msg, rep, r, lcl_k, lcl_cidx, lcl_cz, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizerseparatedbydist");
        clusterizerseparatedbydist_results ret_tuple = new clusterizerseparatedbydist_results();
        ret_tuple.k = lcl_k.val;
        ret_tuple.cidx = lcl_cidx.val;
        ret_tuple.cz = lcl_cz.val;
        return ret_tuple;
    }
    public static clusterizerseparatedbydist_results clusterizerseparatedbydist(ahcreport rep, double r) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_k = new mut_int();
        rlc_int1d lcl_cidx = new rlc_int1d();
        rlc_int1d lcl_cz = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizerseparatedbydist(error_msg, rep, r, lcl_k, lcl_cidx, lcl_cz, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizerseparatedbydist");
        clusterizerseparatedbydist_results ret_tuple = new clusterizerseparatedbydist_results();
        ret_tuple.k = lcl_k.val;
        ret_tuple.cidx = lcl_cidx.val;
        ret_tuple.cz = lcl_cz.val;
        return ret_tuple;
    }
    private static native int _jni_clusterizerseparatedbydist(mut_string error_msg, Object rep, double r, mut_int k, rlc_int1d cidx, rlc_int1d cz, long _xparams);

    public static class clusterizerseparatedbycorr_results
    {
        public int k;
        public int[] cidx;
        public int[] cz;
    }
    public static clusterizerseparatedbycorr_results clusterizerseparatedbycorr(ahcreport rep, double r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_k = new mut_int();
        rlc_int1d lcl_cidx = new rlc_int1d();
        rlc_int1d lcl_cz = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizerseparatedbycorr(error_msg, rep, r, lcl_k, lcl_cidx, lcl_cz, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizerseparatedbycorr");
        clusterizerseparatedbycorr_results ret_tuple = new clusterizerseparatedbycorr_results();
        ret_tuple.k = lcl_k.val;
        ret_tuple.cidx = lcl_cidx.val;
        ret_tuple.cz = lcl_cz.val;
        return ret_tuple;
    }
    public static clusterizerseparatedbycorr_results clusterizerseparatedbycorr(ahcreport rep, double r) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_k = new mut_int();
        rlc_int1d lcl_cidx = new rlc_int1d();
        rlc_int1d lcl_cz = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_clusterizerseparatedbycorr(error_msg, rep, r, lcl_k, lcl_cidx, lcl_cz, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "clusterizerseparatedbycorr");
        clusterizerseparatedbycorr_results ret_tuple = new clusterizerseparatedbycorr_results();
        ret_tuple.k = lcl_k.val;
        ret_tuple.cidx = lcl_cidx.val;
        ret_tuple.cz = lcl_cz.val;
        return ret_tuple;
    }
    private static native int _jni_clusterizerseparatedbycorr(mut_string error_msg, Object rep, double r, mut_int k, rlc_int1d cidx, rlc_int1d cz, long _xparams);

    
    
    //
    // Subpackage dforest
    //
    

    public static class decisionforestbuilder extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected decisionforestbuilder()
        {
            _ptr = 0;
            own  = false;
        }
        protected decisionforestbuilder(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected decisionforestbuilder(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new decisionforestbuilder(0);
            return new decisionforestbuilder(_jni_x_obj_copy_decisionforestbuilder(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_decisionforestbuilder(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_decisionforestbuilder(long x);
    private static native void _jni_x_obj_free_decisionforestbuilder(long x);


    public static class decisionforestbuffer extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected decisionforestbuffer()
        {
            _ptr = 0;
            own  = false;
        }
        protected decisionforestbuffer(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected decisionforestbuffer(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new decisionforestbuffer(0);
            return new decisionforestbuffer(_jni_x_obj_copy_decisionforestbuffer(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_decisionforestbuffer(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_decisionforestbuffer(long x);
    private static native void _jni_x_obj_free_decisionforestbuffer(long x);


    public static class decisionforest extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected decisionforest()
        {
            _ptr = 0;
            own  = false;
        }
        protected decisionforest(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected decisionforest(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new decisionforest(0);
            return new decisionforest(_jni_x_obj_copy_decisionforest(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_decisionforest(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_decisionforest(long x);
    private static native void _jni_x_obj_free_decisionforest(long x);


        public static class dfreport extends alglibobject
        {
            public double relclserror;
            public double avgce;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public double oobrelclserror;
            public double oobavgce;
            public double oobrmserror;
            public double oobavgerror;
            public double oobavgrelerror;
            public int[] topvars;
            public double[] varimportances;
            public alglibobject make_copy()
            {
                dfreport dst = new dfreport();
                dst.relclserror = relclserror;
                dst.avgce = avgce;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                dst.oobrelclserror = oobrelclserror;
                dst.oobavgce = oobavgce;
                dst.oobrmserror = oobrmserror;
                dst.oobavgerror = oobavgerror;
                dst.oobavgrelerror = oobavgrelerror;
                dst.topvars = alglib.make_copy(topvars);
                dst.varimportances = alglib.make_copy(varimportances);
                return dst;
            }
        }

    private static native int _jni_dfserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String dfserialize(decisionforest obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of dfserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of dfserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_dfserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_dfunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static decisionforest dfunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_dfunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfunserialize");
        return new decisionforest(lcl_result.val);
    }

    public static decisionforestbuffer dfcreatebuffer(decisionforest model, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfcreatebuffer() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfcreatebuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfcreatebuffer(error_msg, model.get_ptr(), lcl_buf, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfcreatebuffer");
        return new decisionforestbuffer(lcl_buf.val);
    }
    public static decisionforestbuffer dfcreatebuffer(decisionforest model) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfcreatebuffer() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfcreatebuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfcreatebuffer(error_msg, model.get_ptr(), lcl_buf, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfcreatebuffer");
        return new decisionforestbuffer(lcl_buf.val);
    }
    private static native int _jni_dfcreatebuffer(mut_string error_msg, long model, mut_long buf, long _xparams);

    public static decisionforestbuilder dfbuildercreate(alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildercreate(error_msg, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildercreate");
        return new decisionforestbuilder(lcl_s.val);
    }
    public static decisionforestbuilder dfbuildercreate() throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildercreate(error_msg, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildercreate");
        return new decisionforestbuilder(lcl_s.val);
    }
    private static native int _jni_dfbuildercreate(mut_string error_msg, mut_long s, long _xparams);

    public static void dfbuildersetdataset(decisionforestbuilder s, double[][] xy, int npoints, int nvars, int nclasses, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetdataset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetdataset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetdataset(error_msg, s.get_ptr(), xy, npoints, nvars, nclasses, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetdataset");
    }
    public static void dfbuildersetdataset(decisionforestbuilder s, double[][] xy, int npoints, int nvars, int nclasses) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetdataset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetdataset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetdataset(error_msg, s.get_ptr(), xy, npoints, nvars, nclasses, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetdataset");
    }
    private static native int _jni_dfbuildersetdataset(mut_string error_msg, long s, double[][] xy, int npoints, int nvars, int nclasses, long _xparams);

    public static void dfbuildersetrndvars(decisionforestbuilder s, int rndvars, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvars() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvars() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrndvars(error_msg, s.get_ptr(), rndvars, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrndvars");
    }
    public static void dfbuildersetrndvars(decisionforestbuilder s, int rndvars) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvars() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvars() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrndvars(error_msg, s.get_ptr(), rndvars, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrndvars");
    }
    private static native int _jni_dfbuildersetrndvars(mut_string error_msg, long s, int rndvars, long _xparams);

    public static void dfbuildersetrndvarsratio(decisionforestbuilder s, double f, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvarsratio() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvarsratio() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrndvarsratio(error_msg, s.get_ptr(), f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrndvarsratio");
    }
    public static void dfbuildersetrndvarsratio(decisionforestbuilder s, double f) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvarsratio() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvarsratio() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrndvarsratio(error_msg, s.get_ptr(), f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrndvarsratio");
    }
    private static native int _jni_dfbuildersetrndvarsratio(mut_string error_msg, long s, double f, long _xparams);

    public static void dfbuildersetrndvarsauto(decisionforestbuilder s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvarsauto() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvarsauto() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrndvarsauto(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrndvarsauto");
    }
    public static void dfbuildersetrndvarsauto(decisionforestbuilder s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvarsauto() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrndvarsauto() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrndvarsauto(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrndvarsauto");
    }
    private static native int _jni_dfbuildersetrndvarsauto(mut_string error_msg, long s, long _xparams);

    public static void dfbuildersetsubsampleratio(decisionforestbuilder s, double f, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetsubsampleratio() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetsubsampleratio() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetsubsampleratio(error_msg, s.get_ptr(), f, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetsubsampleratio");
    }
    public static void dfbuildersetsubsampleratio(decisionforestbuilder s, double f) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetsubsampleratio() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetsubsampleratio() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetsubsampleratio(error_msg, s.get_ptr(), f, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetsubsampleratio");
    }
    private static native int _jni_dfbuildersetsubsampleratio(mut_string error_msg, long s, double f, long _xparams);

    public static void dfbuildersetseed(decisionforestbuilder s, int seedval, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetseed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetseed(error_msg, s.get_ptr(), seedval, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetseed");
    }
    public static void dfbuildersetseed(decisionforestbuilder s, int seedval) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetseed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetseed(error_msg, s.get_ptr(), seedval, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetseed");
    }
    private static native int _jni_dfbuildersetseed(mut_string error_msg, long s, int seedval, long _xparams);

    public static void dfbuildersetrdfalgo(decisionforestbuilder s, int algotype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrdfalgo() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrdfalgo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrdfalgo(error_msg, s.get_ptr(), algotype, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrdfalgo");
    }
    public static void dfbuildersetrdfalgo(decisionforestbuilder s, int algotype) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrdfalgo() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrdfalgo() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrdfalgo(error_msg, s.get_ptr(), algotype, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrdfalgo");
    }
    private static native int _jni_dfbuildersetrdfalgo(mut_string error_msg, long s, int algotype, long _xparams);

    public static void dfbuildersetrdfsplitstrength(decisionforestbuilder s, int splitstrength, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrdfsplitstrength() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrdfsplitstrength() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrdfsplitstrength(error_msg, s.get_ptr(), splitstrength, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrdfsplitstrength");
    }
    public static void dfbuildersetrdfsplitstrength(decisionforestbuilder s, int splitstrength) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrdfsplitstrength() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetrdfsplitstrength() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetrdfsplitstrength(error_msg, s.get_ptr(), splitstrength, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetrdfsplitstrength");
    }
    private static native int _jni_dfbuildersetrdfsplitstrength(mut_string error_msg, long s, int splitstrength, long _xparams);

    public static void dfbuildersetimportancetrngini(decisionforestbuilder s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancetrngini() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancetrngini() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetimportancetrngini(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetimportancetrngini");
    }
    public static void dfbuildersetimportancetrngini(decisionforestbuilder s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancetrngini() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancetrngini() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetimportancetrngini(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetimportancetrngini");
    }
    private static native int _jni_dfbuildersetimportancetrngini(mut_string error_msg, long s, long _xparams);

    public static void dfbuildersetimportanceoobgini(decisionforestbuilder s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportanceoobgini() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportanceoobgini() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetimportanceoobgini(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetimportanceoobgini");
    }
    public static void dfbuildersetimportanceoobgini(decisionforestbuilder s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportanceoobgini() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportanceoobgini() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetimportanceoobgini(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetimportanceoobgini");
    }
    private static native int _jni_dfbuildersetimportanceoobgini(mut_string error_msg, long s, long _xparams);

    public static void dfbuildersetimportancepermutation(decisionforestbuilder s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancepermutation() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancepermutation() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetimportancepermutation(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetimportancepermutation");
    }
    public static void dfbuildersetimportancepermutation(decisionforestbuilder s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancepermutation() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancepermutation() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetimportancepermutation(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetimportancepermutation");
    }
    private static native int _jni_dfbuildersetimportancepermutation(mut_string error_msg, long s, long _xparams);

    public static void dfbuildersetimportancenone(decisionforestbuilder s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancenone() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancenone() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetimportancenone(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetimportancenone");
    }
    public static void dfbuildersetimportancenone(decisionforestbuilder s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancenone() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildersetimportancenone() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildersetimportancenone(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildersetimportancenone");
    }
    private static native int _jni_dfbuildersetimportancenone(mut_string error_msg, long s, long _xparams);

    public static double dfbuildergetprogress(decisionforestbuilder s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildergetprogress() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildergetprogress() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildergetprogress(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildergetprogress");
        return lcl_result.val;
    }
    public static double dfbuildergetprogress(decisionforestbuilder s) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildergetprogress() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuildergetprogress() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildergetprogress(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildergetprogress");
        return lcl_result.val;
    }
    private static native int _jni_dfbuildergetprogress(mut_string error_msg, mut_double result, long s, long _xparams);

    public static double dfbuilderpeekprogress(decisionforestbuilder s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuilderpeekprogress() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuilderpeekprogress() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuilderpeekprogress(error_msg, lcl_result, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuilderpeekprogress");
        return lcl_result.val;
    }
    public static double dfbuilderpeekprogress(decisionforestbuilder s) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuilderpeekprogress() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuilderpeekprogress() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuilderpeekprogress(error_msg, lcl_result, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuilderpeekprogress");
        return lcl_result.val;
    }
    private static native int _jni_dfbuilderpeekprogress(mut_string error_msg, mut_double result, long s, long _xparams);

    public static class dfbuilderbuildrandomforest_results
    {
        public decisionforest df;
        public dfreport rep;
    }
    public static dfbuilderbuildrandomforest_results dfbuilderbuildrandomforest(decisionforestbuilder s, int ntrees, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_df = new mut_long();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuilderbuildrandomforest() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuilderbuildrandomforest() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuilderbuildrandomforest(error_msg, s.get_ptr(), ntrees, lcl_df, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuilderbuildrandomforest");
        dfbuilderbuildrandomforest_results ret_tuple = new dfbuilderbuildrandomforest_results();
        ret_tuple.df = new decisionforest(lcl_df.val);
        ret_tuple.rep = (dfreport)lcl_rep.val;
        return ret_tuple;
    }
    public static dfbuilderbuildrandomforest_results dfbuilderbuildrandomforest(decisionforestbuilder s, int ntrees) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_df = new mut_long();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuilderbuildrandomforest() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of dfbuilderbuildrandomforest() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuilderbuildrandomforest(error_msg, s.get_ptr(), ntrees, lcl_df, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuilderbuildrandomforest");
        dfbuilderbuildrandomforest_results ret_tuple = new dfbuilderbuildrandomforest_results();
        ret_tuple.df = new decisionforest(lcl_df.val);
        ret_tuple.rep = (dfreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_dfbuilderbuildrandomforest(mut_string error_msg, long s, int ntrees, mut_long df, mut_object rep, long _xparams);

    public static double dfbinarycompression(decisionforest df, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfbinarycompression() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfbinarycompression() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbinarycompression(error_msg, lcl_result, df.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbinarycompression");
        return lcl_result.val;
    }
    public static double dfbinarycompression(decisionforest df) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfbinarycompression() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfbinarycompression() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbinarycompression(error_msg, lcl_result, df.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbinarycompression");
        return lcl_result.val;
    }
    private static native int _jni_dfbinarycompression(mut_string error_msg, mut_double result, long df, long _xparams);

    public static double[] dfprocess(decisionforest df, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfprocess() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfprocess(error_msg, df.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfprocess");
        return lcl_y.val;
    }
    public static double[] dfprocess(decisionforest df, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfprocess() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfprocess(error_msg, df.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfprocess");
        return lcl_y.val;
    }
    private static native int _jni_dfprocess(mut_string error_msg, long df, double[] x, rlc_double1d y, long _xparams);

    public static double[] dfprocessi(decisionforest df, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfprocessi() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfprocessi(error_msg, df.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfprocessi");
        return lcl_y.val;
    }
    public static double[] dfprocessi(decisionforest df, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfprocessi() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfprocessi(error_msg, df.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfprocessi");
        return lcl_y.val;
    }
    private static native int _jni_dfprocessi(mut_string error_msg, long df, double[] x, rlc_double1d y, long _xparams);

    public static double dfprocess0(decisionforest model, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfprocess0() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfprocess0() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfprocess0(error_msg, lcl_result, model.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfprocess0");
        return lcl_result.val;
    }
    public static double dfprocess0(decisionforest model, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfprocess0() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfprocess0() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfprocess0(error_msg, lcl_result, model.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfprocess0");
        return lcl_result.val;
    }
    private static native int _jni_dfprocess0(mut_string error_msg, mut_double result, long model, double[] x, long _xparams);

    public static int dfclassify(decisionforest model, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfclassify() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfclassify() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfclassify(error_msg, lcl_result, model.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfclassify");
        return lcl_result.val;
    }
    public static int dfclassify(decisionforest model, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfclassify() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of dfclassify() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfclassify(error_msg, lcl_result, model.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfclassify");
        return lcl_result.val;
    }
    private static native int _jni_dfclassify(mut_string error_msg, mut_int result, long model, double[] x, long _xparams);

    public static double[] dftsprocess(decisionforest df, decisionforestbuffer buf, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dftsprocess() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dftsprocess() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of dftsprocess() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of dftsprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dftsprocess(error_msg, df.get_ptr(), buf.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dftsprocess");
        return lcl_y.val;
    }
    public static double[] dftsprocess(decisionforest df, decisionforestbuffer buf, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dftsprocess() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dftsprocess() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of dftsprocess() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of dftsprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dftsprocess(error_msg, df.get_ptr(), buf.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dftsprocess");
        return lcl_y.val;
    }
    private static native int _jni_dftsprocess(mut_string error_msg, long df, long buf, double[] x, rlc_double1d y, long _xparams);

    public static double dfrelclserror(decisionforest df, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfrelclserror() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfrelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfrelclserror(error_msg, lcl_result, df.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfrelclserror");
        return lcl_result.val;
    }
    public static double dfrelclserror(decisionforest df, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfrelclserror() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfrelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfrelclserror(error_msg, lcl_result, df.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfrelclserror");
        return lcl_result.val;
    }
    private static native int _jni_dfrelclserror(mut_string error_msg, mut_double result, long df, double[][] xy, int npoints, long _xparams);

    public static double dfavgce(decisionforest df, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgce() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfavgce(error_msg, lcl_result, df.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfavgce");
        return lcl_result.val;
    }
    public static double dfavgce(decisionforest df, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgce() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfavgce(error_msg, lcl_result, df.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfavgce");
        return lcl_result.val;
    }
    private static native int _jni_dfavgce(mut_string error_msg, mut_double result, long df, double[][] xy, int npoints, long _xparams);

    public static double dfrmserror(decisionforest df, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfrmserror() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfrmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfrmserror(error_msg, lcl_result, df.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfrmserror");
        return lcl_result.val;
    }
    public static double dfrmserror(decisionforest df, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfrmserror() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfrmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfrmserror(error_msg, lcl_result, df.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfrmserror");
        return lcl_result.val;
    }
    private static native int _jni_dfrmserror(mut_string error_msg, mut_double result, long df, double[][] xy, int npoints, long _xparams);

    public static double dfavgerror(decisionforest df, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgerror() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfavgerror(error_msg, lcl_result, df.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfavgerror");
        return lcl_result.val;
    }
    public static double dfavgerror(decisionforest df, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgerror() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfavgerror(error_msg, lcl_result, df.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfavgerror");
        return lcl_result.val;
    }
    private static native int _jni_dfavgerror(mut_string error_msg, mut_double result, long df, double[][] xy, int npoints, long _xparams);

    public static double dfavgrelerror(decisionforest df, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgrelerror() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfavgrelerror(error_msg, lcl_result, df.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfavgrelerror");
        return lcl_result.val;
    }
    public static double dfavgrelerror(decisionforest df, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( df==null )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgrelerror() is null");
        if( df.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'df' of dfavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfavgrelerror(error_msg, lcl_result, df.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfavgrelerror");
        return lcl_result.val;
    }
    private static native int _jni_dfavgrelerror(mut_string error_msg, mut_double result, long df, double[][] xy, int npoints, long _xparams);

    public static class dfbuildrandomdecisionforest_results
    {
        public int info;
        public decisionforest df;
        public dfreport rep;
    }
    public static dfbuildrandomdecisionforest_results dfbuildrandomdecisionforest(double[][] xy, int npoints, int nvars, int nclasses, int ntrees, double r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_df = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildrandomdecisionforest(error_msg, xy, npoints, nvars, nclasses, ntrees, r, lcl_info, lcl_df, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildrandomdecisionforest");
        dfbuildrandomdecisionforest_results ret_tuple = new dfbuildrandomdecisionforest_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.df = new decisionforest(lcl_df.val);
        ret_tuple.rep = (dfreport)lcl_rep.val;
        return ret_tuple;
    }
    public static dfbuildrandomdecisionforest_results dfbuildrandomdecisionforest(double[][] xy, int npoints, int nvars, int nclasses, int ntrees, double r) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_df = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildrandomdecisionforest(error_msg, xy, npoints, nvars, nclasses, ntrees, r, lcl_info, lcl_df, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildrandomdecisionforest");
        dfbuildrandomdecisionforest_results ret_tuple = new dfbuildrandomdecisionforest_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.df = new decisionforest(lcl_df.val);
        ret_tuple.rep = (dfreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_dfbuildrandomdecisionforest(mut_string error_msg, double[][] xy, int npoints, int nvars, int nclasses, int ntrees, double r, mut_int info, mut_long df, mut_object rep, long _xparams);

    public static class dfbuildrandomdecisionforestx1_results
    {
        public int info;
        public decisionforest df;
        public dfreport rep;
    }
    public static dfbuildrandomdecisionforestx1_results dfbuildrandomdecisionforestx1(double[][] xy, int npoints, int nvars, int nclasses, int ntrees, int nrndvars, double r, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_df = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildrandomdecisionforestx1(error_msg, xy, npoints, nvars, nclasses, ntrees, nrndvars, r, lcl_info, lcl_df, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildrandomdecisionforestx1");
        dfbuildrandomdecisionforestx1_results ret_tuple = new dfbuildrandomdecisionforestx1_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.df = new decisionforest(lcl_df.val);
        ret_tuple.rep = (dfreport)lcl_rep.val;
        return ret_tuple;
    }
    public static dfbuildrandomdecisionforestx1_results dfbuildrandomdecisionforestx1(double[][] xy, int npoints, int nvars, int nclasses, int ntrees, int nrndvars, double r) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_df = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_dfbuildrandomdecisionforestx1(error_msg, xy, npoints, nvars, nclasses, ntrees, nrndvars, r, lcl_info, lcl_df, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "dfbuildrandomdecisionforestx1");
        dfbuildrandomdecisionforestx1_results ret_tuple = new dfbuildrandomdecisionforestx1_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.df = new decisionforest(lcl_df.val);
        ret_tuple.rep = (dfreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_dfbuildrandomdecisionforestx1(mut_string error_msg, double[][] xy, int npoints, int nvars, int nclasses, int ntrees, int nrndvars, double r, mut_int info, mut_long df, mut_object rep, long _xparams);

    
    
    //
    // Subpackage linreg
    //
    

    public static class linearmodel extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected linearmodel()
        {
            _ptr = 0;
            own  = false;
        }
        protected linearmodel(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected linearmodel(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new linearmodel(0);
            return new linearmodel(_jni_x_obj_copy_linearmodel(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_linearmodel(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_linearmodel(long x);
    private static native void _jni_x_obj_free_linearmodel(long x);


        public static class lrreport extends alglibobject
        {
            public double[][] c;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public double cvrmserror;
            public double cvavgerror;
            public double cvavgrelerror;
            public int ncvdefects;
            public int[] cvdefects;
            public alglibobject make_copy()
            {
                lrreport dst = new lrreport();
                dst.c = alglib.make_copy(c);
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                dst.cvrmserror = cvrmserror;
                dst.cvavgerror = cvavgerror;
                dst.cvavgrelerror = cvavgrelerror;
                dst.ncvdefects = ncvdefects;
                dst.cvdefects = alglib.make_copy(cvdefects);
                return dst;
            }
        }

    public static class lrbuild_results
    {
        public linearmodel lm;
        public lrreport rep;
    }
    public static lrbuild_results lrbuild(double[][] xy, int npoints, int nvars, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrbuild(error_msg, xy, npoints, nvars, lcl_lm, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrbuild");
        lrbuild_results ret_tuple = new lrbuild_results();
        ret_tuple.lm = new linearmodel(lcl_lm.val);
        ret_tuple.rep = (lrreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lrbuild_results lrbuild(double[][] xy, int npoints, int nvars) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrbuild(error_msg, xy, npoints, nvars, lcl_lm, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrbuild");
        lrbuild_results ret_tuple = new lrbuild_results();
        ret_tuple.lm = new linearmodel(lcl_lm.val);
        ret_tuple.rep = (lrreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static lrbuild_results lrbuild(double[][] xy, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nvars;
    
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return lrbuild(xy, npoints, nvars, _params);
    
    }
    
    public static lrbuild_results lrbuild(double[][] xy) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nvars;
    
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return lrbuild(xy, npoints, nvars, _params);
    
    }
    private static native int _jni_lrbuild(mut_string error_msg, double[][] xy, int npoints, int nvars, mut_long lm, mut_object rep, long _xparams);

    public static class lrbuilds_results
    {
        public linearmodel lm;
        public lrreport rep;
    }
    public static lrbuilds_results lrbuilds(double[][] xy, double[] s, int npoints, int nvars, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrbuilds(error_msg, xy, s, npoints, nvars, lcl_lm, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrbuilds");
        lrbuilds_results ret_tuple = new lrbuilds_results();
        ret_tuple.lm = new linearmodel(lcl_lm.val);
        ret_tuple.rep = (lrreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lrbuilds_results lrbuilds(double[][] xy, double[] s, int npoints, int nvars) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrbuilds(error_msg, xy, s, npoints, nvars, lcl_lm, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrbuilds");
        lrbuilds_results ret_tuple = new lrbuilds_results();
        ret_tuple.lm = new linearmodel(lcl_lm.val);
        ret_tuple.rep = (lrreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static lrbuilds_results lrbuilds(double[][] xy, double[] s, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nvars;
        if( (ap.rows(xy)!=s.length))
            throw new exception("Error while calling lrbuilds(): looks like one of arguments has wrong size");
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return lrbuilds(xy, s, npoints, nvars, _params);
    
    }
    
    public static lrbuilds_results lrbuilds(double[][] xy, double[] s) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nvars;
        if( (ap.rows(xy)!=s.length))
            throw new exception("Error while calling lrbuilds(): looks like one of arguments has wrong size");
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return lrbuilds(xy, s, npoints, nvars, _params);
    
    }
    private static native int _jni_lrbuilds(mut_string error_msg, double[][] xy, double[] s, int npoints, int nvars, mut_long lm, mut_object rep, long _xparams);

    public static class lrbuildzs_results
    {
        public linearmodel lm;
        public lrreport rep;
    }
    public static lrbuildzs_results lrbuildzs(double[][] xy, double[] s, int npoints, int nvars, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrbuildzs(error_msg, xy, s, npoints, nvars, lcl_lm, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrbuildzs");
        lrbuildzs_results ret_tuple = new lrbuildzs_results();
        ret_tuple.lm = new linearmodel(lcl_lm.val);
        ret_tuple.rep = (lrreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lrbuildzs_results lrbuildzs(double[][] xy, double[] s, int npoints, int nvars) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrbuildzs(error_msg, xy, s, npoints, nvars, lcl_lm, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrbuildzs");
        lrbuildzs_results ret_tuple = new lrbuildzs_results();
        ret_tuple.lm = new linearmodel(lcl_lm.val);
        ret_tuple.rep = (lrreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static lrbuildzs_results lrbuildzs(double[][] xy, double[] s, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nvars;
        if( (ap.rows(xy)!=s.length))
            throw new exception("Error while calling lrbuildzs(): looks like one of arguments has wrong size");
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return lrbuildzs(xy, s, npoints, nvars, _params);
    
    }
    
    public static lrbuildzs_results lrbuildzs(double[][] xy, double[] s) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nvars;
        if( (ap.rows(xy)!=s.length))
            throw new exception("Error while calling lrbuildzs(): looks like one of arguments has wrong size");
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return lrbuildzs(xy, s, npoints, nvars, _params);
    
    }
    private static native int _jni_lrbuildzs(mut_string error_msg, double[][] xy, double[] s, int npoints, int nvars, mut_long lm, mut_object rep, long _xparams);

    public static class lrbuildz_results
    {
        public linearmodel lm;
        public lrreport rep;
    }
    public static lrbuildz_results lrbuildz(double[][] xy, int npoints, int nvars, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrbuildz(error_msg, xy, npoints, nvars, lcl_lm, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrbuildz");
        lrbuildz_results ret_tuple = new lrbuildz_results();
        ret_tuple.lm = new linearmodel(lcl_lm.val);
        ret_tuple.rep = (lrreport)lcl_rep.val;
        return ret_tuple;
    }
    public static lrbuildz_results lrbuildz(double[][] xy, int npoints, int nvars) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrbuildz(error_msg, xy, npoints, nvars, lcl_lm, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrbuildz");
        lrbuildz_results ret_tuple = new lrbuildz_results();
        ret_tuple.lm = new linearmodel(lcl_lm.val);
        ret_tuple.rep = (lrreport)lcl_rep.val;
        return ret_tuple;
    }
            
    public static lrbuildz_results lrbuildz(double[][] xy, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nvars;
    
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return lrbuildz(xy, npoints, nvars, _params);
    
    }
    
    public static lrbuildz_results lrbuildz(double[][] xy) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nvars;
    
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return lrbuildz(xy, npoints, nvars, _params);
    
    }
    private static native int _jni_lrbuildz(mut_string error_msg, double[][] xy, int npoints, int nvars, mut_long lm, mut_object rep, long _xparams);

    public static class lrunpack_results
    {
        public double[] v;
        public int nvars;
    }
    public static lrunpack_results lrunpack(linearmodel lm, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_v = new rlc_double1d();
        mut_int lcl_nvars = new mut_int();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrunpack() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrunpack(error_msg, lm.get_ptr(), lcl_v, lcl_nvars, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrunpack");
        lrunpack_results ret_tuple = new lrunpack_results();
        ret_tuple.v = lcl_v.val;
        ret_tuple.nvars = lcl_nvars.val;
        return ret_tuple;
    }
    public static lrunpack_results lrunpack(linearmodel lm) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_v = new rlc_double1d();
        mut_int lcl_nvars = new mut_int();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrunpack() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrunpack(error_msg, lm.get_ptr(), lcl_v, lcl_nvars, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrunpack");
        lrunpack_results ret_tuple = new lrunpack_results();
        ret_tuple.v = lcl_v.val;
        ret_tuple.nvars = lcl_nvars.val;
        return ret_tuple;
    }
    private static native int _jni_lrunpack(mut_string error_msg, long lm, rlc_double1d v, mut_int nvars, long _xparams);

    public static linearmodel lrpack(double[] v, int nvars, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrpack(error_msg, v, nvars, lcl_lm, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrpack");
        return new linearmodel(lcl_lm.val);
    }
    public static linearmodel lrpack(double[] v, int nvars) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrpack(error_msg, v, nvars, lcl_lm, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrpack");
        return new linearmodel(lcl_lm.val);
    }
            
    public static linearmodel lrpack(double[] v, alglib.xparams _params) throws alglib.exception
    {
        int nvars;
    
        nvars = v.length+1;
        return lrpack(v, nvars, _params);
    
    }
    
    public static linearmodel lrpack(double[] v) throws alglib.exception
    {
        alglib.xparams _params = null;
        int nvars;
    
        nvars = v.length+1;
        return lrpack(v, nvars, _params);
    
    }
    private static native int _jni_lrpack(mut_string error_msg, double[] v, int nvars, mut_long lm, long _xparams);

    public static double lrprocess(linearmodel lm, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrprocess() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrprocess(error_msg, lcl_result, lm.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrprocess");
        return lcl_result.val;
    }
    public static double lrprocess(linearmodel lm, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrprocess() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrprocess(error_msg, lcl_result, lm.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrprocess");
        return lcl_result.val;
    }
    private static native int _jni_lrprocess(mut_string error_msg, mut_double result, long lm, double[] x, long _xparams);

    public static double lrrmserror(linearmodel lm, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrrmserror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrrmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrrmserror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrrmserror");
        return lcl_result.val;
    }
    public static double lrrmserror(linearmodel lm, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrrmserror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lrrmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lrrmserror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lrrmserror");
        return lcl_result.val;
    }
    private static native int _jni_lrrmserror(mut_string error_msg, mut_double result, long lm, double[][] xy, int npoints, long _xparams);

    public static double lravgerror(linearmodel lm, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lravgerror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lravgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lravgerror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lravgerror");
        return lcl_result.val;
    }
    public static double lravgerror(linearmodel lm, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lravgerror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lravgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lravgerror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lravgerror");
        return lcl_result.val;
    }
    private static native int _jni_lravgerror(mut_string error_msg, mut_double result, long lm, double[][] xy, int npoints, long _xparams);

    public static double lravgrelerror(linearmodel lm, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lravgrelerror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lravgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lravgrelerror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lravgrelerror");
        return lcl_result.val;
    }
    public static double lravgrelerror(linearmodel lm, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lravgrelerror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of lravgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_lravgrelerror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "lravgrelerror");
        return lcl_result.val;
    }
    private static native int _jni_lravgrelerror(mut_string error_msg, mut_double result, long lm, double[][] xy, int npoints, long _xparams);

    
    
    //
    // Subpackage filters
    //
    
    public static void filtersma(double[] x, int n, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_filtersma(error_msg, x, n, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "filtersma");
    }
    public static void filtersma(double[] x, int n, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_filtersma(error_msg, x, n, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "filtersma");
    }
            
    public static void filtersma(double[] x, int k, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        filtersma(x, n, k, _params);
    
    }
    
    public static void filtersma(double[] x, int k) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        filtersma(x, n, k, _params);
    
    }
    private static native int _jni_filtersma(mut_string error_msg, double[] x, int n, int k, long _xparams);

    public static void filterema(double[] x, int n, double alpha, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_filterema(error_msg, x, n, alpha, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "filterema");
    }
    public static void filterema(double[] x, int n, double alpha) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_filterema(error_msg, x, n, alpha, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "filterema");
    }
            
    public static void filterema(double[] x, double alpha, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        filterema(x, n, alpha, _params);
    
    }
    
    public static void filterema(double[] x, double alpha) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        filterema(x, n, alpha, _params);
    
    }
    private static native int _jni_filterema(mut_string error_msg, double[] x, int n, double alpha, long _xparams);

    public static void filterlrma(double[] x, int n, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_filterlrma(error_msg, x, n, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "filterlrma");
    }
    public static void filterlrma(double[] x, int n, int k) throws alglib.exception
    {
        activatealglibcore();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_filterlrma(error_msg, x, n, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "filterlrma");
    }
            
    public static void filterlrma(double[] x, int k, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        filterlrma(x, n, k, _params);
    
    }
    
    public static void filterlrma(double[] x, int k) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        filterlrma(x, n, k, _params);
    
    }
    private static native int _jni_filterlrma(mut_string error_msg, double[] x, int n, int k, long _xparams);

    
    
    //
    // Subpackage ssa
    //
    

    public static class ssamodel extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected ssamodel()
        {
            _ptr = 0;
            own  = false;
        }
        protected ssamodel(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected ssamodel(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new ssamodel(0);
            return new ssamodel(_jni_x_obj_copy_ssamodel(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_ssamodel(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_ssamodel(long x);
    private static native void _jni_x_obj_free_ssamodel(long x);

    public static ssamodel ssacreate(alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssacreate(error_msg, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssacreate");
        return new ssamodel(lcl_s.val);
    }
    public static ssamodel ssacreate() throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssacreate(error_msg, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssacreate");
        return new ssamodel(lcl_s.val);
    }
    private static native int _jni_ssacreate(mut_string error_msg, mut_long s, long _xparams);

    public static void ssasetwindow(ssamodel s, int windowwidth, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetwindow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetwindow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetwindow(error_msg, s.get_ptr(), windowwidth, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetwindow");
    }
    public static void ssasetwindow(ssamodel s, int windowwidth) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetwindow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetwindow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetwindow(error_msg, s.get_ptr(), windowwidth, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetwindow");
    }
    private static native int _jni_ssasetwindow(mut_string error_msg, long s, int windowwidth, long _xparams);

    public static void ssasetseed(ssamodel s, int seed, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetseed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetseed(error_msg, s.get_ptr(), seed, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetseed");
    }
    public static void ssasetseed(ssamodel s, int seed) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetseed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetseed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetseed(error_msg, s.get_ptr(), seed, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetseed");
    }
    private static native int _jni_ssasetseed(mut_string error_msg, long s, int seed, long _xparams);

    public static void ssasetpoweruplength(ssamodel s, int pwlen, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetpoweruplength() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetpoweruplength() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetpoweruplength(error_msg, s.get_ptr(), pwlen, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetpoweruplength");
    }
    public static void ssasetpoweruplength(ssamodel s, int pwlen) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetpoweruplength() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetpoweruplength() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetpoweruplength(error_msg, s.get_ptr(), pwlen, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetpoweruplength");
    }
    private static native int _jni_ssasetpoweruplength(mut_string error_msg, long s, int pwlen, long _xparams);

    public static void ssasetmemorylimit(ssamodel s, int memlimit, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetmemorylimit() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetmemorylimit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetmemorylimit(error_msg, s.get_ptr(), memlimit, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetmemorylimit");
    }
    public static void ssasetmemorylimit(ssamodel s, int memlimit) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetmemorylimit() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetmemorylimit() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetmemorylimit(error_msg, s.get_ptr(), memlimit, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetmemorylimit");
    }
    private static native int _jni_ssasetmemorylimit(mut_string error_msg, long s, int memlimit, long _xparams);

    public static void ssaaddsequence(ssamodel s, double[] x, int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaaddsequence() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaaddsequence() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaaddsequence(error_msg, s.get_ptr(), x, n, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaaddsequence");
    }
    public static void ssaaddsequence(ssamodel s, double[] x, int n) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaaddsequence() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaaddsequence() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaaddsequence(error_msg, s.get_ptr(), x, n, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaaddsequence");
    }
            
    public static void ssaaddsequence(ssamodel s, double[] x, alglib.xparams _params) throws alglib.exception
    {
        int n;
    
        n = x.length;
        ssaaddsequence(s, x, n, _params);
    
    }
    
    public static void ssaaddsequence(ssamodel s, double[] x) throws alglib.exception
    {
        alglib.xparams _params = null;
        int n;
    
        n = x.length;
        ssaaddsequence(s, x, n, _params);
    
    }
    private static native int _jni_ssaaddsequence(mut_string error_msg, long s, double[] x, int n, long _xparams);

    public static void ssaappendpointandupdate(ssamodel s, double x, double updateits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaappendpointandupdate() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaappendpointandupdate() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaappendpointandupdate(error_msg, s.get_ptr(), x, updateits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaappendpointandupdate");
    }
    public static void ssaappendpointandupdate(ssamodel s, double x, double updateits) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaappendpointandupdate() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaappendpointandupdate() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaappendpointandupdate(error_msg, s.get_ptr(), x, updateits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaappendpointandupdate");
    }
    private static native int _jni_ssaappendpointandupdate(mut_string error_msg, long s, double x, double updateits, long _xparams);

    public static void ssaappendsequenceandupdate(ssamodel s, double[] x, int nticks, double updateits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaappendsequenceandupdate() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaappendsequenceandupdate() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaappendsequenceandupdate(error_msg, s.get_ptr(), x, nticks, updateits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaappendsequenceandupdate");
    }
    public static void ssaappendsequenceandupdate(ssamodel s, double[] x, int nticks, double updateits) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaappendsequenceandupdate() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaappendsequenceandupdate() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaappendsequenceandupdate(error_msg, s.get_ptr(), x, nticks, updateits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaappendsequenceandupdate");
    }
            
    public static void ssaappendsequenceandupdate(ssamodel s, double[] x, double updateits, alglib.xparams _params) throws alglib.exception
    {
        int nticks;
    
        nticks = x.length;
        ssaappendsequenceandupdate(s, x, nticks, updateits, _params);
    
    }
    
    public static void ssaappendsequenceandupdate(ssamodel s, double[] x, double updateits) throws alglib.exception
    {
        alglib.xparams _params = null;
        int nticks;
    
        nticks = x.length;
        ssaappendsequenceandupdate(s, x, nticks, updateits, _params);
    
    }
    private static native int _jni_ssaappendsequenceandupdate(mut_string error_msg, long s, double[] x, int nticks, double updateits, long _xparams);

    public static void ssasetalgoprecomputed(ssamodel s, double[][] a, int windowwidth, int nbasis, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgoprecomputed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgoprecomputed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetalgoprecomputed(error_msg, s.get_ptr(), a, windowwidth, nbasis, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetalgoprecomputed");
    }
    public static void ssasetalgoprecomputed(ssamodel s, double[][] a, int windowwidth, int nbasis) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgoprecomputed() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgoprecomputed() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetalgoprecomputed(error_msg, s.get_ptr(), a, windowwidth, nbasis, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetalgoprecomputed");
    }
            
    public static void ssasetalgoprecomputed(ssamodel s, double[][] a, alglib.xparams _params) throws alglib.exception
    {
        int windowwidth;
        int nbasis;
    
        windowwidth = ap.rows(a);
        nbasis = ap.cols(a);
        ssasetalgoprecomputed(s, a, windowwidth, nbasis, _params);
    
    }
    
    public static void ssasetalgoprecomputed(ssamodel s, double[][] a) throws alglib.exception
    {
        alglib.xparams _params = null;
        int windowwidth;
        int nbasis;
    
        windowwidth = ap.rows(a);
        nbasis = ap.cols(a);
        ssasetalgoprecomputed(s, a, windowwidth, nbasis, _params);
    
    }
    private static native int _jni_ssasetalgoprecomputed(mut_string error_msg, long s, double[][] a, int windowwidth, int nbasis, long _xparams);

    public static void ssasetalgotopkdirect(ssamodel s, int topk, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgotopkdirect() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgotopkdirect() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetalgotopkdirect(error_msg, s.get_ptr(), topk, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetalgotopkdirect");
    }
    public static void ssasetalgotopkdirect(ssamodel s, int topk) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgotopkdirect() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgotopkdirect() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetalgotopkdirect(error_msg, s.get_ptr(), topk, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetalgotopkdirect");
    }
    private static native int _jni_ssasetalgotopkdirect(mut_string error_msg, long s, int topk, long _xparams);

    public static void ssasetalgotopkrealtime(ssamodel s, int topk, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgotopkrealtime() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgotopkrealtime() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetalgotopkrealtime(error_msg, s.get_ptr(), topk, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetalgotopkrealtime");
    }
    public static void ssasetalgotopkrealtime(ssamodel s, int topk) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgotopkrealtime() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssasetalgotopkrealtime() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssasetalgotopkrealtime(error_msg, s.get_ptr(), topk, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssasetalgotopkrealtime");
    }
    private static native int _jni_ssasetalgotopkrealtime(mut_string error_msg, long s, int topk, long _xparams);

    public static void ssacleardata(ssamodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssacleardata() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssacleardata() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssacleardata(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssacleardata");
    }
    public static void ssacleardata(ssamodel s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssacleardata() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssacleardata() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssacleardata(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssacleardata");
    }
    private static native int _jni_ssacleardata(mut_string error_msg, long s, long _xparams);

    public static class ssagetbasis_results
    {
        public double[][] a;
        public double[] sv;
        public int windowwidth;
        public int nbasis;
    }
    public static ssagetbasis_results ssagetbasis(ssamodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        rlc_double1d lcl_sv = new rlc_double1d();
        mut_int lcl_windowwidth = new mut_int();
        mut_int lcl_nbasis = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssagetbasis() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssagetbasis() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssagetbasis(error_msg, s.get_ptr(), lcl_a, lcl_sv, lcl_windowwidth, lcl_nbasis, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssagetbasis");
        ssagetbasis_results ret_tuple = new ssagetbasis_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.sv = lcl_sv.val;
        ret_tuple.windowwidth = lcl_windowwidth.val;
        ret_tuple.nbasis = lcl_nbasis.val;
        return ret_tuple;
    }
    public static ssagetbasis_results ssagetbasis(ssamodel s) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        rlc_double1d lcl_sv = new rlc_double1d();
        mut_int lcl_windowwidth = new mut_int();
        mut_int lcl_nbasis = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssagetbasis() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssagetbasis() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssagetbasis(error_msg, s.get_ptr(), lcl_a, lcl_sv, lcl_windowwidth, lcl_nbasis, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssagetbasis");
        ssagetbasis_results ret_tuple = new ssagetbasis_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.sv = lcl_sv.val;
        ret_tuple.windowwidth = lcl_windowwidth.val;
        ret_tuple.nbasis = lcl_nbasis.val;
        return ret_tuple;
    }
    private static native int _jni_ssagetbasis(mut_string error_msg, long s, rlc_double2d a, rlc_double1d sv, mut_int windowwidth, mut_int nbasis, long _xparams);

    public static class ssagetlrr_results
    {
        public double[] a;
        public int windowwidth;
    }
    public static ssagetlrr_results ssagetlrr(ssamodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d();
        mut_int lcl_windowwidth = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssagetlrr() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssagetlrr() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssagetlrr(error_msg, s.get_ptr(), lcl_a, lcl_windowwidth, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssagetlrr");
        ssagetlrr_results ret_tuple = new ssagetlrr_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.windowwidth = lcl_windowwidth.val;
        return ret_tuple;
    }
    public static ssagetlrr_results ssagetlrr(ssamodel s) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_a = new rlc_double1d();
        mut_int lcl_windowwidth = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssagetlrr() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssagetlrr() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssagetlrr(error_msg, s.get_ptr(), lcl_a, lcl_windowwidth, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssagetlrr");
        ssagetlrr_results ret_tuple = new ssagetlrr_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.windowwidth = lcl_windowwidth.val;
        return ret_tuple;
    }
    private static native int _jni_ssagetlrr(mut_string error_msg, long s, rlc_double1d a, mut_int windowwidth, long _xparams);

    public static class ssaanalyzelastwindow_results
    {
        public double[] trend;
        public double[] noise;
        public int nticks;
    }
    public static ssaanalyzelastwindow_results ssaanalyzelastwindow(ssamodel s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        rlc_double1d lcl_noise = new rlc_double1d();
        mut_int lcl_nticks = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzelastwindow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzelastwindow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaanalyzelastwindow(error_msg, s.get_ptr(), lcl_trend, lcl_noise, lcl_nticks, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaanalyzelastwindow");
        ssaanalyzelastwindow_results ret_tuple = new ssaanalyzelastwindow_results();
        ret_tuple.trend = lcl_trend.val;
        ret_tuple.noise = lcl_noise.val;
        ret_tuple.nticks = lcl_nticks.val;
        return ret_tuple;
    }
    public static ssaanalyzelastwindow_results ssaanalyzelastwindow(ssamodel s) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        rlc_double1d lcl_noise = new rlc_double1d();
        mut_int lcl_nticks = new mut_int();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzelastwindow() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzelastwindow() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaanalyzelastwindow(error_msg, s.get_ptr(), lcl_trend, lcl_noise, lcl_nticks, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaanalyzelastwindow");
        ssaanalyzelastwindow_results ret_tuple = new ssaanalyzelastwindow_results();
        ret_tuple.trend = lcl_trend.val;
        ret_tuple.noise = lcl_noise.val;
        ret_tuple.nticks = lcl_nticks.val;
        return ret_tuple;
    }
    private static native int _jni_ssaanalyzelastwindow(mut_string error_msg, long s, rlc_double1d trend, rlc_double1d noise, mut_int nticks, long _xparams);

    public static class ssaanalyzelast_results
    {
        public double[] trend;
        public double[] noise;
    }
    public static ssaanalyzelast_results ssaanalyzelast(ssamodel s, int nticks, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        rlc_double1d lcl_noise = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzelast() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzelast() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaanalyzelast(error_msg, s.get_ptr(), nticks, lcl_trend, lcl_noise, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaanalyzelast");
        ssaanalyzelast_results ret_tuple = new ssaanalyzelast_results();
        ret_tuple.trend = lcl_trend.val;
        ret_tuple.noise = lcl_noise.val;
        return ret_tuple;
    }
    public static ssaanalyzelast_results ssaanalyzelast(ssamodel s, int nticks) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        rlc_double1d lcl_noise = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzelast() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzelast() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaanalyzelast(error_msg, s.get_ptr(), nticks, lcl_trend, lcl_noise, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaanalyzelast");
        ssaanalyzelast_results ret_tuple = new ssaanalyzelast_results();
        ret_tuple.trend = lcl_trend.val;
        ret_tuple.noise = lcl_noise.val;
        return ret_tuple;
    }
    private static native int _jni_ssaanalyzelast(mut_string error_msg, long s, int nticks, rlc_double1d trend, rlc_double1d noise, long _xparams);

    public static class ssaanalyzesequence_results
    {
        public double[] trend;
        public double[] noise;
    }
    public static ssaanalyzesequence_results ssaanalyzesequence(ssamodel s, double[] data, int nticks, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        rlc_double1d lcl_noise = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzesequence() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzesequence() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaanalyzesequence(error_msg, s.get_ptr(), data, nticks, lcl_trend, lcl_noise, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaanalyzesequence");
        ssaanalyzesequence_results ret_tuple = new ssaanalyzesequence_results();
        ret_tuple.trend = lcl_trend.val;
        ret_tuple.noise = lcl_noise.val;
        return ret_tuple;
    }
    public static ssaanalyzesequence_results ssaanalyzesequence(ssamodel s, double[] data, int nticks) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        rlc_double1d lcl_noise = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzesequence() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaanalyzesequence() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaanalyzesequence(error_msg, s.get_ptr(), data, nticks, lcl_trend, lcl_noise, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaanalyzesequence");
        ssaanalyzesequence_results ret_tuple = new ssaanalyzesequence_results();
        ret_tuple.trend = lcl_trend.val;
        ret_tuple.noise = lcl_noise.val;
        return ret_tuple;
    }
            
    public static ssaanalyzesequence_results ssaanalyzesequence(ssamodel s, double[] data, alglib.xparams _params) throws alglib.exception
    {
        int nticks;
    
        nticks = data.length;
        return ssaanalyzesequence(s, data, nticks, _params);
    
    }
    
    public static ssaanalyzesequence_results ssaanalyzesequence(ssamodel s, double[] data) throws alglib.exception
    {
        alglib.xparams _params = null;
        int nticks;
    
        nticks = data.length;
        return ssaanalyzesequence(s, data, nticks, _params);
    
    }
    private static native int _jni_ssaanalyzesequence(mut_string error_msg, long s, double[] data, int nticks, rlc_double1d trend, rlc_double1d noise, long _xparams);

    public static double[] ssaforecastlast(ssamodel s, int nticks, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastlast() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastlast() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaforecastlast(error_msg, s.get_ptr(), nticks, lcl_trend, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaforecastlast");
        return lcl_trend.val;
    }
    public static double[] ssaforecastlast(ssamodel s, int nticks) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastlast() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastlast() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaforecastlast(error_msg, s.get_ptr(), nticks, lcl_trend, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaforecastlast");
        return lcl_trend.val;
    }
    private static native int _jni_ssaforecastlast(mut_string error_msg, long s, int nticks, rlc_double1d trend, long _xparams);

    public static double[] ssaforecastsequence(ssamodel s, double[] data, int datalen, int forecastlen, boolean applysmoothing, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastsequence() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastsequence() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaforecastsequence(error_msg, s.get_ptr(), data, datalen, forecastlen, applysmoothing, lcl_trend, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaforecastsequence");
        return lcl_trend.val;
    }
    public static double[] ssaforecastsequence(ssamodel s, double[] data, int datalen, int forecastlen, boolean applysmoothing) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastsequence() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastsequence() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaforecastsequence(error_msg, s.get_ptr(), data, datalen, forecastlen, applysmoothing, lcl_trend, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaforecastsequence");
        return lcl_trend.val;
    }
            
    public static double[] ssaforecastsequence(ssamodel s, double[] data, int forecastlen, alglib.xparams _params) throws alglib.exception
    {
        int datalen;
        boolean applysmoothing;
    
        datalen = data.length;
        applysmoothing = true;
        return ssaforecastsequence(s, data, datalen, forecastlen, applysmoothing, _params);
    
    }
    
    public static double[] ssaforecastsequence(ssamodel s, double[] data, int forecastlen) throws alglib.exception
    {
        alglib.xparams _params = null;
        int datalen;
        boolean applysmoothing;
    
        datalen = data.length;
        applysmoothing = true;
        return ssaforecastsequence(s, data, datalen, forecastlen, applysmoothing, _params);
    
    }
    private static native int _jni_ssaforecastsequence(mut_string error_msg, long s, double[] data, int datalen, int forecastlen, boolean applysmoothing, rlc_double1d trend, long _xparams);

    public static double[] ssaforecastavglast(ssamodel s, int m, int nticks, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastavglast() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastavglast() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaforecastavglast(error_msg, s.get_ptr(), m, nticks, lcl_trend, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaforecastavglast");
        return lcl_trend.val;
    }
    public static double[] ssaforecastavglast(ssamodel s, int m, int nticks) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastavglast() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastavglast() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaforecastavglast(error_msg, s.get_ptr(), m, nticks, lcl_trend, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaforecastavglast");
        return lcl_trend.val;
    }
    private static native int _jni_ssaforecastavglast(mut_string error_msg, long s, int m, int nticks, rlc_double1d trend, long _xparams);

    public static double[] ssaforecastavgsequence(ssamodel s, double[] data, int datalen, int m, int forecastlen, boolean applysmoothing, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastavgsequence() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastavgsequence() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaforecastavgsequence(error_msg, s.get_ptr(), data, datalen, m, forecastlen, applysmoothing, lcl_trend, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaforecastavgsequence");
        return lcl_trend.val;
    }
    public static double[] ssaforecastavgsequence(ssamodel s, double[] data, int datalen, int m, int forecastlen, boolean applysmoothing) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_trend = new rlc_double1d();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastavgsequence() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of ssaforecastavgsequence() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_ssaforecastavgsequence(error_msg, s.get_ptr(), data, datalen, m, forecastlen, applysmoothing, lcl_trend, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "ssaforecastavgsequence");
        return lcl_trend.val;
    }
            
    public static double[] ssaforecastavgsequence(ssamodel s, double[] data, int m, int forecastlen, alglib.xparams _params) throws alglib.exception
    {
        int datalen;
        boolean applysmoothing;
    
        datalen = data.length;
        applysmoothing = true;
        return ssaforecastavgsequence(s, data, datalen, m, forecastlen, applysmoothing, _params);
    
    }
    
    public static double[] ssaforecastavgsequence(ssamodel s, double[] data, int m, int forecastlen) throws alglib.exception
    {
        alglib.xparams _params = null;
        int datalen;
        boolean applysmoothing;
    
        datalen = data.length;
        applysmoothing = true;
        return ssaforecastavgsequence(s, data, datalen, m, forecastlen, applysmoothing, _params);
    
    }
    private static native int _jni_ssaforecastavgsequence(mut_string error_msg, long s, double[] data, int datalen, int m, int forecastlen, boolean applysmoothing, rlc_double1d trend, long _xparams);

    
    
    //
    // Subpackage lda
    //
    
    public static double[] fisherlda(double[][] xy, int npoints, int nvars, int nclasses, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fisherlda(error_msg, xy, npoints, nvars, nclasses, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fisherlda");
        return lcl_w.val;
    }
    public static double[] fisherlda(double[][] xy, int npoints, int nvars, int nclasses) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_w = new rlc_double1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fisherlda(error_msg, xy, npoints, nvars, nclasses, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fisherlda");
        return lcl_w.val;
    }
            
    public static double[] fisherlda(double[][] xy, int nclasses, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nvars;
    
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return fisherlda(xy, npoints, nvars, nclasses, _params);
    
    }
    
    public static double[] fisherlda(double[][] xy, int nclasses) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nvars;
    
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return fisherlda(xy, npoints, nvars, nclasses, _params);
    
    }
    private static native int _jni_fisherlda(mut_string error_msg, double[][] xy, int npoints, int nvars, int nclasses, rlc_double1d w, long _xparams);

    public static double[][] fisherldan(double[][] xy, int npoints, int nvars, int nclasses, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_w = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fisherldan(error_msg, xy, npoints, nvars, nclasses, lcl_w, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fisherldan");
        return lcl_w.val;
    }
    public static double[][] fisherldan(double[][] xy, int npoints, int nvars, int nclasses) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_w = new rlc_double2d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_fisherldan(error_msg, xy, npoints, nvars, nclasses, lcl_w, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "fisherldan");
        return lcl_w.val;
    }
            
    public static double[][] fisherldan(double[][] xy, int nclasses, alglib.xparams _params) throws alglib.exception
    {
        int npoints;
        int nvars;
    
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return fisherldan(xy, npoints, nvars, nclasses, _params);
    
    }
    
    public static double[][] fisherldan(double[][] xy, int nclasses) throws alglib.exception
    {
        alglib.xparams _params = null;
        int npoints;
        int nvars;
    
        npoints = ap.rows(xy);
        nvars = ap.cols(xy)-1;
        return fisherldan(xy, npoints, nvars, nclasses, _params);
    
    }
    private static native int _jni_fisherldan(mut_string error_msg, double[][] xy, int npoints, int nvars, int nclasses, rlc_double2d w, long _xparams);

    
    
    //
    // Subpackage mcpd
    //
    

    public static class mcpdstate extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected mcpdstate()
        {
            _ptr = 0;
            own  = false;
        }
        protected mcpdstate(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected mcpdstate(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new mcpdstate(0);
            return new mcpdstate(_jni_x_obj_copy_mcpdstate(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_mcpdstate(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_mcpdstate(long x);
    private static native void _jni_x_obj_free_mcpdstate(long x);


        public static class mcpdreport extends alglibobject
        {
            public int inneriterationscount;
            public int outeriterationscount;
            public int nfev;
            public int terminationtype;
            public alglibobject make_copy()
            {
                mcpdreport dst = new mcpdreport();
                dst.inneriterationscount = inneriterationscount;
                dst.outeriterationscount = outeriterationscount;
                dst.nfev = nfev;
                dst.terminationtype = terminationtype;
                return dst;
            }
        }

    public static mcpdstate mcpdcreate(int n, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdcreate(error_msg, n, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdcreate");
        return new mcpdstate(lcl_s.val);
    }
    public static mcpdstate mcpdcreate(int n) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdcreate(error_msg, n, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdcreate");
        return new mcpdstate(lcl_s.val);
    }
    private static native int _jni_mcpdcreate(mut_string error_msg, int n, mut_long s, long _xparams);

    public static mcpdstate mcpdcreateentry(int n, int entrystate, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdcreateentry(error_msg, n, entrystate, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdcreateentry");
        return new mcpdstate(lcl_s.val);
    }
    public static mcpdstate mcpdcreateentry(int n, int entrystate) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdcreateentry(error_msg, n, entrystate, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdcreateentry");
        return new mcpdstate(lcl_s.val);
    }
    private static native int _jni_mcpdcreateentry(mut_string error_msg, int n, int entrystate, mut_long s, long _xparams);

    public static mcpdstate mcpdcreateexit(int n, int exitstate, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdcreateexit(error_msg, n, exitstate, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdcreateexit");
        return new mcpdstate(lcl_s.val);
    }
    public static mcpdstate mcpdcreateexit(int n, int exitstate) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdcreateexit(error_msg, n, exitstate, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdcreateexit");
        return new mcpdstate(lcl_s.val);
    }
    private static native int _jni_mcpdcreateexit(mut_string error_msg, int n, int exitstate, mut_long s, long _xparams);

    public static mcpdstate mcpdcreateentryexit(int n, int entrystate, int exitstate, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdcreateentryexit(error_msg, n, entrystate, exitstate, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdcreateentryexit");
        return new mcpdstate(lcl_s.val);
    }
    public static mcpdstate mcpdcreateentryexit(int n, int entrystate, int exitstate) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdcreateentryexit(error_msg, n, entrystate, exitstate, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdcreateentryexit");
        return new mcpdstate(lcl_s.val);
    }
    private static native int _jni_mcpdcreateentryexit(mut_string error_msg, int n, int entrystate, int exitstate, mut_long s, long _xparams);

    public static void mcpdaddtrack(mcpdstate s, double[][] xy, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddtrack() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddtrack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdaddtrack(error_msg, s.get_ptr(), xy, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdaddtrack");
    }
    public static void mcpdaddtrack(mcpdstate s, double[][] xy, int k) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddtrack() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddtrack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdaddtrack(error_msg, s.get_ptr(), xy, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdaddtrack");
    }
            
    public static void mcpdaddtrack(mcpdstate s, double[][] xy, alglib.xparams _params) throws alglib.exception
    {
        int k;
    
        k = ap.rows(xy);
        mcpdaddtrack(s, xy, k, _params);
    
    }
    
    public static void mcpdaddtrack(mcpdstate s, double[][] xy) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
    
        k = ap.rows(xy);
        mcpdaddtrack(s, xy, k, _params);
    
    }
    private static native int _jni_mcpdaddtrack(mut_string error_msg, long s, double[][] xy, int k, long _xparams);

    public static void mcpdsetec(mcpdstate s, double[][] ec, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetec() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetec() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetec(error_msg, s.get_ptr(), ec, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetec");
    }
    public static void mcpdsetec(mcpdstate s, double[][] ec) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetec() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetec() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetec(error_msg, s.get_ptr(), ec, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetec");
    }
    private static native int _jni_mcpdsetec(mut_string error_msg, long s, double[][] ec, long _xparams);

    public static void mcpdaddec(mcpdstate s, int i, int j, double c, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddec() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddec() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdaddec(error_msg, s.get_ptr(), i, j, c, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdaddec");
    }
    public static void mcpdaddec(mcpdstate s, int i, int j, double c) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddec() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddec() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdaddec(error_msg, s.get_ptr(), i, j, c, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdaddec");
    }
    private static native int _jni_mcpdaddec(mut_string error_msg, long s, int i, int j, double c, long _xparams);

    public static void mcpdsetbc(mcpdstate s, double[][] bndl, double[][] bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetbc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetbc(error_msg, s.get_ptr(), bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetbc");
    }
    public static void mcpdsetbc(mcpdstate s, double[][] bndl, double[][] bndu) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetbc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetbc(error_msg, s.get_ptr(), bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetbc");
    }
    private static native int _jni_mcpdsetbc(mut_string error_msg, long s, double[][] bndl, double[][] bndu, long _xparams);

    public static void mcpdaddbc(mcpdstate s, int i, int j, double bndl, double bndu, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddbc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdaddbc(error_msg, s.get_ptr(), i, j, bndl, bndu, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdaddbc");
    }
    public static void mcpdaddbc(mcpdstate s, int i, int j, double bndl, double bndu) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddbc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdaddbc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdaddbc(error_msg, s.get_ptr(), i, j, bndl, bndu, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdaddbc");
    }
    private static native int _jni_mcpdaddbc(mut_string error_msg, long s, int i, int j, double bndl, double bndu, long _xparams);

    public static void mcpdsetlc(mcpdstate s, double[][] c, int[] ct, int k, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetlc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetlc(error_msg, s.get_ptr(), c, ct, k, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetlc");
    }
    public static void mcpdsetlc(mcpdstate s, double[][] c, int[] ct, int k) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetlc() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetlc() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetlc(error_msg, s.get_ptr(), c, ct, k, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetlc");
    }
            
    public static void mcpdsetlc(mcpdstate s, double[][] c, int[] ct, alglib.xparams _params) throws alglib.exception
    {
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling mcpdsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        mcpdsetlc(s, c, ct, k, _params);
    
    }
    
    public static void mcpdsetlc(mcpdstate s, double[][] c, int[] ct) throws alglib.exception
    {
        alglib.xparams _params = null;
        int k;
        if( (ap.rows(c)!=ct.length))
            throw new exception("Error while calling mcpdsetlc(): looks like one of arguments has wrong size");
        k = ap.rows(c);
        mcpdsetlc(s, c, ct, k, _params);
    
    }
    private static native int _jni_mcpdsetlc(mut_string error_msg, long s, double[][] c, int[] ct, int k, long _xparams);

    public static void mcpdsettikhonovregularizer(mcpdstate s, double v, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsettikhonovregularizer() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsettikhonovregularizer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsettikhonovregularizer(error_msg, s.get_ptr(), v, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsettikhonovregularizer");
    }
    public static void mcpdsettikhonovregularizer(mcpdstate s, double v) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsettikhonovregularizer() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsettikhonovregularizer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsettikhonovregularizer(error_msg, s.get_ptr(), v, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsettikhonovregularizer");
    }
    private static native int _jni_mcpdsettikhonovregularizer(mut_string error_msg, long s, double v, long _xparams);

    public static void mcpdsetprior(mcpdstate s, double[][] pp, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetprior() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetprior() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetprior(error_msg, s.get_ptr(), pp, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetprior");
    }
    public static void mcpdsetprior(mcpdstate s, double[][] pp) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetprior() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetprior() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetprior(error_msg, s.get_ptr(), pp, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetprior");
    }
    private static native int _jni_mcpdsetprior(mut_string error_msg, long s, double[][] pp, long _xparams);

    public static void mcpdsetpredictionweights(mcpdstate s, double[] pw, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetpredictionweights() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetpredictionweights() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetpredictionweights(error_msg, s.get_ptr(), pw, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetpredictionweights");
    }
    public static void mcpdsetpredictionweights(mcpdstate s, double[] pw) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetpredictionweights() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsetpredictionweights() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsetpredictionweights(error_msg, s.get_ptr(), pw, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsetpredictionweights");
    }
    private static native int _jni_mcpdsetpredictionweights(mut_string error_msg, long s, double[] pw, long _xparams);

    public static void mcpdsolve(mcpdstate s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsolve() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsolve(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsolve");
    }
    public static void mcpdsolve(mcpdstate s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsolve() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdsolve() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdsolve(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdsolve");
    }
    private static native int _jni_mcpdsolve(mut_string error_msg, long s, long _xparams);

    public static class mcpdresults_results
    {
        public double[][] p;
        public mcpdreport rep;
    }
    public static mcpdresults_results mcpdresults(mcpdstate s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_p = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdresults() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdresults(error_msg, s.get_ptr(), lcl_p, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdresults");
        mcpdresults_results ret_tuple = new mcpdresults_results();
        ret_tuple.p = lcl_p.val;
        ret_tuple.rep = (mcpdreport)lcl_rep.val;
        return ret_tuple;
    }
    public static mcpdresults_results mcpdresults(mcpdstate s) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_p = new rlc_double2d();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdresults() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mcpdresults() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mcpdresults(error_msg, s.get_ptr(), lcl_p, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mcpdresults");
        mcpdresults_results ret_tuple = new mcpdresults_results();
        ret_tuple.p = lcl_p.val;
        ret_tuple.rep = (mcpdreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_mcpdresults(mut_string error_msg, long s, rlc_double2d p, mut_object rep, long _xparams);

    
    
    //
    // Subpackage logit
    //
    

    public static class logitmodel extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected logitmodel()
        {
            _ptr = 0;
            own  = false;
        }
        protected logitmodel(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected logitmodel(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new logitmodel(0);
            return new logitmodel(_jni_x_obj_copy_logitmodel(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_logitmodel(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_logitmodel(long x);
    private static native void _jni_x_obj_free_logitmodel(long x);


        public static class mnlreport extends alglibobject
        {
            public int ngrad;
            public int nhess;
            public alglibobject make_copy()
            {
                mnlreport dst = new mnlreport();
                dst.ngrad = ngrad;
                dst.nhess = nhess;
                return dst;
            }
        }

    public static class mnltrainh_results
    {
        public int info;
        public logitmodel lm;
        public mnlreport rep;
    }
    public static mnltrainh_results mnltrainh(double[][] xy, int npoints, int nvars, int nclasses, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnltrainh(error_msg, xy, npoints, nvars, nclasses, lcl_info, lcl_lm, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnltrainh");
        mnltrainh_results ret_tuple = new mnltrainh_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.lm = new logitmodel(lcl_lm.val);
        ret_tuple.rep = (mnlreport)lcl_rep.val;
        return ret_tuple;
    }
    public static mnltrainh_results mnltrainh(double[][] xy, int npoints, int nvars, int nclasses) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_long lcl_lm = new mut_long();
        mut_object lcl_rep = new mut_object();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnltrainh(error_msg, xy, npoints, nvars, nclasses, lcl_info, lcl_lm, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnltrainh");
        mnltrainh_results ret_tuple = new mnltrainh_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.lm = new logitmodel(lcl_lm.val);
        ret_tuple.rep = (mnlreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_mnltrainh(mut_string error_msg, double[][] xy, int npoints, int nvars, int nclasses, mut_int info, mut_long lm, mut_object rep, long _xparams);

    public static double[] mnlprocess(logitmodel lm, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlprocess() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlprocess(error_msg, lm.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlprocess");
        return lcl_y.val;
    }
    public static double[] mnlprocess(logitmodel lm, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlprocess() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlprocess(error_msg, lm.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlprocess");
        return lcl_y.val;
    }
    private static native int _jni_mnlprocess(mut_string error_msg, long lm, double[] x, rlc_double1d y, long _xparams);

    public static double[] mnlprocessi(logitmodel lm, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlprocessi() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlprocessi(error_msg, lm.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlprocessi");
        return lcl_y.val;
    }
    public static double[] mnlprocessi(logitmodel lm, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlprocessi() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlprocessi(error_msg, lm.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlprocessi");
        return lcl_y.val;
    }
    private static native int _jni_mnlprocessi(mut_string error_msg, long lm, double[] x, rlc_double1d y, long _xparams);

    public static class mnlunpack_results
    {
        public double[][] a;
        public int nvars;
        public int nclasses;
    }
    public static mnlunpack_results mnlunpack(logitmodel lm, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_int lcl_nvars = new mut_int();
        mut_int lcl_nclasses = new mut_int();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlunpack() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlunpack(error_msg, lm.get_ptr(), lcl_a, lcl_nvars, lcl_nclasses, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlunpack");
        mnlunpack_results ret_tuple = new mnlunpack_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.nvars = lcl_nvars.val;
        ret_tuple.nclasses = lcl_nclasses.val;
        return ret_tuple;
    }
    public static mnlunpack_results mnlunpack(logitmodel lm) throws alglib.exception
    {
        activatealglibcore();
        rlc_double2d lcl_a = new rlc_double2d();
        mut_int lcl_nvars = new mut_int();
        mut_int lcl_nclasses = new mut_int();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlunpack() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlunpack() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlunpack(error_msg, lm.get_ptr(), lcl_a, lcl_nvars, lcl_nclasses, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlunpack");
        mnlunpack_results ret_tuple = new mnlunpack_results();
        ret_tuple.a = lcl_a.val;
        ret_tuple.nvars = lcl_nvars.val;
        ret_tuple.nclasses = lcl_nclasses.val;
        return ret_tuple;
    }
    private static native int _jni_mnlunpack(mut_string error_msg, long lm, rlc_double2d a, mut_int nvars, mut_int nclasses, long _xparams);

    public static logitmodel mnlpack(double[][] a, int nvars, int nclasses, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlpack(error_msg, a, nvars, nclasses, lcl_lm, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlpack");
        return new logitmodel(lcl_lm.val);
    }
    public static logitmodel mnlpack(double[][] a, int nvars, int nclasses) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_lm = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlpack(error_msg, a, nvars, nclasses, lcl_lm, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlpack");
        return new logitmodel(lcl_lm.val);
    }
    private static native int _jni_mnlpack(mut_string error_msg, double[][] a, int nvars, int nclasses, mut_long lm, long _xparams);

    public static double mnlavgce(logitmodel lm, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgce() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlavgce(error_msg, lcl_result, lm.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlavgce");
        return lcl_result.val;
    }
    public static double mnlavgce(logitmodel lm, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgce() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlavgce(error_msg, lcl_result, lm.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlavgce");
        return lcl_result.val;
    }
    private static native int _jni_mnlavgce(mut_string error_msg, mut_double result, long lm, double[][] xy, int npoints, long _xparams);

    public static double mnlrelclserror(logitmodel lm, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlrelclserror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlrelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlrelclserror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlrelclserror");
        return lcl_result.val;
    }
    public static double mnlrelclserror(logitmodel lm, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlrelclserror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlrelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlrelclserror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlrelclserror");
        return lcl_result.val;
    }
    private static native int _jni_mnlrelclserror(mut_string error_msg, mut_double result, long lm, double[][] xy, int npoints, long _xparams);

    public static double mnlrmserror(logitmodel lm, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlrmserror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlrmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlrmserror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlrmserror");
        return lcl_result.val;
    }
    public static double mnlrmserror(logitmodel lm, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlrmserror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlrmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlrmserror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlrmserror");
        return lcl_result.val;
    }
    private static native int _jni_mnlrmserror(mut_string error_msg, mut_double result, long lm, double[][] xy, int npoints, long _xparams);

    public static double mnlavgerror(logitmodel lm, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgerror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlavgerror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlavgerror");
        return lcl_result.val;
    }
    public static double mnlavgerror(logitmodel lm, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgerror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlavgerror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlavgerror");
        return lcl_result.val;
    }
    private static native int _jni_mnlavgerror(mut_string error_msg, mut_double result, long lm, double[][] xy, int npoints, long _xparams);

    public static double mnlavgrelerror(logitmodel lm, double[][] xy, int ssize, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgrelerror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlavgrelerror(error_msg, lcl_result, lm.get_ptr(), xy, ssize, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlavgrelerror");
        return lcl_result.val;
    }
    public static double mnlavgrelerror(logitmodel lm, double[][] xy, int ssize) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgrelerror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlavgrelerror(error_msg, lcl_result, lm.get_ptr(), xy, ssize, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlavgrelerror");
        return lcl_result.val;
    }
    private static native int _jni_mnlavgrelerror(mut_string error_msg, mut_double result, long lm, double[][] xy, int ssize, long _xparams);

    public static int mnlclserror(logitmodel lm, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlclserror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlclserror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlclserror");
        return lcl_result.val;
    }
    public static int mnlclserror(logitmodel lm, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( lm==null )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlclserror() is null");
        if( lm.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'lm' of mnlclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mnlclserror(error_msg, lcl_result, lm.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mnlclserror");
        return lcl_result.val;
    }
    private static native int _jni_mnlclserror(mut_string error_msg, mut_int result, long lm, double[][] xy, int npoints, long _xparams);

    
    
    //
    // Subpackage knn
    //
    

    public static class knnbuffer extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected knnbuffer()
        {
            _ptr = 0;
            own  = false;
        }
        protected knnbuffer(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected knnbuffer(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new knnbuffer(0);
            return new knnbuffer(_jni_x_obj_copy_knnbuffer(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_knnbuffer(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_knnbuffer(long x);
    private static native void _jni_x_obj_free_knnbuffer(long x);


    public static class knnbuilder extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected knnbuilder()
        {
            _ptr = 0;
            own  = false;
        }
        protected knnbuilder(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected knnbuilder(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new knnbuilder(0);
            return new knnbuilder(_jni_x_obj_copy_knnbuilder(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_knnbuilder(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_knnbuilder(long x);
    private static native void _jni_x_obj_free_knnbuilder(long x);


    public static class knnmodel extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected knnmodel()
        {
            _ptr = 0;
            own  = false;
        }
        protected knnmodel(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected knnmodel(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new knnmodel(0);
            return new knnmodel(_jni_x_obj_copy_knnmodel(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_knnmodel(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_knnmodel(long x);
    private static native void _jni_x_obj_free_knnmodel(long x);


        public static class knnreport extends alglibobject
        {
            public double relclserror;
            public double avgce;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public alglibobject make_copy()
            {
                knnreport dst = new knnreport();
                dst.relclserror = relclserror;
                dst.avgce = avgce;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                return dst;
            }
        }

    private static native int _jni_knnserialize(mut_string error_msg, long obj, mut_string lcl_result);
    
    public static String knnserialize(knnmodel obj) throws alglib.exception
    {
        activatealglibcore();
        if( obj==null )
            throw new alglib.exception("ALGLIB: parameter 'obj' of knnserialize() is null");
        if( obj.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'obj' of knnserialize() points to deallocated ALGLIB object");
        mut_string lcl_result = new mut_string();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_knnserialize(error_msg, obj.get_ptr(), lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnserialize");
        return lcl_result.val;
    }
    
    private static native int _jni_knnunserialize(mut_string error_msg, String s, mut_long lcl_result);
    
    public static knnmodel knnunserialize(String s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnunserialize() is null");
        mut_long   lcl_result = new mut_long();
        mut_string error_msg  = new mut_string();
        int completion_code = _jni_knnunserialize(error_msg, s, lcl_result);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnunserialize");
        return new knnmodel(lcl_result.val);
    }

    public static knnbuffer knncreatebuffer(knnmodel model, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knncreatebuffer() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knncreatebuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knncreatebuffer(error_msg, model.get_ptr(), lcl_buf, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knncreatebuffer");
        return new knnbuffer(lcl_buf.val);
    }
    public static knnbuffer knncreatebuffer(knnmodel model) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_buf = new mut_long();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knncreatebuffer() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knncreatebuffer() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knncreatebuffer(error_msg, model.get_ptr(), lcl_buf, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knncreatebuffer");
        return new knnbuffer(lcl_buf.val);
    }
    private static native int _jni_knncreatebuffer(mut_string error_msg, long model, mut_long buf, long _xparams);

    public static knnbuilder knnbuildercreate(alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuildercreate(error_msg, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuildercreate");
        return new knnbuilder(lcl_s.val);
    }
    public static knnbuilder knnbuildercreate() throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuildercreate(error_msg, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuildercreate");
        return new knnbuilder(lcl_s.val);
    }
    private static native int _jni_knnbuildercreate(mut_string error_msg, mut_long s, long _xparams);

    public static void knnbuildersetdatasetreg(knnbuilder s, double[][] xy, int npoints, int nvars, int nout, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetdatasetreg() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetdatasetreg() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuildersetdatasetreg(error_msg, s.get_ptr(), xy, npoints, nvars, nout, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuildersetdatasetreg");
    }
    public static void knnbuildersetdatasetreg(knnbuilder s, double[][] xy, int npoints, int nvars, int nout) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetdatasetreg() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetdatasetreg() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuildersetdatasetreg(error_msg, s.get_ptr(), xy, npoints, nvars, nout, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuildersetdatasetreg");
    }
    private static native int _jni_knnbuildersetdatasetreg(mut_string error_msg, long s, double[][] xy, int npoints, int nvars, int nout, long _xparams);

    public static void knnbuildersetdatasetcls(knnbuilder s, double[][] xy, int npoints, int nvars, int nclasses, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetdatasetcls() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetdatasetcls() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuildersetdatasetcls(error_msg, s.get_ptr(), xy, npoints, nvars, nclasses, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuildersetdatasetcls");
    }
    public static void knnbuildersetdatasetcls(knnbuilder s, double[][] xy, int npoints, int nvars, int nclasses) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetdatasetcls() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetdatasetcls() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuildersetdatasetcls(error_msg, s.get_ptr(), xy, npoints, nvars, nclasses, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuildersetdatasetcls");
    }
    private static native int _jni_knnbuildersetdatasetcls(mut_string error_msg, long s, double[][] xy, int npoints, int nvars, int nclasses, long _xparams);

    public static void knnbuildersetnorm(knnbuilder s, int nrmtype, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetnorm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetnorm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuildersetnorm(error_msg, s.get_ptr(), nrmtype, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuildersetnorm");
    }
    public static void knnbuildersetnorm(knnbuilder s, int nrmtype) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetnorm() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuildersetnorm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuildersetnorm(error_msg, s.get_ptr(), nrmtype, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuildersetnorm");
    }
    private static native int _jni_knnbuildersetnorm(mut_string error_msg, long s, int nrmtype, long _xparams);

    public static class knnbuilderbuildknnmodel_results
    {
        public knnmodel model;
        public knnreport rep;
    }
    public static knnbuilderbuildknnmodel_results knnbuilderbuildknnmodel(knnbuilder s, int k, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_model = new mut_long();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuilderbuildknnmodel() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuilderbuildknnmodel() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuilderbuildknnmodel(error_msg, s.get_ptr(), k, eps, lcl_model, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuilderbuildknnmodel");
        knnbuilderbuildknnmodel_results ret_tuple = new knnbuilderbuildknnmodel_results();
        ret_tuple.model = new knnmodel(lcl_model.val);
        ret_tuple.rep = (knnreport)lcl_rep.val;
        return ret_tuple;
    }
    public static knnbuilderbuildknnmodel_results knnbuilderbuildknnmodel(knnbuilder s, int k, double eps) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_model = new mut_long();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuilderbuildknnmodel() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of knnbuilderbuildknnmodel() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnbuilderbuildknnmodel(error_msg, s.get_ptr(), k, eps, lcl_model, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnbuilderbuildknnmodel");
        knnbuilderbuildknnmodel_results ret_tuple = new knnbuilderbuildknnmodel_results();
        ret_tuple.model = new knnmodel(lcl_model.val);
        ret_tuple.rep = (knnreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_knnbuilderbuildknnmodel(mut_string error_msg, long s, int k, double eps, mut_long model, mut_object rep, long _xparams);

    public static void knnrewritekeps(knnmodel model, int k, double eps, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrewritekeps() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrewritekeps() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnrewritekeps(error_msg, model.get_ptr(), k, eps, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnrewritekeps");
    }
    public static void knnrewritekeps(knnmodel model, int k, double eps) throws alglib.exception
    {
        activatealglibcore();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrewritekeps() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrewritekeps() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnrewritekeps(error_msg, model.get_ptr(), k, eps, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnrewritekeps");
    }
    private static native int _jni_knnrewritekeps(mut_string error_msg, long model, int k, double eps, long _xparams);

    public static double[] knnprocess(knnmodel model, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocess() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnprocess(error_msg, model.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnprocess");
        return lcl_y.val;
    }
    public static double[] knnprocess(knnmodel model, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocess() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnprocess(error_msg, model.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnprocess");
        return lcl_y.val;
    }
    private static native int _jni_knnprocess(mut_string error_msg, long model, double[] x, rlc_double1d y, long _xparams);

    public static double knnprocess0(knnmodel model, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocess0() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocess0() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnprocess0(error_msg, lcl_result, model.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnprocess0");
        return lcl_result.val;
    }
    public static double knnprocess0(knnmodel model, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocess0() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocess0() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnprocess0(error_msg, lcl_result, model.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnprocess0");
        return lcl_result.val;
    }
    private static native int _jni_knnprocess0(mut_string error_msg, mut_double result, long model, double[] x, long _xparams);

    public static int knnclassify(knnmodel model, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnclassify() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnclassify() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnclassify(error_msg, lcl_result, model.get_ptr(), x, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnclassify");
        return lcl_result.val;
    }
    public static int knnclassify(knnmodel model, double[] x) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_result = new mut_int();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnclassify() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnclassify() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnclassify(error_msg, lcl_result, model.get_ptr(), x, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnclassify");
        return lcl_result.val;
    }
    private static native int _jni_knnclassify(mut_string error_msg, mut_int result, long model, double[] x, long _xparams);

    public static double[] knnprocessi(knnmodel model, double[] x, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocessi() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnprocessi(error_msg, model.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnprocessi");
        return lcl_y.val;
    }
    public static double[] knnprocessi(knnmodel model, double[] x) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocessi() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnprocessi() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnprocessi(error_msg, model.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnprocessi");
        return lcl_y.val;
    }
    private static native int _jni_knnprocessi(mut_string error_msg, long model, double[] x, rlc_double1d y, long _xparams);

    public static double[] knntsprocess(knnmodel model, knnbuffer buf, double[] x, double[] y, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knntsprocess() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knntsprocess() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of knntsprocess() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of knntsprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knntsprocess(error_msg, model.get_ptr(), buf.get_ptr(), x, lcl_y, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knntsprocess");
        return lcl_y.val;
    }
    public static double[] knntsprocess(knnmodel model, knnbuffer buf, double[] x, double[] y) throws alglib.exception
    {
        activatealglibcore();
        rlc_double1d lcl_y = new rlc_double1d(y);
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knntsprocess() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knntsprocess() points to deallocated ALGLIB object");
        if( buf==null )
            throw new alglib.exception("ALGLIB: parameter 'buf' of knntsprocess() is null");
        if( buf.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'buf' of knntsprocess() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knntsprocess(error_msg, model.get_ptr(), buf.get_ptr(), x, lcl_y, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knntsprocess");
        return lcl_y.val;
    }
    private static native int _jni_knntsprocess(mut_string error_msg, long model, long buf, double[] x, rlc_double1d y, long _xparams);

    public static double knnrelclserror(knnmodel model, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrelclserror() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnrelclserror(error_msg, lcl_result, model.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnrelclserror");
        return lcl_result.val;
    }
    public static double knnrelclserror(knnmodel model, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrelclserror() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrelclserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnrelclserror(error_msg, lcl_result, model.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnrelclserror");
        return lcl_result.val;
    }
    private static native int _jni_knnrelclserror(mut_string error_msg, mut_double result, long model, double[][] xy, int npoints, long _xparams);

    public static double knnavgce(knnmodel model, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgce() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnavgce(error_msg, lcl_result, model.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnavgce");
        return lcl_result.val;
    }
    public static double knnavgce(knnmodel model, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgce() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgce() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnavgce(error_msg, lcl_result, model.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnavgce");
        return lcl_result.val;
    }
    private static native int _jni_knnavgce(mut_string error_msg, mut_double result, long model, double[][] xy, int npoints, long _xparams);

    public static double knnrmserror(knnmodel model, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrmserror() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnrmserror(error_msg, lcl_result, model.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnrmserror");
        return lcl_result.val;
    }
    public static double knnrmserror(knnmodel model, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrmserror() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnrmserror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnrmserror(error_msg, lcl_result, model.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnrmserror");
        return lcl_result.val;
    }
    private static native int _jni_knnrmserror(mut_string error_msg, mut_double result, long model, double[][] xy, int npoints, long _xparams);

    public static double knnavgerror(knnmodel model, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgerror() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnavgerror(error_msg, lcl_result, model.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnavgerror");
        return lcl_result.val;
    }
    public static double knnavgerror(knnmodel model, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgerror() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnavgerror(error_msg, lcl_result, model.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnavgerror");
        return lcl_result.val;
    }
    private static native int _jni_knnavgerror(mut_string error_msg, mut_double result, long model, double[][] xy, int npoints, long _xparams);

    public static double knnavgrelerror(knnmodel model, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgrelerror() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnavgrelerror(error_msg, lcl_result, model.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnavgrelerror");
        return lcl_result.val;
    }
    public static double knnavgrelerror(knnmodel model, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_double lcl_result = new mut_double();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgrelerror() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnavgrelerror() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnavgrelerror(error_msg, lcl_result, model.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnavgrelerror");
        return lcl_result.val;
    }
    private static native int _jni_knnavgrelerror(mut_string error_msg, mut_double result, long model, double[][] xy, int npoints, long _xparams);

    public static knnreport knnallerrors(knnmodel model, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnallerrors() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnallerrors() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnallerrors(error_msg, model.get_ptr(), xy, npoints, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnallerrors");
        return (knnreport)lcl_rep.val;
    }
    public static knnreport knnallerrors(knnmodel model, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( model==null )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnallerrors() is null");
        if( model.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'model' of knnallerrors() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_knnallerrors(error_msg, model.get_ptr(), xy, npoints, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "knnallerrors");
        return (knnreport)lcl_rep.val;
    }
    private static native int _jni_knnallerrors(mut_string error_msg, long model, double[][] xy, int npoints, mut_object rep, long _xparams);

    
    
    //
    // Subpackage mlptrain
    //
    

        public static class mlpreport extends alglibobject
        {
            public double relclserror;
            public double avgce;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public int ngrad;
            public int nhess;
            public int ncholesky;
            public alglibobject make_copy()
            {
                mlpreport dst = new mlpreport();
                dst.relclserror = relclserror;
                dst.avgce = avgce;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                dst.ngrad = ngrad;
                dst.nhess = nhess;
                dst.ncholesky = ncholesky;
                return dst;
            }
        }


        public static class mlpcvreport extends alglibobject
        {
            public double relclserror;
            public double avgce;
            public double rmserror;
            public double avgerror;
            public double avgrelerror;
            public alglibobject make_copy()
            {
                mlpcvreport dst = new mlpcvreport();
                dst.relclserror = relclserror;
                dst.avgce = avgce;
                dst.rmserror = rmserror;
                dst.avgerror = avgerror;
                dst.avgrelerror = avgrelerror;
                return dst;
            }
        }


    public static class mlptrainer extends alglibobject
    {
        private long _ptr;
        private boolean own;
        protected mlptrainer()
        {
            _ptr = 0;
            own  = false;
        }
        protected mlptrainer(long x)
        {
            _ptr = x;
            own  = true;
        }
        protected mlptrainer(long x, boolean _own)
        {
            _ptr = x;
            own  = _own;
        }
        protected long get_ptr() { return _ptr; }
        public void finalize()
        {
            deallocate();
        }
        public alglib.alglibobject make_copy()
        {
            if( _ptr==0 )
                return new mlptrainer(0);
            return new mlptrainer(_jni_x_obj_copy_mlptrainer(_ptr));
        }
        public void deallocate()
        {
            if( _ptr!=0 && own)
                _jni_x_obj_free_mlptrainer(_ptr);
            _ptr = 0;
        }
    }
    private static native long _jni_x_obj_copy_mlptrainer(long x);
    private static native void _jni_x_obj_free_mlptrainer(long x);

    public static class mlptrainlm_results
    {
        public int info;
        public mlpreport rep;
    }
    public static mlptrainlm_results mlptrainlm(multilayerperceptron network, double[][] xy, int npoints, double decay, int restarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainlm() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainlm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptrainlm(error_msg, network.get_ptr(), xy, npoints, decay, restarts, lcl_info, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptrainlm");
        mlptrainlm_results ret_tuple = new mlptrainlm_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        return ret_tuple;
    }
    public static mlptrainlm_results mlptrainlm(multilayerperceptron network, double[][] xy, int npoints, double decay, int restarts) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainlm() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainlm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptrainlm(error_msg, network.get_ptr(), xy, npoints, decay, restarts, lcl_info, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptrainlm");
        mlptrainlm_results ret_tuple = new mlptrainlm_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_mlptrainlm(mut_string error_msg, long network, double[][] xy, int npoints, double decay, int restarts, mut_int info, mut_object rep, long _xparams);

    public static class mlptrainlbfgs_results
    {
        public int info;
        public mlpreport rep;
    }
    public static mlptrainlbfgs_results mlptrainlbfgs(multilayerperceptron network, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainlbfgs() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainlbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptrainlbfgs(error_msg, network.get_ptr(), xy, npoints, decay, restarts, wstep, maxits, lcl_info, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptrainlbfgs");
        mlptrainlbfgs_results ret_tuple = new mlptrainlbfgs_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        return ret_tuple;
    }
    public static mlptrainlbfgs_results mlptrainlbfgs(multilayerperceptron network, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainlbfgs() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainlbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptrainlbfgs(error_msg, network.get_ptr(), xy, npoints, decay, restarts, wstep, maxits, lcl_info, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptrainlbfgs");
        mlptrainlbfgs_results ret_tuple = new mlptrainlbfgs_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_mlptrainlbfgs(mut_string error_msg, long network, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits, mut_int info, mut_object rep, long _xparams);

    public static class mlptraines_results
    {
        public int info;
        public mlpreport rep;
    }
    public static mlptraines_results mlptraines(multilayerperceptron network, double[][] trnxy, int trnsize, double[][] valxy, int valsize, double decay, int restarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptraines() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptraines() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptraines(error_msg, network.get_ptr(), trnxy, trnsize, valxy, valsize, decay, restarts, lcl_info, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptraines");
        mlptraines_results ret_tuple = new mlptraines_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        return ret_tuple;
    }
    public static mlptraines_results mlptraines(multilayerperceptron network, double[][] trnxy, int trnsize, double[][] valxy, int valsize, double decay, int restarts) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptraines() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptraines() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptraines(error_msg, network.get_ptr(), trnxy, trnsize, valxy, valsize, decay, restarts, lcl_info, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptraines");
        mlptraines_results ret_tuple = new mlptraines_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_mlptraines(mut_string error_msg, long network, double[][] trnxy, int trnsize, double[][] valxy, int valsize, double decay, int restarts, mut_int info, mut_object rep, long _xparams);

    public static class mlpkfoldcvlbfgs_results
    {
        public int info;
        public mlpreport rep;
        public mlpcvreport cvrep;
    }
    public static mlpkfoldcvlbfgs_results mlpkfoldcvlbfgs(multilayerperceptron network, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits, int foldscount, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        mut_object lcl_cvrep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcvlbfgs() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcvlbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpkfoldcvlbfgs(error_msg, network.get_ptr(), xy, npoints, decay, restarts, wstep, maxits, foldscount, lcl_info, lcl_rep, lcl_cvrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpkfoldcvlbfgs");
        mlpkfoldcvlbfgs_results ret_tuple = new mlpkfoldcvlbfgs_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        ret_tuple.cvrep = (mlpcvreport)lcl_cvrep.val;
        return ret_tuple;
    }
    public static mlpkfoldcvlbfgs_results mlpkfoldcvlbfgs(multilayerperceptron network, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits, int foldscount) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        mut_object lcl_cvrep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcvlbfgs() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcvlbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpkfoldcvlbfgs(error_msg, network.get_ptr(), xy, npoints, decay, restarts, wstep, maxits, foldscount, lcl_info, lcl_rep, lcl_cvrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpkfoldcvlbfgs");
        mlpkfoldcvlbfgs_results ret_tuple = new mlpkfoldcvlbfgs_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        ret_tuple.cvrep = (mlpcvreport)lcl_cvrep.val;
        return ret_tuple;
    }
    private static native int _jni_mlpkfoldcvlbfgs(mut_string error_msg, long network, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits, int foldscount, mut_int info, mut_object rep, mut_object cvrep, long _xparams);

    public static class mlpkfoldcvlm_results
    {
        public int info;
        public mlpreport rep;
        public mlpcvreport cvrep;
    }
    public static mlpkfoldcvlm_results mlpkfoldcvlm(multilayerperceptron network, double[][] xy, int npoints, double decay, int restarts, int foldscount, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        mut_object lcl_cvrep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcvlm() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcvlm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpkfoldcvlm(error_msg, network.get_ptr(), xy, npoints, decay, restarts, foldscount, lcl_info, lcl_rep, lcl_cvrep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpkfoldcvlm");
        mlpkfoldcvlm_results ret_tuple = new mlpkfoldcvlm_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        ret_tuple.cvrep = (mlpcvreport)lcl_cvrep.val;
        return ret_tuple;
    }
    public static mlpkfoldcvlm_results mlpkfoldcvlm(multilayerperceptron network, double[][] xy, int npoints, double decay, int restarts, int foldscount) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        mut_object lcl_cvrep = new mut_object();
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcvlm() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcvlm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpkfoldcvlm(error_msg, network.get_ptr(), xy, npoints, decay, restarts, foldscount, lcl_info, lcl_rep, lcl_cvrep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpkfoldcvlm");
        mlpkfoldcvlm_results ret_tuple = new mlpkfoldcvlm_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        ret_tuple.cvrep = (mlpcvreport)lcl_cvrep.val;
        return ret_tuple;
    }
    private static native int _jni_mlpkfoldcvlm(mut_string error_msg, long network, double[][] xy, int npoints, double decay, int restarts, int foldscount, mut_int info, mut_object rep, mut_object cvrep, long _xparams);

    public static mlpreport mlpkfoldcv(mlptrainer s, multilayerperceptron network, int nrestarts, int foldscount, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpkfoldcv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpkfoldcv() points to deallocated ALGLIB object");
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcv() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpkfoldcv(error_msg, s.get_ptr(), network.get_ptr(), nrestarts, foldscount, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpkfoldcv");
        return (mlpreport)lcl_rep.val;
    }
    public static mlpreport mlpkfoldcv(mlptrainer s, multilayerperceptron network, int nrestarts, int foldscount) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpkfoldcv() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpkfoldcv() points to deallocated ALGLIB object");
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcv() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpkfoldcv() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpkfoldcv(error_msg, s.get_ptr(), network.get_ptr(), nrestarts, foldscount, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpkfoldcv");
        return (mlpreport)lcl_rep.val;
    }
    private static native int _jni_mlpkfoldcv(mut_string error_msg, long s, long network, int nrestarts, int foldscount, mut_object rep, long _xparams);

    public static mlptrainer mlpcreatetrainer(int nin, int nout, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatetrainer(error_msg, nin, nout, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatetrainer");
        return new mlptrainer(lcl_s.val);
    }
    public static mlptrainer mlpcreatetrainer(int nin, int nout) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatetrainer(error_msg, nin, nout, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatetrainer");
        return new mlptrainer(lcl_s.val);
    }
    private static native int _jni_mlpcreatetrainer(mut_string error_msg, int nin, int nout, mut_long s, long _xparams);

    public static mlptrainer mlpcreatetrainercls(int nin, int nclasses, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatetrainercls(error_msg, nin, nclasses, lcl_s, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatetrainercls");
        return new mlptrainer(lcl_s.val);
    }
    public static mlptrainer mlpcreatetrainercls(int nin, int nclasses) throws alglib.exception
    {
        activatealglibcore();
        mut_long lcl_s = new mut_long();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcreatetrainercls(error_msg, nin, nclasses, lcl_s, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcreatetrainercls");
        return new mlptrainer(lcl_s.val);
    }
    private static native int _jni_mlpcreatetrainercls(mut_string error_msg, int nin, int nclasses, mut_long s, long _xparams);

    public static void mlpsetdataset(mlptrainer s, double[][] xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetdataset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetdataset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetdataset(error_msg, s.get_ptr(), xy, npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetdataset");
    }
    public static void mlpsetdataset(mlptrainer s, double[][] xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetdataset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetdataset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetdataset(error_msg, s.get_ptr(), xy, npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetdataset");
    }
    private static native int _jni_mlpsetdataset(mut_string error_msg, long s, double[][] xy, int npoints, long _xparams);

    public static void mlpsetsparsedataset(mlptrainer s, sparsematrix xy, int npoints, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetsparsedataset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetsparsedataset() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpsetsparsedataset() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpsetsparsedataset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetsparsedataset(error_msg, s.get_ptr(), xy.get_ptr(), npoints, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetsparsedataset");
    }
    public static void mlpsetsparsedataset(mlptrainer s, sparsematrix xy, int npoints) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetsparsedataset() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetsparsedataset() points to deallocated ALGLIB object");
        if( xy==null )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpsetsparsedataset() is null");
        if( xy.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'xy' of mlpsetsparsedataset() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetsparsedataset(error_msg, s.get_ptr(), xy.get_ptr(), npoints, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetsparsedataset");
    }
    private static native int _jni_mlpsetsparsedataset(mut_string error_msg, long s, long xy, int npoints, long _xparams);

    public static void mlpsetdecay(mlptrainer s, double decay, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetdecay() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetdecay() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetdecay(error_msg, s.get_ptr(), decay, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetdecay");
    }
    public static void mlpsetdecay(mlptrainer s, double decay) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetdecay() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetdecay() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetdecay(error_msg, s.get_ptr(), decay, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetdecay");
    }
    private static native int _jni_mlpsetdecay(mut_string error_msg, long s, double decay, long _xparams);

    public static void mlpsetcond(mlptrainer s, double wstep, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetcond() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetcond(error_msg, s.get_ptr(), wstep, maxits, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetcond");
    }
    public static void mlpsetcond(mlptrainer s, double wstep, int maxits) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetcond() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetcond() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetcond(error_msg, s.get_ptr(), wstep, maxits, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetcond");
    }
    private static native int _jni_mlpsetcond(mut_string error_msg, long s, double wstep, int maxits, long _xparams);

    public static void mlpsetalgobatch(mlptrainer s, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetalgobatch() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetalgobatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetalgobatch(error_msg, s.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetalgobatch");
    }
    public static void mlpsetalgobatch(mlptrainer s) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetalgobatch() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpsetalgobatch() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpsetalgobatch(error_msg, s.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpsetalgobatch");
    }
    private static native int _jni_mlpsetalgobatch(mut_string error_msg, long s, long _xparams);

    public static mlpreport mlptrainnetwork(mlptrainer s, multilayerperceptron network, int nrestarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlptrainnetwork() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlptrainnetwork() points to deallocated ALGLIB object");
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainnetwork() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainnetwork() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptrainnetwork(error_msg, s.get_ptr(), network.get_ptr(), nrestarts, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptrainnetwork");
        return (mlpreport)lcl_rep.val;
    }
    public static mlpreport mlptrainnetwork(mlptrainer s, multilayerperceptron network, int nrestarts) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlptrainnetwork() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlptrainnetwork() points to deallocated ALGLIB object");
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainnetwork() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlptrainnetwork() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptrainnetwork(error_msg, s.get_ptr(), network.get_ptr(), nrestarts, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptrainnetwork");
        return (mlpreport)lcl_rep.val;
    }
    private static native int _jni_mlptrainnetwork(mut_string error_msg, long s, long network, int nrestarts, mut_object rep, long _xparams);

    public static void mlpstarttraining(mlptrainer s, multilayerperceptron network, boolean randomstart, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpstarttraining() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpstarttraining() points to deallocated ALGLIB object");
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpstarttraining() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpstarttraining() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpstarttraining(error_msg, s.get_ptr(), network.get_ptr(), randomstart, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpstarttraining");
    }
    public static void mlpstarttraining(mlptrainer s, multilayerperceptron network, boolean randomstart) throws alglib.exception
    {
        activatealglibcore();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpstarttraining() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpstarttraining() points to deallocated ALGLIB object");
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpstarttraining() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpstarttraining() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpstarttraining(error_msg, s.get_ptr(), network.get_ptr(), randomstart, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpstarttraining");
    }
    private static native int _jni_mlpstarttraining(mut_string error_msg, long s, long network, boolean randomstart, long _xparams);

    public static boolean mlpcontinuetraining(mlptrainer s, multilayerperceptron network, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpcontinuetraining() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpcontinuetraining() points to deallocated ALGLIB object");
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpcontinuetraining() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpcontinuetraining() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcontinuetraining(error_msg, lcl_result, s.get_ptr(), network.get_ptr(), _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcontinuetraining");
        return lcl_result.val;
    }
    public static boolean mlpcontinuetraining(mlptrainer s, multilayerperceptron network) throws alglib.exception
    {
        activatealglibcore();
        mut_boolean lcl_result = new mut_boolean();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpcontinuetraining() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlpcontinuetraining() points to deallocated ALGLIB object");
        if( network==null )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpcontinuetraining() is null");
        if( network.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'network' of mlpcontinuetraining() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpcontinuetraining(error_msg, lcl_result, s.get_ptr(), network.get_ptr(), 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpcontinuetraining");
        return lcl_result.val;
    }
    private static native int _jni_mlpcontinuetraining(mut_string error_msg, mut_boolean result, long s, long network, long _xparams);

    public static class mlpebagginglm_results
    {
        public int info;
        public mlpreport rep;
        public mlpcvreport ooberrors;
    }
    public static mlpebagginglm_results mlpebagginglm(mlpensemble ensemble, double[][] xy, int npoints, double decay, int restarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        mut_object lcl_ooberrors = new mut_object();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpebagginglm() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpebagginglm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpebagginglm(error_msg, ensemble.get_ptr(), xy, npoints, decay, restarts, lcl_info, lcl_rep, lcl_ooberrors, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpebagginglm");
        mlpebagginglm_results ret_tuple = new mlpebagginglm_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        ret_tuple.ooberrors = (mlpcvreport)lcl_ooberrors.val;
        return ret_tuple;
    }
    public static mlpebagginglm_results mlpebagginglm(mlpensemble ensemble, double[][] xy, int npoints, double decay, int restarts) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        mut_object lcl_ooberrors = new mut_object();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpebagginglm() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpebagginglm() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpebagginglm(error_msg, ensemble.get_ptr(), xy, npoints, decay, restarts, lcl_info, lcl_rep, lcl_ooberrors, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpebagginglm");
        mlpebagginglm_results ret_tuple = new mlpebagginglm_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        ret_tuple.ooberrors = (mlpcvreport)lcl_ooberrors.val;
        return ret_tuple;
    }
    private static native int _jni_mlpebagginglm(mut_string error_msg, long ensemble, double[][] xy, int npoints, double decay, int restarts, mut_int info, mut_object rep, mut_object ooberrors, long _xparams);

    public static class mlpebagginglbfgs_results
    {
        public int info;
        public mlpreport rep;
        public mlpcvreport ooberrors;
    }
    public static mlpebagginglbfgs_results mlpebagginglbfgs(mlpensemble ensemble, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        mut_object lcl_ooberrors = new mut_object();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpebagginglbfgs() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpebagginglbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpebagginglbfgs(error_msg, ensemble.get_ptr(), xy, npoints, decay, restarts, wstep, maxits, lcl_info, lcl_rep, lcl_ooberrors, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpebagginglbfgs");
        mlpebagginglbfgs_results ret_tuple = new mlpebagginglbfgs_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        ret_tuple.ooberrors = (mlpcvreport)lcl_ooberrors.val;
        return ret_tuple;
    }
    public static mlpebagginglbfgs_results mlpebagginglbfgs(mlpensemble ensemble, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        mut_object lcl_ooberrors = new mut_object();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpebagginglbfgs() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpebagginglbfgs() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpebagginglbfgs(error_msg, ensemble.get_ptr(), xy, npoints, decay, restarts, wstep, maxits, lcl_info, lcl_rep, lcl_ooberrors, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpebagginglbfgs");
        mlpebagginglbfgs_results ret_tuple = new mlpebagginglbfgs_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        ret_tuple.ooberrors = (mlpcvreport)lcl_ooberrors.val;
        return ret_tuple;
    }
    private static native int _jni_mlpebagginglbfgs(mut_string error_msg, long ensemble, double[][] xy, int npoints, double decay, int restarts, double wstep, int maxits, mut_int info, mut_object rep, mut_object ooberrors, long _xparams);

    public static class mlpetraines_results
    {
        public int info;
        public mlpreport rep;
    }
    public static mlpetraines_results mlpetraines(mlpensemble ensemble, double[][] xy, int npoints, double decay, int restarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpetraines() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpetraines() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpetraines(error_msg, ensemble.get_ptr(), xy, npoints, decay, restarts, lcl_info, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpetraines");
        mlpetraines_results ret_tuple = new mlpetraines_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        return ret_tuple;
    }
    public static mlpetraines_results mlpetraines(mlpensemble ensemble, double[][] xy, int npoints, double decay, int restarts) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        mut_object lcl_rep = new mut_object();
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpetraines() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlpetraines() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlpetraines(error_msg, ensemble.get_ptr(), xy, npoints, decay, restarts, lcl_info, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlpetraines");
        mlpetraines_results ret_tuple = new mlpetraines_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.rep = (mlpreport)lcl_rep.val;
        return ret_tuple;
    }
    private static native int _jni_mlpetraines(mut_string error_msg, long ensemble, double[][] xy, int npoints, double decay, int restarts, mut_int info, mut_object rep, long _xparams);

    public static mlpreport mlptrainensemblees(mlptrainer s, mlpensemble ensemble, int nrestarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlptrainensemblees() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlptrainensemblees() points to deallocated ALGLIB object");
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlptrainensemblees() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlptrainensemblees() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptrainensemblees(error_msg, s.get_ptr(), ensemble.get_ptr(), nrestarts, lcl_rep, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptrainensemblees");
        return (mlpreport)lcl_rep.val;
    }
    public static mlpreport mlptrainensemblees(mlptrainer s, mlpensemble ensemble, int nrestarts) throws alglib.exception
    {
        activatealglibcore();
        mut_object lcl_rep = new mut_object();
        if( s==null )
            throw new alglib.exception("ALGLIB: parameter 's' of mlptrainensemblees() is null");
        if( s.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 's' of mlptrainensemblees() points to deallocated ALGLIB object");
        if( ensemble==null )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlptrainensemblees() is null");
        if( ensemble.get_ptr()==0 )
            throw new alglib.exception("ALGLIB: parameter 'ensemble' of mlptrainensemblees() points to deallocated ALGLIB object");
        mut_string error_msg = new mut_string();
        int completion_code = _jni_mlptrainensemblees(error_msg, s.get_ptr(), ensemble.get_ptr(), nrestarts, lcl_rep, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "mlptrainensemblees");
        return (mlpreport)lcl_rep.val;
    }
    private static native int _jni_mlptrainensemblees(mut_string error_msg, long s, long ensemble, int nrestarts, mut_object rep, long _xparams);

    
    
    //
    // Subpackage datacomp
    //
    
    public static class kmeansgenerate_results
    {
        public int info;
        public double[][] c;
        public int[] xyc;
    }
    public static kmeansgenerate_results kmeansgenerate(double[][] xy, int npoints, int nvars, int k, int restarts, alglib.xparams _xparams) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double2d lcl_c = new rlc_double2d();
        rlc_int1d lcl_xyc = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kmeansgenerate(error_msg, xy, npoints, nvars, k, restarts, lcl_info, lcl_c, lcl_xyc, _xparams!=null ? _xparams.get_val() : 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kmeansgenerate");
        kmeansgenerate_results ret_tuple = new kmeansgenerate_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.xyc = lcl_xyc.val;
        return ret_tuple;
    }
    public static kmeansgenerate_results kmeansgenerate(double[][] xy, int npoints, int nvars, int k, int restarts) throws alglib.exception
    {
        activatealglibcore();
        mut_int lcl_info = new mut_int();
        rlc_double2d lcl_c = new rlc_double2d();
        rlc_int1d lcl_xyc = new rlc_int1d();
        mut_string error_msg = new mut_string();
        int completion_code = _jni_kmeansgenerate(error_msg, xy, npoints, nvars, k, restarts, lcl_info, lcl_c, lcl_xyc, 0x0);
        if( completion_code!=X_OK )
            handle_exception(completion_code, error_msg.val, "kmeansgenerate");
        kmeansgenerate_results ret_tuple = new kmeansgenerate_results();
        ret_tuple.info = lcl_info.val;
        ret_tuple.c = lcl_c.val;
        ret_tuple.xyc = lcl_xyc.val;
        return ret_tuple;
    }
    private static native int _jni_kmeansgenerate(mut_string error_msg, double[][] xy, int npoints, int nvars, int k, int restarts, mut_int info, rlc_double2d c, rlc_int1d xyc, long _xparams);

    
    
    //
    // Subpackage alglibbasics
    //
    

}